{
    "props": [
        {
            "Attribute": "children",
            "Type": "`ReactNode` | `string`",
            "Description": "The content of the component.",
            "Default": ""
        },
        {
            "Attribute": "title",
            "Type": "`ReactNode` | `string`",
            "Description": "The accordion item title.",
            "Default": ""
        },
        {
            "Attribute": "subtitle",
            "Type": "`ReactNode` | `string`",
            "Description": "The accordion item subtitle.",
            "Default": ""
        },
        {
            "Attribute": "indicator",
            "Type": "[IndicatorProps](#accordion-item-indicator-props)",
            "Description": "The accordion item `expanded` indicator, usually an arrow icon.",
            "Default": ""
        },
        {
            "Attribute": "startContent",
            "Type": "`ReactNode`",
            "Description": "The accordion item start content, usually an icon or avatar.",
            "Default": ""
        },
        {
            "Attribute": "motionProps",
            "Type": "[MotionProps](#motion-props)",
            "Description": "The props to modify the framer motion animation. Use the `variants` API to create your own animation.",
            "Default": ""
        },
        {
            "Attribute": "isCompact",
            "Type": "`boolean`",
            "Description": "Whether the AccordionItem is compact.",
            "Default": "`false`"
        },
        {
            "Attribute": "isDisabled",
            "Type": "`boolean`",
            "Description": "The current disabled status.",
            "Default": "`false`"
        },
        {
            "Attribute": "keepContentMounted",
            "Type": "`boolean`",
            "Description": "Whether the AccordionItem content is kept mounted when closed.",
            "Default": "`false`"
        },
        {
            "Attribute": "hideIndicator",
            "Type": "`boolean`",
            "Description": "Whether the AccordionItem indicator is hidden.",
            "Default": "`false`"
        },
        {
            "Attribute": "disableAnimation",
            "Type": "`boolean`",
            "Description": "Whether the AccordionItem animation is disabled.",
            "Default": "`false`"
        },
        {
            "Attribute": "disableIndicatorAnimation",
            "Type": "`boolean`",
            "Description": "Whether the AccordionItem indicator animation is disabled.",
            "Default": "`false`"
        },
        {
            "Attribute": "classNames",
            "Type": "[Classnames](#accordion-item-classnames)",
            "Description": "Allows to set custom class names for the accordion item slots.",
            "Default": "-"
        }
    ],
    "link": "https://nextui.org/docs/components/accordion",
    "events": [
        {
            "Attribute": "onFocus",
            "Type": "`(e: FocusEvent) => void`",
            "Description": "Handler that is called when the element receives focus."
        },
        {
            "Attribute": "onBlur",
            "Type": "`(e: FocusEvent) => void`",
            "Description": "Handler that is called when the element loses focus."
        },
        {
            "Attribute": "onFocusChange",
            "Type": "`(isFocused: boolean) => void`",
            "Description": "Handler that is called when the element's focus status changes."
        },
        {
            "Attribute": "onKeyDown",
            "Type": "`(e: KeyboardEvent) => void`",
            "Description": "Handler that is called when a key is pressed."
        },
        {
            "Attribute": "onKeyUp",
            "Type": "`(e: KeyboardEvent) => void`",
            "Description": "Handler that is called when a key is released."
        },
        {
            "Attribute": "onPress",
            "Type": "`(e: PressEvent) => void`",
            "Description": "Handler called when the press is released over the target."
        },
        {
            "Attribute": "onPressStart",
            "Type": "`(e: PressEvent) => void`",
            "Description": "Handler called when a press interaction starts."
        },
        {
            "Attribute": "onPressEnd",
            "Type": "`(e: PressEvent) => void`",
            "Description": "Handler called when a press interaction ends, either over the target or when the pointer leaves the target."
        },
        {
            "Attribute": "onPressChange",
            "Type": "`(isPressed: boolean) => void`",
            "Description": "Handler called when the press state changes."
        },
        {
            "Attribute": "onPressUp",
            "Type": "`(e: PressEvent) => void`",
            "Description": "Handler called when a press is released over the target, regardless of whether it started on the target or not."
        },
        {
            "Attribute": "onClick",
            "Type": "`MouseEventHandler`",
            "Description": "The native button click event handler (**Deprecated**) use **onPress** instead."
        }
    ]
}