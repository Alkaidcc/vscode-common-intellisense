[
  {
      "name": "Accordion",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": true
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "defaultExpanded": {
              "description": "If true, expands the accordion by default.",
              "description_zh": "If true, expands the accordion by default.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableGutters": {
              "description": "If true, it removes the margin between two expanded accordion items and the increase of height.",
              "description_zh": "If true, it removes the margin between two expanded accordion items and the increase of height.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "expanded": {
              "description": "If true, expands the accordion, otherwise collapse it. Setting this prop enables control over the accordion.",
              "description_zh": "If true, expands the accordion, otherwise collapse it. Setting this prop enables control over the accordion.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the expand/collapse state is changed.Signature:function(event: React.SyntheticEvent, expanded: boolean) => voidevent The event source of the callback. Warning: This is a generic event not a change event.expanded The expanded state of the accordion.",
              "description_zh": "Callback fired when the expand/collapse state is changed.Signature:function(event: React.SyntheticEvent, expanded: boolean) => voidevent The event source of the callback. Warning: This is a generic event not a change event.expanded The expanded state of the accordion.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ transition?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ transition?: elementType }",
              "required": false
          },
          "square": {
              "description": "If true, rounded corners are disabled.",
              "description_zh": "If true, rounded corners are disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.Deprecated - Use slots.transition instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.Deprecated - Use slots.transition instead. This prop will be removed in v7. How to migrate.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.Deprecated - Use slotProps.transition instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.Deprecated - Use slotProps.transition instead. This prop will be removed in v7. How to migrate.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/accordion/",
      "link_zh": "https://mui.com/material-ui/api/accordion/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the expand/collapse state is changed.Signature:event The event source of the callback. Warning: This is a generic event not a change event.expanded The expanded state of the accordion.",
              "description_zh": "Callback fired when the expand/collapse state is changed.Signature:event The event source of the callback. Warning: This is a generic event not a change event.expanded The expanded state of the accordion.",
              "params": "function(event: React.SyntheticEvent, expanded: boolean) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Accordion"
  },
  {
      "name": "AccordionActions",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableSpacing": {
              "description": "If true, the actions do not have additional margin.",
              "description_zh": "If true, the actions do not have additional margin.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/accordion-actions/",
      "link_zh": "https://mui.com/material-ui/api/accordion-actions/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AccordionActions"
  },
  {
      "name": "AccordionDetails",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/accordion-details/",
      "link_zh": "https://mui.com/material-ui/api/accordion-details/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AccordionDetails"
  },
  {
      "name": "AccordionSummary",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "expandIcon": {
              "description": "The icon to display as the expand indicator.",
              "description_zh": "The icon to display as the expand indicator.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "focusVisibleClassName": {
              "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "description_zh": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "default": "",
              "value": "",
              "type": "string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/accordion-summary/",
      "link_zh": "https://mui.com/material-ui/api/accordion-summary/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AccordionSummary"
  },
  {
      "name": "Alert",
      "props": {
          "action": {
              "description": "The action to display. It renders after the message, at the end of the alert.",
              "description_zh": "The action to display. It renders after the message, at the end of the alert.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "closeText": {
              "description": "Override the default label for the close popup icon button.For localization purposes, you can use the provided translations.",
              "description_zh": "Override the default label for the close popup icon button.For localization purposes, you can use the provided translations.",
              "default": "'Close'",
              "value": "",
              "type": "string",
              "required": false
          },
          "color": {
              "description": "The color of the component. Unless provided, the value is taken from the severity prop. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. Unless provided, the value is taken from the severity prop. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "-",
              "value": "",
              "type": "error| info| success| warning| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.Deprecated - use the slots prop instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "The components used for each slot inside.Deprecated - use the slots prop instead. This prop will be removed in v7. How to migrate.",
              "default": "{}",
              "value": "",
              "type": "{ CloseButton?: elementType, CloseIcon?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.Deprecated - use the slotProps prop instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.Deprecated - use the slotProps prop instead. This prop will be removed in v7. How to migrate.",
              "default": "{}",
              "value": "",
              "type": "{ closeButton?: object, closeIcon?: object }",
              "required": false
          },
          "icon": {
              "description": "Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the severity prop. Set to false to remove the icon.",
              "description_zh": "Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the severity prop. Set to false to remove the icon.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "iconMapping": {
              "description": "The component maps the severity prop to a range of different icons, for instance success to <SuccessOutlined>. If you wish to change this mapping, you can provide your own. Alternatively, you can use the icon prop to override the icon displayed.",
              "description_zh": "The component maps the severity prop to a range of different icons, for instance success to <SuccessOutlined>. If you wish to change this mapping, you can provide your own. Alternatively, you can use the icon prop to override the icon displayed.",
              "default": "-",
              "value": "",
              "type": "{ error?: node, info?: node, success?: node, warning?: node }",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. When provided and no action prop is set, a close icon button is displayed that triggers the callback when clicked.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed. When provided and no action prop is set, a close icon button is displayed that triggers the callback when clicked.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "role": {
              "description": "The ARIA role attribute of the element.",
              "description_zh": "The ARIA role attribute of the element.",
              "default": "'alert'",
              "value": "",
              "type": "string",
              "required": false
          },
          "severity": {
              "description": "The severity of the alert. This defines the color and icon used.",
              "description_zh": "The severity of the alert. This defines the color and icon used.",
              "default": "'success'",
              "value": "",
              "type": "error| info| success| warning| string",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ closeButton?: func| object, closeIcon?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ closeButton?: elementType, closeIcon?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'standard'",
              "value": "",
              "type": "filled| outlined| standard| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/alert/",
      "link_zh": "https://mui.com/material-ui/api/alert/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. When provided and no  prop is set, a close icon button is displayed that triggers the callback when clicked.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed. When provided and no  prop is set, a close icon button is displayed that triggers the callback when clicked.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "params": "action"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Alert"
  },
  {
      "name": "AlertTitle",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/alert-title/",
      "link_zh": "https://mui.com/material-ui/api/alert-title/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AlertTitle"
  },
  {
      "name": "AppBar",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "default| inherit| primary| secondary| transparent| error| info| success| warning| string",
              "required": false
          },
          "enableColorOnDark": {
              "description": "If true, the color prop is applied in dark mode.",
              "description_zh": "If true, the color prop is applied in dark mode.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "position": {
              "description": "The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.",
              "description_zh": "The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.",
              "default": "'fixed'",
              "value": "",
              "type": "absolute| fixed| relative| static| sticky",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/app-bar/",
      "link_zh": "https://mui.com/material-ui/api/app-bar/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AppBar"
  },
  {
      "name": "Autocomplete",
      "props": {
          "options": {
              "description": "Array of options.",
              "description_zh": "Array of options.",
              "default": "-",
              "value": "",
              "type": "array",
              "required": true
          },
          "renderInput": {
              "description": "Render the input.Signature:function(params: object) => ReactNode",
              "description_zh": "Render the input.Signature:function(params: object) => ReactNode",
              "default": "-",
              "value": "",
              "type": "func",
              "required": true
          },
          "autoComplete": {
              "description": "If true, the portion of the selected suggestion that the user hasn't typed, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state.",
              "description_zh": "If true, the portion of the selected suggestion that the user hasn't typed, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "autoHighlight": {
              "description": "If true, the first option is automatically highlighted.",
              "description_zh": "If true, the first option is automatically highlighted.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "autoSelect": {
              "description": "If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.When using the freeSolo mode, the typed value will be the input value if the Autocomplete loses focus without highlighting an option.",
              "description_zh": "If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.When using the freeSolo mode, the typed value will be the input value if the Autocomplete loses focus without highlighting an option.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "blurOnSelect": {
              "description": "Control if the input should be blurred when an option is selected:\n\nfalse the input is not blurred.\ntrue the input is always blurred.\ntouch the input is blurred after a touch event.\nmouse the input is blurred after a mouse event.\n\n",
              "description_zh": "Control if the input should be blurred when an option is selected:\n\nfalse the input is not blurred.\ntrue the input is always blurred.\ntouch the input is blurred after a touch event.\nmouse the input is blurred after a mouse event.\n\n",
              "default": "false",
              "value": "",
              "type": "mouse| touch| bool",
              "required": false
          },
          "ChipProps": {
              "description": "Props applied to the Chip element.",
              "description_zh": "Props applied to the Chip element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "clearIcon": {
              "description": "The icon to display in place of the default clear icon.",
              "description_zh": "The icon to display in place of the default clear icon.",
              "default": "<ClearIcon fontSize=\"small\" />",
              "value": "",
              "type": "node",
              "required": false
          },
          "clearOnBlur": {
              "description": "If true, the input's text is cleared on blur if no value is selected.Set it to true if you want to help the user enter a new value. Set it to false if you want to help the user resume their search.",
              "description_zh": "If true, the input's text is cleared on blur if no value is selected.Set it to true if you want to help the user enter a new value. Set it to false if you want to help the user resume their search.",
              "default": "!props.freeSolo",
              "value": "",
              "type": "bool",
              "required": false
          },
          "clearOnEscape": {
              "description": "If true, clear all values when the user presses escape and the popup is closed.",
              "description_zh": "If true, clear all values when the user presses escape and the popup is closed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "clearText": {
              "description": "Override the default text for the clear icon button.For localization purposes, you can use the provided translations.",
              "description_zh": "Override the default text for the clear icon button.For localization purposes, you can use the provided translations.",
              "default": "'Clear'",
              "value": "",
              "type": "string",
              "required": false
          },
          "closeText": {
              "description": "Override the default text for the close popup icon button.For localization purposes, you can use the provided translations.",
              "description_zh": "Override the default text for the close popup icon button.For localization purposes, you can use the provided translations.",
              "default": "'Close'",
              "value": "",
              "type": "string",
              "required": false
          },
          "componentsProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ clearIndicator?: object, paper?: object, popper?: object, popupIndicator?: object }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "props.multiple ? [] : null",
              "value": "",
              "type": "any",
              "required": false
          },
          "disableClearable": {
              "description": "If true, the input can't be cleared.",
              "description_zh": "If true, the input can't be cleared.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableCloseOnSelect": {
              "description": "If true, the popup won't close when a value is selected.",
              "description_zh": "If true, the popup won't close when a value is selected.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabledItemsFocusable": {
              "description": "If true, will allow focus on disabled items.",
              "description_zh": "If true, will allow focus on disabled items.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableListWrap": {
              "description": "If true, the list box in the popup will not wrap focus.",
              "description_zh": "If true, the list box in the popup will not wrap focus.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disablePortal": {
              "description": "If true, the Popper content will be under the DOM hierarchy of the parent component.",
              "description_zh": "If true, the Popper content will be under the DOM hierarchy of the parent component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "filterOptions": {
              "description": "A function that determines the filtered options to be rendered on search.Signature:function(options: Array, state: object) => Arrayoptions The options to render.state The state of the component.",
              "description_zh": "A function that determines the filtered options to be rendered on search.Signature:function(options: Array, state: object) => Arrayoptions The options to render.state The state of the component.",
              "default": "createFilterOptions()",
              "value": "",
              "type": "func",
              "required": false
          },
          "filterSelectedOptions": {
              "description": "If true, hide the selected options from the list box.",
              "description_zh": "If true, hide the selected options from the list box.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "forcePopupIcon": {
              "description": "Force the visibility display of the popup icon.",
              "description_zh": "Force the visibility display of the popup icon.",
              "default": "'auto'",
              "value": "",
              "type": "auto| bool",
              "required": false
          },
          "freeSolo": {
              "description": "If true, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
              "description_zh": "If true, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "getLimitTagsText": {
              "description": "The label to display when the tags are truncated (limitTags).Signature:function(more: number) => ReactNodemore The number of truncated tags.",
              "description_zh": "The label to display when the tags are truncated (limitTags).Signature:function(more: number) => ReactNodemore The number of truncated tags.",
              "default": "(more) => `+${more}`",
              "value": "",
              "type": "func",
              "required": false
          },
          "getOptionDisabled": {
              "description": "Used to determine the disabled state for a given option.Signature:function(option: Value) => booleanoption The option to test.",
              "description_zh": "Used to determine the disabled state for a given option.Signature:function(option: Value) => booleanoption The option to test.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "getOptionKey": {
              "description": "Used to determine the key for a given option. This can be useful when the labels of options are not unique (since labels are used as keys by default).Signature:function(option: Value) => string | numberoption The option to get the key for.",
              "description_zh": "Used to determine the key for a given option. This can be useful when the labels of options are not unique (since labels are used as keys by default).Signature:function(option: Value) => string | numberoption The option to get the key for.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "getOptionLabel": {
              "description": "Used to determine the string value for a given option. It's used to fill the input (and the list box options if renderOption is not provided).If used in free solo mode, it must accept both the type of the options and a string.Signature:function(option: Value) => string",
              "description_zh": "Used to determine the string value for a given option. It's used to fill the input (and the list box options if renderOption is not provided).If used in free solo mode, it must accept both the type of the options and a string.Signature:function(option: Value) => string",
              "default": "(option) => option.label ?? option",
              "value": "",
              "type": "func",
              "required": false
          },
          "groupBy": {
              "description": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when renderGroup is not provided.Signature:function(options: Value) => stringoptions The options to group.",
              "description_zh": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when renderGroup is not provided.Signature:function(options: Value) => stringoptions The options to group.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "handleHomeEndKeys": {
              "description": "If true, the component handles the \"Home\" and \"End\" keys when the popup is open. It should move focus to the first option and last option, respectively.",
              "description_zh": "If true, the component handles the \"Home\" and \"End\" keys when the popup is open. It should move focus to the first option and last option, respectively.",
              "default": "!props.freeSolo",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "This prop is used to help implement the accessibility logic. If you don't provide an id it will fall back to a randomly generated one.",
              "description_zh": "This prop is used to help implement the accessibility logic. If you don't provide an id it will fall back to a randomly generated one.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "includeInputInList": {
              "description": "If true, the highlight can move to the input.",
              "description_zh": "If true, the highlight can move to the input.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "inputValue": {
              "description": "The input value.",
              "description_zh": "The input value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "isOptionEqualToValue": {
              "description": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value.Signature:function(option: Value, value: Value) => booleanoption The option to test.value The value to test against.",
              "description_zh": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value.Signature:function(option: Value, value: Value) => booleanoption The option to test.value The value to test against.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "limitTags": {
              "description": "The maximum number of tags that will be visible when not focused. Set -1 to disable the limit.",
              "description_zh": "The maximum number of tags that will be visible when not focused. Set -1 to disable the limit.",
              "default": "-1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "ListboxComponent": {
              "description": "The component used to render the listbox.",
              "description_zh": "The component used to render the listbox.",
              "default": "'ul'",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "ListboxProps": {
              "description": "Props applied to the Listbox element.",
              "description_zh": "Props applied to the Listbox element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "loading": {
              "description": "If true, the component is in a loading state. This shows the loadingText in place of suggestions (only if there are no suggestions to show, for example options are empty).",
              "description_zh": "If true, the component is in a loading state. This shows the loadingText in place of suggestions (only if there are no suggestions to show, for example options are empty).",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "loadingText": {
              "description": "Text to display when in a loading state.For localization purposes, you can use the provided translations.",
              "description_zh": "Text to display when in a loading state.For localization purposes, you can use the provided translations.",
              "default": "'Loading…'",
              "value": "",
              "type": "node",
              "required": false
          },
          "multiple": {
              "description": "If true, value must be an array and the menu will support multiple selections.",
              "description_zh": "If true, value must be an array and the menu will support multiple selections.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "noOptionsText": {
              "description": "Text to display when there are no options.For localization purposes, you can use the provided translations.",
              "description_zh": "Text to display when there are no options.For localization purposes, you can use the provided translations.",
              "default": "'No options'",
              "value": "",
              "type": "node",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: Value | Array, reason: string, details?: string) => voidevent The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
              "description_zh": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: Value | Array, reason: string, details?: string) => voidevent The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent, reason: string) => voidevent The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
              "description_zh": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent, reason: string) => voidevent The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onHighlightChange": {
              "description": "Callback fired when the highlight option changes.Signature:function(event: React.SyntheticEvent, option: Value, reason: string) => voidevent The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
              "description_zh": "Callback fired when the highlight option changes.Signature:function(event: React.SyntheticEvent, option: Value, reason: string) => voidevent The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onInputChange": {
              "description": "Callback fired when the input value changes.Signature:function(event: React.SyntheticEvent, value: string, reason: string) => voidevent The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
              "description_zh": "Callback fired when the input value changes.Signature:function(event: React.SyntheticEvent, value: string, reason: string) => voidevent The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onOpen": {
              "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "openOnFocus": {
              "description": "If true, the popup will open on input focus.",
              "description_zh": "If true, the popup will open on input focus.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "openText": {
              "description": "Override the default text for the open popup icon button.For localization purposes, you can use the provided translations.",
              "description_zh": "Override the default text for the open popup icon button.For localization purposes, you can use the provided translations.",
              "default": "'Open'",
              "value": "",
              "type": "string",
              "required": false
          },
          "PaperComponent": {
              "description": "The component used to render the body of the popup.",
              "description_zh": "The component used to render the body of the popup.",
              "default": "Paper",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "PopperComponent": {
              "description": "The component used to position the popup.",
              "description_zh": "The component used to position the popup.",
              "default": "Popper",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "popupIcon": {
              "description": "The icon to display in place of the default popup icon.",
              "description_zh": "The icon to display in place of the default popup icon.",
              "default": "<ArrowDropDownIcon />",
              "value": "",
              "type": "node",
              "required": false
          },
          "readOnly": {
              "description": "If true, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
              "description_zh": "If true, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "renderGroup": {
              "description": "Render the group.Signature:function(params: AutocompleteRenderGroupParams) => ReactNodeparams The group to render.",
              "description_zh": "Render the group.Signature:function(params: AutocompleteRenderGroupParams) => ReactNodeparams The group to render.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "renderOption": {
              "description": "Render the option, use getOptionLabel by default.Signature:function(props: object, option: Value, state: object, ownerState: object) => ReactNodeprops The props to apply on the li element.option The option to render.state The state of each option.ownerState The state of the Autocomplete component.",
              "description_zh": "Render the option, use getOptionLabel by default.Signature:function(props: object, option: Value, state: object, ownerState: object) => ReactNodeprops The props to apply on the li element.option The option to render.state The state of each option.ownerState The state of the Autocomplete component.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "renderTags": {
              "description": "Render the selected value.Signature:function(value: Array, getTagProps: function, ownerState: object) => ReactNodevalue The value provided to the component.getTagProps A tag props getter.ownerState The state of the Autocomplete component.",
              "description_zh": "Render the selected value.Signature:function(value: Array, getTagProps: function, ownerState: object) => ReactNodevalue The value provided to the component.getTagProps A tag props getter.ownerState The state of the Autocomplete component.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "selectOnFocus": {
              "description": "If true, the input's text is selected on focus. It helps the user clear the selected value.",
              "description_zh": "If true, the input's text is selected on focus. It helps the user clear the selected value.",
              "default": "!props.freeSolo",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| string",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ clearIndicator?: object, paper?: object, popper?: object, popupIndicator?: object }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the autocomplete.The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the isOptionEqualToValue prop.",
              "description_zh": "The value of the autocomplete.The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the isOptionEqualToValue prop.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/autocomplete/",
      "link_zh": "https://mui.com/material-ui/api/autocomplete/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value changes.Signature:event The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
              "description_zh": "Callback fired when the value changes.Signature:event The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
              "params": "function(event: React.SyntheticEvent, value: Value | Array, reason: string, details?: string) => void"
          },
          {
              "name": "onClose",
              "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:event The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
              "description_zh": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:event The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
              "params": "function(event: React.SyntheticEvent, reason: string) => void"
          },
          {
              "name": "onHighlightChange",
              "description": "Callback fired when the highlight option changes.Signature:event The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
              "description_zh": "Callback fired when the highlight option changes.Signature:event The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
              "params": "function(event: React.SyntheticEvent, option: Value, reason: string) => void"
          },
          {
              "name": "onInputChange",
              "description": "Callback fired when the input value changes.Signature:event The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
              "description_zh": "Callback fired when the input value changes.Signature:event The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
              "params": "function(event: React.SyntheticEvent, value: string, reason: string) => void"
          },
          {
              "name": "onOpen",
              "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:event The event source of the callback.",
              "params": "function(event: React.SyntheticEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Autocomplete"
  },
  {
      "name": "Avatar",
      "props": {
          "alt": {
              "description": "Used in combination with src or srcSet to provide an alt attribute for the rendered img element.",
              "description_zh": "Used in combination with src or srcSet to provide an alt attribute for the rendered img element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "children": {
              "description": "Used to render icon or text elements inside the Avatar if src is not set. This can be an element, or just a string.",
              "description_zh": "Used to render icon or text elements inside the Avatar if src is not set. This can be an element, or just a string.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "imgProps": {
              "description": "Attributes applied to the img element if the component is used to display an image. It can be used to listen for the loading error event.Deprecated - Use slotProps.img instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "Attributes applied to the img element if the component is used to display an image. It can be used to listen for the loading error event.Deprecated - Use slotProps.img instead. This prop will be removed in v7. How to migrate.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sizes": {
              "description": "The sizes attribute for the img element.",
              "description_zh": "The sizes attribute for the img element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ img?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ img?: elementType }",
              "required": false
          },
          "src": {
              "description": "The src attribute for the img element.",
              "description_zh": "The src attribute for the img element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "srcSet": {
              "description": "The srcSet attribute for the img element. Use this attribute for responsive image display.",
              "description_zh": "The srcSet attribute for the img element. Use this attribute for responsive image display.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The shape of the avatar.",
              "description_zh": "The shape of the avatar.",
              "default": "'circular'",
              "value": "",
              "type": "circular| rounded| square| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/avatar/",
      "link_zh": "https://mui.com/material-ui/api/avatar/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Avatar"
  },
  {
      "name": "AvatarGroup",
      "props": {
          "children": {
              "description": "The avatars to stack.",
              "description_zh": "The avatars to stack.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ additionalAvatar?: object }",
              "required": false
          },
          "max": {
              "description": "Max avatars to show before +x.",
              "description_zh": "Max avatars to show before +x.",
              "default": "5",
              "value": "",
              "type": "number",
              "required": false
          },
          "renderSurplus": {
              "description": "custom renderer of extraAvatarsSignature:function(surplus: number) => React.ReactNodesurplus number of extra avatarsReturns: custom element to display",
              "description_zh": "custom renderer of extraAvatarsSignature:function(surplus: number) => React.ReactNodesurplus number of extra avatarsReturns: custom element to display",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ additionalAvatar?: object }",
              "required": false
          },
          "spacing": {
              "description": "Spacing between avatars.",
              "description_zh": "Spacing between avatars.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| number",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "total": {
              "description": "The total number of avatars. Used for calculating the number of extra avatars.",
              "description_zh": "The total number of avatars. Used for calculating the number of extra avatars.",
              "default": "children.length",
              "value": "",
              "type": "number",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'circular'",
              "value": "",
              "type": "circular| rounded| square| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/avatar-group/",
      "link_zh": "https://mui.com/material-ui/api/avatar-group/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "AvatarGroup"
  },
  {
      "name": "Backdrop",
      "props": {
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: object }",
              "required": false
          },
          "invisible": {
              "description": "If true, the backdrop is invisible. It can be used when rendering a popover or a custom select component.",
              "description_zh": "If true, the backdrop is invisible. It can be used when rendering a popover or a custom select component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Fade",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "-",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/backdrop/",
      "link_zh": "https://mui.com/material-ui/api/backdrop/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Backdrop"
  },
  {
      "name": "Badge",
      "props": {
          "anchorOrigin": {
              "description": "The anchor of the badge.",
              "description_zh": "The anchor of the badge.",
              "default": "{\n  vertical: 'top',\n  horizontal: 'right',\n}",
              "value": "",
              "type": "{ horizontal: left| right, vertical: bottom| top }",
              "required": false
          },
          "badgeContent": {
              "description": "The content rendered within the badge.",
              "description_zh": "The content rendered within the badge.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "children": {
              "description": "The badge will be added relative to this node.",
              "description_zh": "The badge will be added relative to this node.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'default'",
              "value": "",
              "type": "default| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Badge?: elementType, Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ badge?: func| object, root?: func| object }",
              "required": false
          },
          "invisible": {
              "description": "If true, the badge is invisible.",
              "description_zh": "If true, the badge is invisible.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "max": {
              "description": "Max count to show.",
              "description_zh": "Max count to show.",
              "default": "99",
              "value": "",
              "type": "number",
              "required": false
          },
          "overlap": {
              "description": "Wrapped shape the badge should overlap.",
              "description_zh": "Wrapped shape the badge should overlap.",
              "default": "'rectangular'",
              "value": "",
              "type": "circular| rectangular",
              "required": false
          },
          "showZero": {
              "description": "Controls whether the badge is hidden when badgeContent is zero.",
              "description_zh": "Controls whether the badge is hidden when badgeContent is zero.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the Badge.",
              "description_zh": "The props used for each slot inside the Badge.",
              "default": "{}",
              "value": "",
              "type": "{ badge?: func| object, root?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the Badge. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Badge. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ badge?: elementType, root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'standard'",
              "value": "",
              "type": "dot| standard| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/badge/",
      "link_zh": "https://mui.com/material-ui/api/badge/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Badge"
  },
  {
      "name": "BottomNavigation",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: any) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child.",
              "description_zh": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: any) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "showLabels": {
              "description": "If true, all BottomNavigationActions will show their labels. By default, only the selected BottomNavigationAction will show its label.",
              "description_zh": "If true, all BottomNavigationActions will show their labels. By default, only the selected BottomNavigationAction will show its label.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the currently selected BottomNavigationAction.",
              "description_zh": "The value of the currently selected BottomNavigationAction.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/bottom-navigation/",
      "link_zh": "https://mui.com/material-ui/api/bottom-navigation/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value changes.Signature:event The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child.",
              "description_zh": "Callback fired when the value changes.Signature:event The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child.",
              "params": "function(event: React.SyntheticEvent, value: any) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "BottomNavigation"
  },
  {
      "name": "BottomNavigationAction",
      "props": {
          "children": {
              "description": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "description_zh": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "default": "",
              "value": "",
              "type": "unsupportedProp",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "icon": {
              "description": "The icon to display.",
              "description_zh": "The icon to display.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "label": {
              "description": "The label element.",
              "description_zh": "The label element.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "showLabel": {
              "description": "If true, the BottomNavigationAction will show its label. By default, only the selected BottomNavigationAction inside BottomNavigation will show its label.The prop defaults to the value (false) inherited from the parent BottomNavigation component.",
              "description_zh": "If true, the BottomNavigationAction will show its label. By default, only the selected BottomNavigationAction inside BottomNavigation will show its label.The prop defaults to the value (false) inherited from the parent BottomNavigation component.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
              "description_zh": "You can provide your own value. Otherwise, we fallback to the child position index.",
              "default": "",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/bottom-navigation-action/",
      "link_zh": "https://mui.com/material-ui/api/bottom-navigation-action/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "BottomNavigationAction"
  },
  {
      "name": "Box",
      "props": {
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/box/",
      "link_zh": "https://mui.com/material-ui/api/box/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Box"
  },
  {
      "name": "Breadcrumbs",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "expandText": {
              "description": "Override the default label for the expand button.For localization purposes, you can use the provided translations.",
              "description_zh": "Override the default label for the expand button.For localization purposes, you can use the provided translations.",
              "default": "'Show path'",
              "value": "",
              "type": "string",
              "required": false
          },
          "itemsAfterCollapse": {
              "description": "If max items is exceeded, the number of items to show after the ellipsis.",
              "description_zh": "If max items is exceeded, the number of items to show after the ellipsis.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "itemsBeforeCollapse": {
              "description": "If max items is exceeded, the number of items to show before the ellipsis.",
              "description_zh": "If max items is exceeded, the number of items to show before the ellipsis.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "maxItems": {
              "description": "Specifies the maximum number of breadcrumbs to display. When there are more than the maximum number, only the first itemsBeforeCollapse and last itemsAfterCollapse will be shown, with an ellipsis in between.",
              "description_zh": "Specifies the maximum number of breadcrumbs to display. When there are more than the maximum number, only the first itemsBeforeCollapse and last itemsAfterCollapse will be shown, with an ellipsis in between.",
              "default": "8",
              "value": "",
              "type": "integer",
              "required": false
          },
          "separator": {
              "description": "Custom separator node.",
              "description_zh": "Custom separator node.",
              "default": "'/'",
              "value": "",
              "type": "node",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the Breadcumb.",
              "description_zh": "The props used for each slot inside the Breadcumb.",
              "default": "{}",
              "value": "",
              "type": "{ collapsedIcon?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the Breadcumb. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Breadcumb. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ CollapsedIcon?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/breadcrumbs/",
      "link_zh": "https://mui.com/material-ui/api/breadcrumbs/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Breadcrumbs"
  },
  {
      "name": "Button",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "inherit| primary| secondary| success| error| info| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableElevation": {
              "description": "If true, no elevation is used.",
              "description_zh": "If true, no elevation is used.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the  keyboard focus ripple is disabled.",
              "description_zh": "If true, the  keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "description_zh": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "endIcon": {
              "description": "Element placed after the children.",
              "description_zh": "Element placed after the children.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the button will take up the full width of its container.",
              "description_zh": "If true, the button will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "href": {
              "description": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node.",
              "description_zh": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense button styling.",
              "description_zh": "The size of the component. small is equivalent to the dense button styling.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "startIcon": {
              "description": "Element placed before the children.",
              "description_zh": "Element placed before the children.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'text'",
              "value": "",
              "type": "contained| outlined| text| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/button/",
      "link_zh": "https://mui.com/material-ui/api/button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Button"
  },
  {
      "name": "ButtonBase",
      "props": {
          "action": {
              "description": "A ref for imperative actions. It currently only supports focusVisible() action.",
              "description_zh": "A ref for imperative actions. It currently only supports focusVisible() action.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "centerRipple": {
              "description": "If true, the ripples are centered. They won't start at the cursor interaction position.",
              "description_zh": "If true, the ripples are centered. They won't start at the cursor interaction position.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element type",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "description_zh": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableTouchRipple": {
              "description": "If true, the touch ripple effect is disabled.",
              "description_zh": "If true, the touch ripple effect is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focusRipple": {
              "description": "If true, the base button will have a keyboard focus ripple.",
              "description_zh": "If true, the base button will have a keyboard focus ripple.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focusVisibleClassName": {
              "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "description_zh": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "LinkComponent": {
              "description": "The component used to render a link when the href prop is provided.",
              "description_zh": "The component used to render a link when the href prop is provided.",
              "default": "'a'",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "onFocusVisible": {
              "description": "Callback fired when the component is focused with a keyboard. We trigger a onFocus callback too.",
              "description_zh": "Callback fired when the component is focused with a keyboard. We trigger a onFocus callback too.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TouchRippleProps": {
              "description": "Props applied to the TouchRipple element.",
              "description_zh": "Props applied to the TouchRipple element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "touchRippleRef": {
              "description": "A ref that points to the TouchRipple element.",
              "description_zh": "A ref that points to the TouchRipple element.",
              "default": "-",
              "value": "",
              "type": "func| { current?: { pulsate: func, start: func, stop: func } }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/button-base/",
      "link_zh": "https://mui.com/material-ui/api/button-base/",
      "typeDetail": {},
      "events": [
          {
              "name": "onFocusVisible",
              "description": "Callback fired when the component is focused with a keyboard. We trigger a  callback too.",
              "description_zh": "Callback fired when the component is focused with a keyboard. We trigger a  callback too.",
              "params": "onFocus"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ButtonBase"
  },
  {
      "name": "ButtonGroup",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "inherit| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableElevation": {
              "description": "If true, no elevation is used.",
              "description_zh": "If true, no elevation is used.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the button keyboard focus ripple is disabled.",
              "description_zh": "If true, the button keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the button ripple effect is disabled.",
              "description_zh": "If true, the button ripple effect is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the buttons will take up the full width of its container.",
              "description_zh": "If true, the buttons will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "orientation": {
              "description": "The component orientation (layout flow direction).",
              "description_zh": "The component orientation (layout flow direction).",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense button styling.",
              "description_zh": "The size of the component. small is equivalent to the dense button styling.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'outlined'",
              "value": "",
              "type": "contained| outlined| text| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/button-group/",
      "link_zh": "https://mui.com/material-ui/api/button-group/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ButtonGroup"
  },
  {
      "name": "Card",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "raised": {
              "description": "If true, the card will use raised styling.",
              "description_zh": "If true, the card will use raised styling.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card/",
      "link_zh": "https://mui.com/material-ui/api/card/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Card"
  },
  {
      "name": "CardActionArea",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card-action-area/",
      "link_zh": "https://mui.com/material-ui/api/card-action-area/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CardActionArea"
  },
  {
      "name": "CardActions",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableSpacing": {
              "description": "If true, the actions do not have additional margin.",
              "description_zh": "If true, the actions do not have additional margin.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card-actions/",
      "link_zh": "https://mui.com/material-ui/api/card-actions/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CardActions"
  },
  {
      "name": "CardContent",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card-content/",
      "link_zh": "https://mui.com/material-ui/api/card-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CardContent"
  },
  {
      "name": "CardHeader",
      "props": {
          "action": {
              "description": "The action to display in the card header.",
              "description_zh": "The action to display in the card header.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "avatar": {
              "description": "The Avatar element to display.",
              "description_zh": "The Avatar element to display.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disableTypography": {
              "description": "If true, subheader and title won't be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the title text, and optional subheader text with the Typography component.",
              "description_zh": "If true, subheader and title won't be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the title text, and optional subheader text with the Typography component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "subheader": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "subheaderTypographyProps": {
              "description": "These props will be forwarded to the subheader (as long as disableTypography is not true).",
              "description_zh": "These props will be forwarded to the subheader (as long as disableTypography is not true).",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "title": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "titleTypographyProps": {
              "description": "These props will be forwarded to the title (as long as disableTypography is not true).",
              "description_zh": "These props will be forwarded to the title (as long as disableTypography is not true).",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card-header/",
      "link_zh": "https://mui.com/material-ui/api/card-header/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CardHeader"
  },
  {
      "name": "CardMedia",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "image": {
              "description": "Image to be displayed as a background image. Either image or src prop must be specified. Note that caller must specify height otherwise the image will not be visible.",
              "description_zh": "Image to be displayed as a background image. Either image or src prop must be specified. Note that caller must specify height otherwise the image will not be visible.",
              "default": "",
              "value": "",
              "type": "string",
              "required": false
          },
          "src": {
              "description": "An alias for image property. Available only with media components. Media components: video, audio, picture, iframe, img.",
              "description_zh": "An alias for image property. Available only with media components. Media components: video, audio, picture, iframe, img.",
              "default": "",
              "value": "",
              "type": "string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/card-media/",
      "link_zh": "https://mui.com/material-ui/api/card-media/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CardMedia"
  },
  {
      "name": "Checkbox",
      "props": {
          "checked": {
              "description": "If true, the component is checked.",
              "description_zh": "If true, the component is checked.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "checkedIcon": {
              "description": "The icon to display when the component is checked.",
              "description_zh": "The icon to display when the component is checked.",
              "default": "<CheckBoxIcon />",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "default| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "defaultChecked": {
              "description": "The default checked state. Use when the component is not controlled.",
              "description_zh": "The default checked state. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.",
              "description_zh": "If true, the ripple effect is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The icon to display when the component is unchecked.",
              "description_zh": "The icon to display when the component is unchecked.",
              "default": "<CheckBoxOutlineBlankIcon />",
              "value": "",
              "type": "node",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "indeterminate": {
              "description": "If true, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a data-indeterminate attribute on the input.",
              "description_zh": "If true, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a data-indeterminate attribute on the input.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "indeterminateIcon": {
              "description": "The icon to display when the component is indeterminate.",
              "description_zh": "The icon to display when the component is indeterminate.",
              "default": "<IndeterminateCheckBoxIcon />",
              "value": "",
              "type": "node",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the state is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required.",
              "description_zh": "If true, the input element is required.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense checkbox styling.",
              "description_zh": "The size of the component. small is equivalent to the dense checkbox styling.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the component. The DOM API casts this to a string. The browser uses \"on\" as the default value.",
              "description_zh": "The value of the component. The DOM API casts this to a string. The browser uses \"on\" as the default value.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/checkbox/",
      "link_zh": "https://mui.com/material-ui/api/checkbox/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Checkbox"
  },
  {
      "name": "Chip",
      "props": {
          "avatar": {
              "description": "The Avatar element to display.",
              "description_zh": "The Avatar element to display.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": false
          },
          "children": {
              "description": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "description_zh": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "default": "-",
              "value": "",
              "type": "unsupportedProp",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "clickable": {
              "description": "If true, the chip will appear clickable, and will raise when pressed, even if the onClick prop is not defined. If false, the chip will not appear clickable, even if onClick prop is defined. This can be used, for example, along with the component prop to indicate an anchor Chip is clickable. Note: this controls the UI and does not affect the onClick event.",
              "description_zh": "If true, the chip will appear clickable, and will raise when pressed, even if the onClick prop is not defined. If false, the chip will not appear clickable, even if onClick prop is defined. This can be used, for example, along with the component prop to indicate an anchor Chip is clickable. Note: this controls the UI and does not affect the onClick event.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'default'",
              "value": "",
              "type": "default| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "deleteIcon": {
              "description": "Override the default delete icon element. Shown only if onDelete is set.",
              "description_zh": "Override the default delete icon element. Shown only if onDelete is set.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "Icon element.",
              "description_zh": "Icon element.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": false
          },
          "label": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "onDelete": {
              "description": "Callback fired when the delete icon is clicked. If set, the delete icon will be shown.",
              "description_zh": "Callback fired when the delete icon is clicked. If set, the delete icon will be shown.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "skipFocusWhenDisabled": {
              "description": "If true, allows the disabled chip to escape focus. If false, allows the disabled chip to receive focus.",
              "description_zh": "If true, allows the disabled chip to escape focus. If false, allows the disabled chip to receive focus.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'filled'",
              "value": "",
              "type": "filled| outlined| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/chip/",
      "link_zh": "https://mui.com/material-ui/api/chip/",
      "typeDetail": {},
      "events": [
          {
              "name": "onDelete",
              "description": "Callback fired when the delete icon is clicked. If set, the delete icon will be shown.",
              "description_zh": "Callback fired when the delete icon is clicked. If set, the delete icon will be shown."
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Chip"
  },
  {
      "name": "CircularProgress",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "inherit| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "disableShrink": {
              "description": "If true, the shrink animation is disabled. This only works if variant is indeterminate.",
              "description_zh": "If true, the shrink animation is disabled. This only works if variant is indeterminate.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component. If using a number, the pixel unit is assumed. If using a string, you need to provide the CSS unit, for example '3rem'.",
              "description_zh": "The size of the component. If using a number, the pixel unit is assumed. If using a string, you need to provide the CSS unit, for example '3rem'.",
              "default": "40",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "thickness": {
              "description": "The thickness of the circle.",
              "description_zh": "The thickness of the circle.",
              "default": "3.6",
              "value": "",
              "type": "number",
              "required": false
          },
          "value": {
              "description": "The value of the progress indicator for the determinate variant. Value between 0 and 100.",
              "description_zh": "The value of the progress indicator for the determinate variant. Value between 0 and 100.",
              "default": "0",
              "value": "",
              "type": "number",
              "required": false
          },
          "variant": {
              "description": "The variant to use. Use indeterminate when there is no progress value.",
              "description_zh": "The variant to use. Use indeterminate when there is no progress value.",
              "default": "'indeterminate'",
              "value": "",
              "type": "determinate| indeterminate",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/circular-progress/",
      "link_zh": "https://mui.com/material-ui/api/circular-progress/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CircularProgress"
  },
  {
      "name": "Collapse",
      "props": {
          "addEndListener": {
              "description": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "description_zh": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "children": {
              "description": "The content node to be collapsed.",
              "description_zh": "The content node to be collapsed.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "collapsedSize": {
              "description": "The width (horizontal) or height (vertical) of the container when collapsed.",
              "description_zh": "The width (horizontal) or height (vertical) of the container when collapsed.",
              "default": "'0px'",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element type",
              "required": false
          },
          "easing": {
              "description": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "description_zh": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "default": "-",
              "value": "",
              "type": "{ enter?: string, exit?: string }| string",
              "required": false
          },
          "in": {
              "description": "If true, the component will transition in.",
              "description_zh": "If true, the component will transition in.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "orientation": {
              "description": "The transition orientation.",
              "description_zh": "The transition orientation.",
              "default": "'vertical'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "timeout": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.Set to 'auto' to automatically calculate transition time based on height.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.Set to 'auto' to automatically calculate transition time based on height.",
              "default": "duration.standard",
              "value": "",
              "type": "auto| number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/collapse/",
      "link_zh": "https://mui.com/material-ui/api/collapse/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Collapse"
  },
  {
      "name": "Container",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disableGutters": {
              "description": "If true, the left and right padding is removed.",
              "description_zh": "If true, the left and right padding is removed.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fixed": {
              "description": "Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.",
              "description_zh": "Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "maxWidth": {
              "description": "Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.",
              "description_zh": "Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.",
              "default": "",
              "value": "",
              "type": "xs| sm| md| lg| xl| false| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/container/",
      "link_zh": "https://mui.com/material-ui/api/container/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Container"
  },
  {
      "name": "CssBaseline",
      "props": {
          "children": {
              "description": "You can wrap a node.",
              "description_zh": "You can wrap a node.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "enableColorScheme": {
              "description": "Enable color-scheme CSS property to use theme.palette.mode. For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme For browser support, check out https://caniuse.com/?search=color-scheme",
              "description_zh": "Enable color-scheme CSS property to use theme.palette.mode. For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme For browser support, check out https://caniuse.com/?search=color-scheme",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/css-baseline/",
      "link_zh": "https://mui.com/material-ui/api/css-baseline/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "CssBaseline"
  },
  {
      "name": "Dialog",
      "props": {
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "aria-describedby": {
              "description": "The id(s) of the element(s) that describe the dialog.",
              "description_zh": "The id(s) of the element(s) that describe the dialog.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "aria-labelledby": {
              "description": "The id(s) of the element(s) that label the dialog.",
              "description_zh": "The id(s) of the element(s) that label the dialog.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "BackdropComponent": {
              "description": "A backdrop component. This prop enables custom backdrop rendering.Deprecated - Use slots.backdrop instead. While this prop currently works, it will be removed in the next major version.",
              "description_zh": "A backdrop component. This prop enables custom backdrop rendering.Deprecated - Use slots.backdrop instead. While this prop currently works, it will be removed in the next major version.",
              "default": "styled(Backdrop, {\n  name: 'MuiModal',\n  slot: 'Backdrop',\n  overridesResolver: (props, styles) => {\n    return styles.backdrop;\n  },\n})({\n  zIndex: -1,\n})",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "children": {
              "description": "Dialog children, usually the included sub-components.",
              "description_zh": "Dialog children, usually the included sub-components.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableEscapeKeyDown": {
              "description": "If true, hitting escape will not fire the onClose callback.",
              "description_zh": "If true, hitting escape will not fire the onClose callback.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullScreen": {
              "description": "If true, the dialog is full-screen.",
              "description_zh": "If true, the dialog is full-screen.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the dialog stretches to maxWidth.Notice that the dialog width grow is limited by the default margin.",
              "description_zh": "If true, the dialog stretches to maxWidth.Notice that the dialog width grow is limited by the default margin.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "maxWidth": {
              "description": "Determine the max-width of the dialog. The dialog width grows with the size of the screen. Set to false to disable maxWidth.",
              "description_zh": "Determine the max-width of the dialog. The dialog width grows with the size of the screen. Set to false to disable maxWidth.",
              "default": "'sm'",
              "value": "",
              "type": "xs| sm| md| lg| xl| false| string",
              "required": false
          },
          "onBackdropClick": {
              "description": "Callback fired when the backdrop is clicked.Deprecated - Use the onClose prop with the reason argument to handle the backdropClick events.",
              "description_zh": "Callback fired when the backdrop is clicked.Deprecated - Use the onClose prop with the reason argument to handle the backdropClick events.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "PaperComponent": {
              "description": "The component used to render the body of the dialog.",
              "description_zh": "The component used to render the body of the dialog.",
              "default": "Paper",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "PaperProps": {
              "description": "Props applied to the Paper element.",
              "description_zh": "Props applied to the Paper element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "scroll": {
              "description": "Determine the container for scrolling the dialog.",
              "description_zh": "Determine the container for scrolling the dialog.",
              "default": "'paper'",
              "value": "",
              "type": "body| paper",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Fade",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/dialog/",
      "link_zh": "https://mui.com/material-ui/api/dialog/",
      "typeDetail": {},
      "events": [
          {
              "name": "onBackdropClick",
              "description": "Callback fired when the backdrop is clicked.Deprecated - Use the  prop with the reason argument to handle the backdropClick events.",
              "description_zh": "Callback fired when the backdrop is clicked.Deprecated - Use the  prop with the reason argument to handle the backdropClick events.",
              "params": "onClose"
          },
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "params": "function(event: object, reason: string) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Dialog"
  },
  {
      "name": "DialogActions",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableSpacing": {
              "description": "If true, the actions do not have additional margin.",
              "description_zh": "If true, the actions do not have additional margin.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/dialog-actions/",
      "link_zh": "https://mui.com/material-ui/api/dialog-actions/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "DialogActions"
  },
  {
      "name": "DialogContent",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "dividers": {
              "description": "Display the top and bottom dividers.",
              "description_zh": "Display the top and bottom dividers.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/dialog-content/",
      "link_zh": "https://mui.com/material-ui/api/dialog-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "DialogContent"
  },
  {
      "name": "DialogContentText",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/dialog-content-text/",
      "link_zh": "https://mui.com/material-ui/api/dialog-content-text/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "DialogContentText"
  },
  {
      "name": "DialogTitle",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/dialog-title/",
      "link_zh": "https://mui.com/material-ui/api/dialog-title/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "DialogTitle"
  },
  {
      "name": "Divider",
      "props": {
          "absolute": {
              "description": "Absolutely position the element.",
              "description_zh": "Absolutely position the element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "flexItem": {
              "description": "If true, a vertical divider will have the correct height when used in flex container. (By default, a vertical divider will have a calculated height of 0px if it is the child of a flex container.)",
              "description_zh": "If true, a vertical divider will have the correct height when used in flex container. (By default, a vertical divider will have a calculated height of 0px if it is the child of a flex container.)",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "light": {
              "description": "If true, the divider will have a lighter color.Deprecated - Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. How to migrate",
              "description_zh": "If true, the divider will have a lighter color.Deprecated - Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. How to migrate",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "orientation": {
              "description": "The component orientation.",
              "description_zh": "The component orientation.",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "textAlign": {
              "description": "The text alignment.",
              "description_zh": "The text alignment.",
              "default": "'center'",
              "value": "",
              "type": "center| left| right",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'fullWidth'",
              "value": "",
              "type": "fullWidth| inset| middle| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/divider/",
      "link_zh": "https://mui.com/material-ui/api/divider/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Divider"
  },
  {
      "name": "Drawer",
      "props": {
          "anchor": {
              "description": "Side from which the drawer will appear.",
              "description_zh": "Side from which the drawer will appear.",
              "default": "'left'",
              "value": "",
              "type": "bottom| left| right| top",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "elevation": {
              "description": "The elevation of the drawer.",
              "description_zh": "The elevation of the drawer.",
              "default": "16",
              "value": "",
              "type": "integer",
              "required": false
          },
          "hideBackdrop": {
              "description": "If true, the backdrop is not rendered.",
              "description_zh": "If true, the backdrop is not rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "ModalProps": {
              "description": "Props applied to the Modal element.",
              "description_zh": "Props applied to the Modal element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "PaperProps": {
              "description": "Props applied to the Paper element.",
              "description_zh": "Props applied to the Paper element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "SlideProps": {
              "description": "Props applied to the Slide element.",
              "description_zh": "Props applied to the Slide element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'temporary'",
              "value": "",
              "type": "permanent| persistent| temporary",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/drawer/",
      "link_zh": "https://mui.com/material-ui/api/drawer/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "params": "reason"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Drawer"
  },
  {
      "name": "Fab",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'default'",
              "value": "",
              "type": "default| error| info| inherit| primary| secondary| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the  keyboard focus ripple is disabled.",
              "description_zh": "If true, the  keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.",
              "description_zh": "If true, the ripple effect is disabled.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "href": {
              "description": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node.",
              "description_zh": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense button styling.",
              "description_zh": "The size of the component. small is equivalent to the dense button styling.",
              "default": "'large'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'circular'",
              "value": "",
              "type": "circular| extended| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/fab/",
      "link_zh": "https://mui.com/material-ui/api/fab/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Fab"
  },
  {
      "name": "Fade",
      "props": {
          "children": {
              "description": "A single child content element.This needs to be able to hold a ref.",
              "description_zh": "A single child content element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "addEndListener": {
              "description": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "description_zh": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "appear": {
              "description": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "description_zh": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "default": "true",
              "value": "",
              "type": "bool",
              "required": false
          },
          "easing": {
              "description": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "description_zh": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "default": "-",
              "value": "",
              "type": "{ enter?: string, exit?: string }| string",
              "required": false
          },
          "in": {
              "description": "If true, the component will transition in.",
              "description_zh": "If true, the component will transition in.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "timeout": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/fade/",
      "link_zh": "https://mui.com/material-ui/api/fade/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Fade"
  },
  {
      "name": "FilledInput",
      "props": {
          "autoComplete": {
              "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "description_zh": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the input element is focused during the first mount.",
              "description_zh": "If true, the input element is focused during the first mount.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "primary| secondary| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Input?: elementType, Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableUnderline": {
              "description": "If true, the input will not have an underline.",
              "description_zh": "If true, the input will not have an underline.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "endAdornment": {
              "description": "End InputAdornment for this component.",
              "description_zh": "End InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "error": {
              "description": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "hiddenLabel": {
              "description": "If true, the label is hidden. This is used to increase density for a FilledInput. Be sure to add aria-label to the input element.",
              "description_zh": "If true, the label is hidden. This is used to increase density for a FilledInput. Be sure to add aria-label to the input element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inputComponent": {
              "description": "The component used for the input element. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the input element. Either a string to use a HTML element or a component.",
              "default": "'input'",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "dense| none",
              "required": false
          },
          "maxRows": {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "description_zh": "Maximum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "minRows": {
              "description": "Minimum number of rows to display when multiline option is set to true.",
              "description_zh": "Minimum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "multiline": {
              "description": "If true, a TextareaAutosize element is rendered.",
              "description_zh": "If true, a TextareaAutosize element is rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "placeholder": {
              "description": "The short hint displayed in the input before the user enters a value.",
              "description_zh": "The short hint displayed in the input before the user enters a value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "readOnly": {
              "description": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "description_zh": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "rows": {
              "description": "Number of rows to display when multiline option is set to true.",
              "description_zh": "Number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: elementType, root?: elementType }",
              "required": false
          },
          "startAdornment": {
              "description": "Start InputAdornment for this component.",
              "description_zh": "Start InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "description_zh": "Type of the input element. It should be a valid HTML5 input type.",
              "default": "'text'",
              "value": "",
              "type": "string",
              "required": false
          },
          "value": {
              "description": "The value of the input element, required for a controlled component.",
              "description_zh": "The value of the input element, required for a controlled component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/filled-input/",
      "link_zh": "https://mui.com/material-ui/api/filled-input/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FilledInput"
  },
  {
      "name": "FormControl",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the label, input and helper text should be displayed in a disabled state.",
              "description_zh": "If true, the label, input and helper text should be displayed in a disabled state.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, the label is displayed in an error state.",
              "description_zh": "If true, the label is displayed in an error state.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focused": {
              "description": "If true, the component is displayed in focused state.",
              "description_zh": "If true, the component is displayed in focused state.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the component will take up the full width of its container.",
              "description_zh": "If true, the component will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "hiddenLabel": {
              "description": "If true, the label is hidden. This is used to increase density for a FilledInput. Be sure to add aria-label to the input element.",
              "description_zh": "If true, the label is hidden. This is used to increase density for a FilledInput. Be sure to add aria-label to the input element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "margin": {
              "description": "If dense or normal, will adjust vertical spacing of this and contained components.",
              "description_zh": "If dense or normal, will adjust vertical spacing of this and contained components.",
              "default": "'none'",
              "value": "",
              "type": "dense| none| normal",
              "required": false
          },
          "required": {
              "description": "If true, the label will indicate that the input is required.",
              "description_zh": "If true, the label will indicate that the input is required.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'outlined'",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/form-control/",
      "link_zh": "https://mui.com/material-ui/api/form-control/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FormControl"
  },
  {
      "name": "FormControlLabel",
      "props": {
          "control": {
              "description": "A control element. For instance, it can be a Radio, a Switch or a Checkbox.",
              "description_zh": "A control element. For instance, it can be a Radio, a Switch or a Checkbox.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "checked": {
              "description": "If true, the component appears selected.",
              "description_zh": "If true, the component appears selected.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "componentsProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ typography?: object }",
              "required": false
          },
          "disabled": {
              "description": "If true, the control is disabled.",
              "description_zh": "If true, the control is disabled.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableTypography": {
              "description": "If true, the label is rendered as it is passed without an additional typography node.",
              "description_zh": "If true, the label is rendered as it is passed without an additional typography node.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "label": {
              "description": "A text or an element to be used in an enclosing label element.",
              "description_zh": "A text or an element to be used in an enclosing label element.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "labelPlacement": {
              "description": "The position of the label.",
              "description_zh": "The position of the label.",
              "default": "'end'",
              "value": "",
              "type": "bottom| end| start| top",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the state is changed.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "required": {
              "description": "If true, the label will indicate that the input is required.",
              "description_zh": "If true, the label will indicate that the input is required.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ typography?: object }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the component.",
              "description_zh": "The value of the component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/form-control-label/",
      "link_zh": "https://mui.com/material-ui/api/form-control-label/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
              "params": "function(event: React.SyntheticEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FormControlLabel"
  },
  {
      "name": "FormGroup",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "row": {
              "description": "Display group of elements in a compact row.",
              "description_zh": "Display group of elements in a compact row.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/form-group/",
      "link_zh": "https://mui.com/material-ui/api/form-group/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FormGroup"
  },
  {
      "name": "FormHelperText",
      "props": {
          "children": {
              "description": "The content of the component.If ' ' is provided, the component reserves one line height for displaying a future message.",
              "description_zh": "The content of the component.If ' ' is provided, the component reserves one line height for displaying a future message.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the helper text should be displayed in a disabled state.",
              "description_zh": "If true, the helper text should be displayed in a disabled state.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, helper text should be displayed in an error state.",
              "description_zh": "If true, helper text should be displayed in an error state.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "filled": {
              "description": "If true, the helper text should use filled classes key.",
              "description_zh": "If true, the helper text should use filled classes key.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focused": {
              "description": "If true, the helper text should use focused classes key.",
              "description_zh": "If true, the helper text should use focused classes key.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl.",
              "default": "",
              "value": "",
              "type": "dense",
              "required": false
          },
          "required": {
              "description": "If true, the helper text should use required classes key.",
              "description_zh": "If true, the helper text should use required classes key.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "",
              "value": "",
              "type": "filled| outlined| standard| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/form-helper-text/",
      "link_zh": "https://mui.com/material-ui/api/form-helper-text/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FormHelperText"
  },
  {
      "name": "FormLabel",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "",
              "value": "",
              "type": "error| info| primary| secondary| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the label should be displayed in a disabled state.",
              "description_zh": "If true, the label should be displayed in a disabled state.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, the label is displayed in an error state.",
              "description_zh": "If true, the label is displayed in an error state.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "filled": {
              "description": "If true, the label should use filled classes key.",
              "description_zh": "If true, the label should use filled classes key.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focused": {
              "description": "If true, the input of this label is focused (used by FormGroup components).",
              "description_zh": "If true, the input of this label is focused (used by FormGroup components).",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "required": {
              "description": "If true, the label will indicate that the input is required.",
              "description_zh": "If true, the label will indicate that the input is required.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/form-label/",
      "link_zh": "https://mui.com/material-ui/api/form-label/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "FormLabel"
  },
  {
      "name": "GlobalStyles",
      "props": {
          "styles": {
              "description": "The styles you want to apply globally.",
              "description_zh": "The styles you want to apply globally.",
              "default": "",
              "value": "",
              "type": "array| func| number| object| string| bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/global-styles/",
      "link_zh": "https://mui.com/material-ui/api/global-styles/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "GlobalStyles"
  },
  {
      "name": "Grid",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "See CSS classes API below for more details.",
              "description_zh": "See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "columns": {
              "description": "The number of columns.",
              "description_zh": "The number of columns.",
              "default": "12",
              "value": "",
              "type": "Array<number>| number| object",
              "required": false
          },
          "columnSpacing": {
              "description": "Defines the horizontal space between the type item components. It overrides the value of the spacing prop.",
              "description_zh": "Defines the horizontal space between the type item components. It overrides the value of the spacing prop.",
              "default": "-",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "component": {
              "description": "",
              "description_zh": "",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "container": {
              "description": "If true, the component will have the flex container behavior. You should be wrapping items with a container.",
              "description_zh": "If true, the component will have the flex container behavior. You should be wrapping items with a container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "direction": {
              "description": "Defines the flex-direction style property. It is applied for all screen sizes.",
              "description_zh": "Defines the flex-direction style property. It is applied for all screen sizes.",
              "default": "'row'",
              "value": "",
              "type": "column-reverse| column| row-reverse| row| Array<column-reverse| column| row-reverse| row>| object",
              "required": false
          },
          "item": {
              "description": "",
              "description_zh": "",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "lg": {
              "description": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the lg breakpoint and wider screens if not overridden.",
              "description_zh": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the lg breakpoint and wider screens if not overridden.",
              "default": "false",
              "value": "",
              "type": "auto| number| bool",
              "required": false
          },
          "md": {
              "description": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the md breakpoint and wider screens if not overridden.",
              "description_zh": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the md breakpoint and wider screens if not overridden.",
              "default": "false",
              "value": "",
              "type": "auto| number| bool",
              "required": false
          },
          "rowSpacing": {
              "description": "Defines the vertical space between the type item components. It overrides the value of the spacing prop.",
              "description_zh": "Defines the vertical space between the type item components. It overrides the value of the spacing prop.",
              "default": "-",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "sm": {
              "description": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the sm breakpoint and wider screens if not overridden.",
              "description_zh": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the sm breakpoint and wider screens if not overridden.",
              "default": "false",
              "value": "",
              "type": "auto| number| bool",
              "required": false
          },
          "spacing": {
              "description": "Defines the space between the type item components. It can only be used on a type container component.",
              "description_zh": "Defines the space between the type item components. It can only be used on a type container component.",
              "default": "0",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "sx": {
              "description": "See the `sx` page for more details.",
              "description_zh": "See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "wrap": {
              "description": "Defines the flex-wrap style property. It's applied for all screen sizes.",
              "description_zh": "Defines the flex-wrap style property. It's applied for all screen sizes.",
              "default": "'wrap'",
              "value": "",
              "type": "nowrap| wrap-reverse| wrap",
              "required": false
          },
          "xl": {
              "description": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the xl breakpoint and wider screens if not overridden.",
              "description_zh": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for the xl breakpoint and wider screens if not overridden.",
              "default": "false",
              "value": "",
              "type": "auto| number| bool",
              "required": false
          },
          "xs": {
              "description": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for all the screen sizes with the lowest priority.",
              "description_zh": "If a number, it sets the number of columns the grid item uses. It can't be greater than the total number of columns of the container (12 by default). If 'auto', the grid item's width matches its content. If false, the prop is ignored. If true, the grid item's width grows to use the space available in the grid container. The value is applied for all the screen sizes with the lowest priority.",
              "default": "false",
              "value": "",
              "type": "auto| number| bool",
              "required": false
          },
          "zeroMinWidth": {
              "description": "",
              "description_zh": "",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/grid/",
      "link_zh": "https://mui.com/material-ui/api/grid/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Grid"
  },
  {
      "name": "Grow",
      "props": {
          "children": {
              "description": "A single child content element.This needs to be able to hold a ref.",
              "description_zh": "A single child content element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "addEndListener": {
              "description": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "description_zh": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "appear": {
              "description": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "description_zh": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "default": "true",
              "value": "",
              "type": "bool",
              "required": false
          },
          "easing": {
              "description": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "description_zh": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "default": "-",
              "value": "",
              "type": "{ enter?: string, exit?: string }| string",
              "required": false
          },
          "in": {
              "description": "If true, the component will transition in.",
              "description_zh": "If true, the component will transition in.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "timeout": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.Set to 'auto' to automatically calculate transition time based on height.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.Set to 'auto' to automatically calculate transition time based on height.",
              "default": "'auto'",
              "value": "",
              "type": "auto| number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/grow/",
      "link_zh": "https://mui.com/material-ui/api/grow/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Grow"
  },
  {
      "name": "Hidden",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "implementation": {
              "description": "Specify which implementation to use.  'js' is the default, 'css' works better for server-side rendering.",
              "description_zh": "Specify which implementation to use.  'js' is the default, 'css' works better for server-side rendering.",
              "default": "'js'",
              "value": "",
              "type": "css| js",
              "required": false
          },
          "initialWidth": {
              "description": "You can use this prop when choosing the js implementation with server-side rendering.As window.innerWidth is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use a heuristic to approximate the screen width of the client browser screen width.For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint",
              "description_zh": "You can use this prop when choosing the js implementation with server-side rendering.As window.innerWidth is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use a heuristic to approximate the screen width of the client browser screen width.For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint",
              "default": "-",
              "value": "",
              "type": "xs| sm| md| lg| xl",
              "required": false
          },
          "lgDown": {
              "description": "If true, component is hidden on screens below (but not including) this size.",
              "description_zh": "If true, component is hidden on screens below (but not including) this size.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "lgUp": {
              "description": "If true, component is hidden on screens this size and above.",
              "description_zh": "If true, component is hidden on screens this size and above.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "mdDown": {
              "description": "If true, component is hidden on screens below (but not including) this size.",
              "description_zh": "If true, component is hidden on screens below (but not including) this size.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "mdUp": {
              "description": "If true, component is hidden on screens this size and above.",
              "description_zh": "If true, component is hidden on screens this size and above.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "only": {
              "description": "Hide the given breakpoint(s).",
              "description_zh": "Hide the given breakpoint(s).",
              "default": "-",
              "value": "",
              "type": "xs| sm| md| lg| xl| Array<xs| sm| md| lg| xl>",
              "required": false
          },
          "smDown": {
              "description": "If true, component is hidden on screens below (but not including) this size.",
              "description_zh": "If true, component is hidden on screens below (but not including) this size.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "smUp": {
              "description": "If true, component is hidden on screens this size and above.",
              "description_zh": "If true, component is hidden on screens this size and above.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "xlDown": {
              "description": "If true, component is hidden on screens below (but not including) this size.",
              "description_zh": "If true, component is hidden on screens below (but not including) this size.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "xlUp": {
              "description": "If true, component is hidden on screens this size and above.",
              "description_zh": "If true, component is hidden on screens this size and above.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "xsDown": {
              "description": "If true, component is hidden on screens below (but not including) this size.",
              "description_zh": "If true, component is hidden on screens below (but not including) this size.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "xsUp": {
              "description": "If true, component is hidden on screens this size and above.",
              "description_zh": "If true, component is hidden on screens this size and above.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/hidden/",
      "link_zh": "https://mui.com/material-ui/api/hidden/",
      "typeDetail": {},
      "events": [
          {
              "name": "only",
              "description": "Hide the given breakpoint(s).",
              "description_zh": "Hide the given breakpoint(s)."
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Hidden"
  },
  {
      "name": "Icon",
      "props": {
          "baseClassName": {
              "description": "The base class applied to the icon. Defaults to 'material-icons', but can be changed to any other base class that suits the icon font you're using (for example material-icons-rounded, fas, etc).",
              "description_zh": "The base class applied to the icon. Defaults to 'material-icons', but can be changed to any other base class that suits the icon font you're using (for example material-icons-rounded, fas, etc).",
              "default": "'material-icons'",
              "value": "",
              "type": "string",
              "required": false
          },
          "children": {
              "description": "The name of the icon font ligature.",
              "description_zh": "The name of the icon font ligature.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'inherit'",
              "value": "",
              "type": "inherit| action| disabled| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "fontSize": {
              "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
              "description_zh": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
              "default": "'medium'",
              "value": "",
              "type": "inherit| large| medium| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/icon/",
      "link_zh": "https://mui.com/material-ui/api/icon/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Icon"
  },
  {
      "name": "IconButton",
      "props": {
          "children": {
              "description": "The icon to display.",
              "description_zh": "The icon to display.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'default'",
              "value": "",
              "type": "inherit| default| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the  keyboard focus ripple is disabled.",
              "description_zh": "If true, the  keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "description_zh": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "edge": {
              "description": "If given, uses a negative margin to counteract the padding on one side (this is often helpful for aligning the left or right side of the icon with content above or below, without ruining the border size and shape).",
              "description_zh": "If given, uses a negative margin to counteract the padding on one side (this is often helpful for aligning the left or right side of the icon with content above or below, without ruining the border size and shape).",
              "default": "false",
              "value": "",
              "type": "end| start| false",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense button styling.",
              "description_zh": "The size of the component. small is equivalent to the dense button styling.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/icon-button/",
      "link_zh": "https://mui.com/material-ui/api/icon-button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "IconButton"
  },
  {
      "name": "ImageList",
      "props": {
          "children": {
              "description": "The content of the component, normally ImageListItems.",
              "description_zh": "The content of the component, normally ImageListItems.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": true
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "cols": {
              "description": "Number of columns.",
              "description_zh": "Number of columns.",
              "default": "2",
              "value": "",
              "type": "integer",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "gap": {
              "description": "The gap between items in px.",
              "description_zh": "The gap between items in px.",
              "default": "4",
              "value": "",
              "type": "number",
              "required": false
          },
          "rowHeight": {
              "description": "The height of one row in px.",
              "description_zh": "The height of one row in px.",
              "default": "'auto'",
              "value": "",
              "type": "auto| number",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'standard'",
              "value": "",
              "type": "masonry| quilted| standard| woven| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/image-list/",
      "link_zh": "https://mui.com/material-ui/api/image-list/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ImageList"
  },
  {
      "name": "ImageListItem",
      "props": {
          "children": {
              "description": "The content of the component, normally an <img>.",
              "description_zh": "The content of the component, normally an <img>.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "cols": {
              "description": "Width of the item in number of grid columns.",
              "description_zh": "Width of the item in number of grid columns.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "rows": {
              "description": "Height of the item in number of grid rows.",
              "description_zh": "Height of the item in number of grid rows.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/image-list-item/",
      "link_zh": "https://mui.com/material-ui/api/image-list-item/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ImageListItem"
  },
  {
      "name": "ImageListItemBar",
      "props": {
          "actionIcon": {
              "description": "An IconButton element to be used as secondary action target (primary action target is the item itself).",
              "description_zh": "An IconButton element to be used as secondary action target (primary action target is the item itself).",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "actionPosition": {
              "description": "Position of secondary action IconButton.",
              "description_zh": "Position of secondary action IconButton.",
              "default": "'right'",
              "value": "",
              "type": "left| right",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "position": {
              "description": "Position of the title bar.",
              "description_zh": "Position of the title bar.",
              "default": "'bottom'",
              "value": "",
              "type": "below| bottom| top",
              "required": false
          },
          "subtitle": {
              "description": "String or element serving as subtitle (support text).",
              "description_zh": "String or element serving as subtitle (support text).",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "title": {
              "description": "Title to be displayed.",
              "description_zh": "Title to be displayed.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/image-list-item-bar/",
      "link_zh": "https://mui.com/material-ui/api/image-list-item-bar/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ImageListItemBar"
  },
  {
      "name": "Input",
      "props": {
          "autoComplete": {
              "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "description_zh": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the input element is focused during the first mount.",
              "description_zh": "If true, the input element is focused during the first mount.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "primary| secondary| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Input?: elementType, Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableUnderline": {
              "description": "If true, the input will not have an underline.",
              "description_zh": "If true, the input will not have an underline.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "endAdornment": {
              "description": "End InputAdornment for this component.",
              "description_zh": "End InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "error": {
              "description": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inputComponent": {
              "description": "The component used for the input element. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the input element. Either a string to use a HTML element or a component.",
              "default": "'input'",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "dense| none",
              "required": false
          },
          "maxRows": {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "description_zh": "Maximum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "minRows": {
              "description": "Minimum number of rows to display when multiline option is set to true.",
              "description_zh": "Minimum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "multiline": {
              "description": "If true, a TextareaAutosize element is rendered.",
              "description_zh": "If true, a TextareaAutosize element is rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "placeholder": {
              "description": "The short hint displayed in the input before the user enters a value.",
              "description_zh": "The short hint displayed in the input before the user enters a value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "readOnly": {
              "description": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "description_zh": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "rows": {
              "description": "Number of rows to display when multiline option is set to true.",
              "description_zh": "Number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: elementType, root?: elementType }",
              "required": false
          },
          "startAdornment": {
              "description": "Start InputAdornment for this component.",
              "description_zh": "Start InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "description_zh": "Type of the input element. It should be a valid HTML5 input type.",
              "default": "'text'",
              "value": "",
              "type": "string",
              "required": false
          },
          "value": {
              "description": "The value of the input element, required for a controlled component.",
              "description_zh": "The value of the input element, required for a controlled component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/input/",
      "link_zh": "https://mui.com/material-ui/api/input/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Input"
  },
  {
      "name": "InputAdornment",
      "props": {
          "position": {
              "description": "The position this adornment should appear relative to the Input.",
              "description_zh": "The position this adornment should appear relative to the Input.",
              "default": "-",
              "value": "",
              "type": "end| start",
              "required": true
          },
          "children": {
              "description": "The content of the component, normally an IconButton or string.",
              "description_zh": "The content of the component, normally an IconButton or string.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disablePointerEvents": {
              "description": "Disable pointer events on the root. This allows for the content of the adornment to focus the input on click.",
              "description_zh": "Disable pointer events on the root. This allows for the content of the adornment to focus the input on click.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableTypography": {
              "description": "If children is a string then disable wrapping in a Typography component.",
              "description_zh": "If children is a string then disable wrapping in a Typography component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use. Note: If you are using the TextField component or the FormControl component you do not have to set this manually.",
              "description_zh": "The variant to use. Note: If you are using the TextField component or the FormControl component you do not have to set this manually.",
              "default": "-",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/input-adornment/",
      "link_zh": "https://mui.com/material-ui/api/input-adornment/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "InputAdornment"
  },
  {
      "name": "InputBase",
      "props": {
          "autoComplete": {
              "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "description_zh": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the input element is focused during the first mount.",
              "description_zh": "If true, the input element is focused during the first mount.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Input?: elementType, Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableInjectingGlobalStyles": {
              "description": "If true, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application. This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.",
              "description_zh": "If true, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application. This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "endAdornment": {
              "description": "End InputAdornment for this component.",
              "description_zh": "End InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "error": {
              "description": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inputComponent": {
              "description": "The component used for the input element. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "description_zh": "The component used for the input element. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "default": "'input'",
              "value": "",
              "type": "element type",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "dense| none",
              "required": false
          },
          "maxRows": {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "description_zh": "Maximum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "minRows": {
              "description": "Minimum number of rows to display when multiline option is set to true.",
              "description_zh": "Minimum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "multiline": {
              "description": "If true, a TextareaAutosize element is rendered.",
              "description_zh": "If true, a TextareaAutosize element is rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onBlur": {
              "description": "Callback fired when the input is blurred.Notice that the first argument (event) might be undefined.",
              "description_zh": "Callback fired when the input is blurred.Notice that the first argument (event) might be undefined.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onInvalid": {
              "description": "Callback fired when the input doesn't satisfy its constraints.",
              "description_zh": "Callback fired when the input doesn't satisfy its constraints.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "placeholder": {
              "description": "The short hint displayed in the input before the user enters a value.",
              "description_zh": "The short hint displayed in the input before the user enters a value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "readOnly": {
              "description": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "description_zh": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "rows": {
              "description": "Number of rows to display when multiline option is set to true.",
              "description_zh": "Number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "-",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: object, root?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: elementType, root?: elementType }",
              "required": false
          },
          "startAdornment": {
              "description": "Start InputAdornment for this component.",
              "description_zh": "Start InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "description_zh": "Type of the input element. It should be a valid HTML5 input type.",
              "default": "'text'",
              "value": "",
              "type": "string",
              "required": false
          },
          "value": {
              "description": "The value of the input element, required for a controlled component.",
              "description_zh": "The value of the input element, required for a controlled component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/input-base/",
      "link_zh": "https://mui.com/material-ui/api/input-base/",
      "typeDetail": {},
      "events": [
          {
              "name": "onBlur",
              "description": "Callback fired when the  is blurred.Notice that the first argument (event) might be undefined.",
              "description_zh": "Callback fired when the  is blurred.Notice that the first argument (event) might be undefined.",
              "params": "input"
          },
          {
              "name": "onChange",
              "description": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent) => void"
          },
          {
              "name": "onInvalid",
              "description": "Callback fired when the  doesn't satisfy its constraints.",
              "description_zh": "Callback fired when the  doesn't satisfy its constraints.",
              "params": "input"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "InputBase"
  },
  {
      "name": "InputLabel",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "-",
              "value": "",
              "type": "error| info| primary| secondary| success| warning| string",
              "required": false
          },
          "disableAnimation": {
              "description": "If true, the transition animation is disabled.",
              "description_zh": "If true, the transition animation is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, the label is displayed in an error state.",
              "description_zh": "If true, the label is displayed in an error state.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focused": {
              "description": "If true, the input of this label is focused.",
              "description_zh": "If true, the input of this label is focused.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl.",
              "default": "-",
              "value": "",
              "type": "dense",
              "required": false
          },
          "required": {
              "description": "if true, the label will indicate that the input is required.",
              "description_zh": "if true, the label will indicate that the input is required.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "shrink": {
              "description": "If true, the label is shrunk.",
              "description_zh": "If true, the label is shrunk.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'normal'",
              "value": "",
              "type": "normal| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "-",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/input-label/",
      "link_zh": "https://mui.com/material-ui/api/input-label/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "InputLabel"
  },
  {
      "name": "LinearProgress",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "inherit| primary| secondary| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the progress indicator for the determinate and buffer variants. Value between 0 and 100.",
              "description_zh": "The value of the progress indicator for the determinate and buffer variants. Value between 0 and 100.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "valueBuffer": {
              "description": "The value for the buffer variant. Value between 0 and 100.",
              "description_zh": "The value for the buffer variant. Value between 0 and 100.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "variant": {
              "description": "The variant to use. Use indeterminate or query when there is no progress value.",
              "description_zh": "The variant to use. Use indeterminate or query when there is no progress value.",
              "default": "'indeterminate'",
              "value": "",
              "type": "buffer| determinate| indeterminate| query",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/linear-progress/",
      "link_zh": "https://mui.com/material-ui/api/linear-progress/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "LinearProgress"
  },
  {
      "name": "Link",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the link.",
              "description_zh": "The color of the link.",
              "default": "'primary'",
              "value": "",
              "type": "any",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element type",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TypographyClasses": {
              "description": "classes prop applied to the Typography element.",
              "description_zh": "classes prop applied to the Typography element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "underline": {
              "description": "Controls when the link should have an underline.",
              "description_zh": "Controls when the link should have an underline.",
              "default": "'always'",
              "value": "",
              "type": "always| hover| none",
              "required": false
          },
          "variant": {
              "description": "Applies the theme typography styles.",
              "description_zh": "Applies the theme typography styles.",
              "default": "'inherit'",
              "value": "",
              "type": "body1| body2| button| caption| h1| h2| h3| h4| h5| h6| inherit| overline| subtitle1| subtitle2| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/link/",
      "link_zh": "https://mui.com/material-ui/api/link/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Link"
  },
  {
      "name": "List",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "dense": {
              "description": "If true, compact vertical padding designed for keyboard and mouse input is used for the list and list items. The prop is available to descendant components as the dense context.",
              "description_zh": "If true, compact vertical padding designed for keyboard and mouse input is used for the list and list items. The prop is available to descendant components as the dense context.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disablePadding": {
              "description": "If true, vertical padding is removed from the list.",
              "description_zh": "If true, vertical padding is removed from the list.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "subheader": {
              "description": "The content of the subheader, normally ListSubheader.",
              "description_zh": "The content of the subheader, normally ListSubheader.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list/",
      "link_zh": "https://mui.com/material-ui/api/list/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "List"
  },
  {
      "name": "ListItem",
      "props": {
          "alignItems": {
              "description": "Defines the align-items style property.",
              "description_zh": "Defines the align-items style property.",
              "default": "'center'",
              "value": "",
              "type": "center| flex-start",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.Deprecated - checkout ListItemButton instead",
              "description_zh": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.Deprecated - checkout ListItemButton instead",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "button": {
              "description": "If true, the list item is a button (using ButtonBase). Props intended for ButtonBase can then be applied to ListItem.Deprecated - checkout ListItemButton instead",
              "description_zh": "If true, the list item is a button (using ButtonBase). Props intended for ButtonBase can then be applied to ListItem.Deprecated - checkout ListItemButton instead",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component if a ListItemSecondaryAction is used it must be the last child.",
              "description_zh": "The content of the component if a ListItemSecondaryAction is used it must be the last child.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: object }",
              "required": false
          },
          "ContainerComponent": {
              "description": "The container component used when a ListItemSecondaryAction is the last child.This needs to be able to hold a ref.Deprecated",
              "description_zh": "The container component used when a ListItemSecondaryAction is the last child.This needs to be able to hold a ref.Deprecated",
              "default": "'li'",
              "value": "",
              "type": "element type",
              "required": false
          },
          "ContainerProps": {
              "description": "Props applied to the container component if used.Deprecated",
              "description_zh": "Props applied to the container component if used.Deprecated",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "dense": {
              "description": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent List component.",
              "description_zh": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent List component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.Deprecated - checkout ListItemButton instead",
              "description_zh": "If true, the component is disabled.Deprecated - checkout ListItemButton instead",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableGutters": {
              "description": "If true, the left and right padding is removed.",
              "description_zh": "If true, the left and right padding is removed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disablePadding": {
              "description": "If true, all padding is removed.",
              "description_zh": "If true, all padding is removed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "divider": {
              "description": "If true, a 1px light border is added to the bottom of the list item.",
              "description_zh": "If true, a 1px light border is added to the bottom of the list item.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "secondaryAction": {
              "description": "The element to display at the end of ListItem.",
              "description_zh": "The element to display at the end of ListItem.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "selected": {
              "description": "Use to apply selected styling.Deprecated - checkout ListItemButton instead",
              "description_zh": "Use to apply selected styling.Deprecated - checkout ListItemButton instead",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item/",
      "link_zh": "https://mui.com/material-ui/api/list-item/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItem"
  },
  {
      "name": "ListItemAvatar",
      "props": {
          "children": {
              "description": "The content of the component, normally an Avatar.",
              "description_zh": "The content of the component, normally an Avatar.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item-avatar/",
      "link_zh": "https://mui.com/material-ui/api/list-item-avatar/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItemAvatar"
  },
  {
      "name": "ListItemButton",
      "props": {
          "alignItems": {
              "description": "Defines the align-items style property.",
              "description_zh": "Defines the align-items style property.",
              "default": "'center'",
              "value": "",
              "type": "center| flex-start",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.",
              "description_zh": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component if a ListItemSecondaryAction is used it must be the last child.",
              "description_zh": "The content of the component if a ListItemSecondaryAction is used it must be the last child.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "dense": {
              "description": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent List component.",
              "description_zh": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent List component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableGutters": {
              "description": "If true, the left and right padding is removed.",
              "description_zh": "If true, the left and right padding is removed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "divider": {
              "description": "If true, a 1px light border is added to the bottom of the list item.",
              "description_zh": "If true, a 1px light border is added to the bottom of the list item.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focusVisibleClassName": {
              "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "description_zh": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "selected": {
              "description": "Use to apply selected styling.",
              "description_zh": "Use to apply selected styling.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item-button/",
      "link_zh": "https://mui.com/material-ui/api/list-item-button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItemButton"
  },
  {
      "name": "ListItemIcon",
      "props": {
          "children": {
              "description": "The content of the component, normally Icon, SvgIcon, or a @mui/icons-material SVG icon element.",
              "description_zh": "The content of the component, normally Icon, SvgIcon, or a @mui/icons-material SVG icon element.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item-icon/",
      "link_zh": "https://mui.com/material-ui/api/list-item-icon/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItemIcon"
  },
  {
      "name": "ListItemSecondaryAction",
      "props": {
          "children": {
              "description": "The content of the component, normally an IconButton or selection control.",
              "description_zh": "The content of the component, normally an IconButton or selection control.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item-secondary-action/",
      "link_zh": "https://mui.com/material-ui/api/list-item-secondary-action/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItemSecondaryAction"
  },
  {
      "name": "ListItemText",
      "props": {
          "children": {
              "description": "Alias for the primary prop.",
              "description_zh": "Alias for the primary prop.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableTypography": {
              "description": "If true, the children won't be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the children (or primary) text, and optional secondary text with the Typography component.",
              "description_zh": "If true, the children won't be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the children (or primary) text, and optional secondary text with the Typography component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "inset": {
              "description": "If true, the children are indented. This should be used if there is no left avatar or left icon.",
              "description_zh": "If true, the children are indented. This should be used if there is no left avatar or left icon.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "primary": {
              "description": "The main content element.",
              "description_zh": "The main content element.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "primaryTypographyProps": {
              "description": "These props will be forwarded to the primary typography component (as long as disableTypography is not true).",
              "description_zh": "These props will be forwarded to the primary typography component (as long as disableTypography is not true).",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "secondary": {
              "description": "The secondary content element.",
              "description_zh": "The secondary content element.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "secondaryTypographyProps": {
              "description": "These props will be forwarded to the secondary typography component (as long as disableTypography is not true).",
              "description_zh": "These props will be forwarded to the secondary typography component (as long as disableTypography is not true).",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-item-text/",
      "link_zh": "https://mui.com/material-ui/api/list-item-text/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListItemText"
  },
  {
      "name": "ListSubheader",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "description_zh": "The color of the component. It supports those theme colors that make sense for this component.",
              "default": "'default'",
              "value": "",
              "type": "default| inherit| primary",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disableGutters": {
              "description": "If true, the List Subheader will not have gutters.",
              "description_zh": "If true, the List Subheader will not have gutters.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableSticky": {
              "description": "If true, the List Subheader will not stick to the top during scroll.",
              "description_zh": "If true, the List Subheader will not stick to the top during scroll.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "inset": {
              "description": "If true, the List Subheader is indented.",
              "description_zh": "If true, the List Subheader is indented.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/list-subheader/",
      "link_zh": "https://mui.com/material-ui/api/list-subheader/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ListSubheader"
  },
  {
      "name": "LoadingButton",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "loading": {
              "description": "If true, the loading indicator is shown and the button becomes disabled.",
              "description_zh": "If true, the loading indicator is shown and the button becomes disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "loadingIndicator": {
              "description": "Element placed before the children if the button is in loading state. The node should contain an element with role=\"progressbar\" with an accessible name. By default we render a CircularProgress that is labelled by the button itself.",
              "description_zh": "Element placed before the children if the button is in loading state. The node should contain an element with role=\"progressbar\" with an accessible name. By default we render a CircularProgress that is labelled by the button itself.",
              "default": "<CircularProgress color=\"inherit\" size={16} />",
              "value": "",
              "type": "node",
              "required": false
          },
          "loadingPosition": {
              "description": "The loading indicator can be positioned on the start, end, or the center of the button.",
              "description_zh": "The loading indicator can be positioned on the start, end, or the center of the button.",
              "default": "'center'",
              "value": "",
              "type": "start| end| center",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'text'",
              "value": "",
              "type": "contained| outlined| text| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/loading-button/",
      "link_zh": "https://mui.com/material-ui/api/loading-button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "LoadingButton"
  },
  {
      "name": "Masonry",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": true
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "columns": {
              "description": "Number of columns.",
              "description_zh": "Number of columns.",
              "default": "4",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "defaultColumns": {
              "description": "The default number of columns of the component. This is provided for server-side rendering.",
              "description_zh": "The default number of columns of the component. This is provided for server-side rendering.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "defaultHeight": {
              "description": "The default height of the component in px. This is provided for server-side rendering.",
              "description_zh": "The default height of the component in px. This is provided for server-side rendering.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "defaultSpacing": {
              "description": "The default spacing of the component. Like spacing, it is a factor of the theme's spacing. This is provided for server-side rendering.",
              "description_zh": "The default spacing of the component. Like spacing, it is a factor of the theme's spacing. This is provided for server-side rendering.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "sequential": {
              "description": "Allows using sequential order rather than adding to shortest column",
              "description_zh": "Allows using sequential order rather than adding to shortest column",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "spacing": {
              "description": "Defines the space between children. It is a factor of the theme's spacing.",
              "description_zh": "Defines the space between children. It is a factor of the theme's spacing.",
              "default": "1",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "sx": {
              "description": "Allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "Allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/masonry/",
      "link_zh": "https://mui.com/material-ui/api/masonry/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Masonry"
  },
  {
      "name": "Menu",
      "props": {
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "anchorEl": {
              "description": "An HTML element, or a function that returns one. It's used to set the position of the menu.",
              "description_zh": "An HTML element, or a function that returns one. It's used to set the position of the menu.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "autoFocus": {
              "description": "If true (Default) will focus the [role=\"menu\"] if no focusable child is found. Disabled children are not focusable. If you set this prop to false focus will be placed on the parent modal container. This has severe accessibility implications and should only be considered if you manage focus otherwise.",
              "description_zh": "If true (Default) will focus the [role=\"menu\"] if no focusable child is found. Disabled children are not focusable. If you set this prop to false focus will be placed on the parent modal container. This has severe accessibility implications and should only be considered if you manage focus otherwise.",
              "default": "true",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "Menu contents, normally MenuItems.",
              "description_zh": "Menu contents, normally MenuItems.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableAutoFocusItem": {
              "description": "When opening the menu will not focus the active item but the [role=\"menu\"] unless autoFocus is also set to false. Not using the default means not following WAI-ARIA authoring practices. Please be considerate about possible accessibility implications.",
              "description_zh": "When opening the menu will not focus the active item but the [role=\"menu\"] unless autoFocus is also set to false. Not using the default means not following WAI-ARIA authoring practices. Please be considerate about possible accessibility implications.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "MenuListProps": {
              "description": "Props applied to the MenuList element.",
              "description_zh": "Props applied to the MenuList element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\", \"tabKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\", \"tabKeyDown\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "PopoverClasses": {
              "description": "classes prop applied to the Popover element.",
              "description_zh": "classes prop applied to the Popover element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.",
              "default": "{}",
              "value": "",
              "type": "{ paper?: func| object, root?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ paper?: elementType, root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "transitionDuration": {
              "description": "The length of the transition in ms, or 'auto'",
              "description_zh": "The length of the transition in ms, or 'auto'",
              "default": "'auto'",
              "value": "",
              "type": "auto| number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "variant": {
              "description": "The variant to use. Use menu to prevent selected items from impacting the initial focus.",
              "description_zh": "The variant to use. Use menu to prevent selected items from impacting the initial focus.",
              "default": "'selectedMenu'",
              "value": "",
              "type": "menu| selectedMenu",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/menu/",
      "link_zh": "https://mui.com/material-ui/api/menu/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\", \"tabKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\", \"tabKeyDown\".",
              "params": "function(event: object, reason: string) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Menu"
  },
  {
      "name": "MenuItem",
      "props": {
          "autoFocus": {
              "description": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.",
              "description_zh": "If true, the list item is focused during the first mount. Focus will also be triggered if the value changes from false to true.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "dense": {
              "description": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent Menu component.",
              "description_zh": "If true, compact vertical padding designed for keyboard and mouse input is used. The prop defaults to the value inherited from the parent Menu component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableGutters": {
              "description": "If true, the left and right padding is removed.",
              "description_zh": "If true, the left and right padding is removed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "divider": {
              "description": "If true, a 1px light border is added to the bottom of the menu item.",
              "description_zh": "If true, a 1px light border is added to the bottom of the menu item.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "focusVisibleClassName": {
              "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "description_zh": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It's a polyfill for the CSS :focus-visible selector. The rationale for using this feature is explained here. A polyfill can be used to apply a focus-visible class to other components if needed.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "selected": {
              "description": "If true, the component is selected.",
              "description_zh": "If true, the component is selected.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/menu-item/",
      "link_zh": "https://mui.com/material-ui/api/menu-item/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "MenuItem"
  },
  {
      "name": "MenuList",
      "props": {
          "autoFocus": {
              "description": "If true, will focus the [role=\"menu\"] container and move into tab order.",
              "description_zh": "If true, will focus the [role=\"menu\"] container and move into tab order.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "autoFocusItem": {
              "description": "If true, will focus the first menuitem if variant=\"menu\" or selected item if variant=\"selectedMenu\".",
              "description_zh": "If true, will focus the first menuitem if variant=\"menu\" or selected item if variant=\"selectedMenu\".",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "MenuList contents, normally MenuItems.",
              "description_zh": "MenuList contents, normally MenuItems.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "disabledItemsFocusable": {
              "description": "If true, will allow focus on disabled items.",
              "description_zh": "If true, will allow focus on disabled items.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableListWrap": {
              "description": "If true, the menu items will not wrap focus.",
              "description_zh": "If true, the menu items will not wrap focus.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "variant": {
              "description": "The variant to use. Use menu to prevent selected items from impacting the initial focus and the vertical alignment relative to the anchor element.",
              "description_zh": "The variant to use. Use menu to prevent selected items from impacting the initial focus and the vertical alignment relative to the anchor element.",
              "default": "'selectedMenu'",
              "value": "",
              "type": "menu| selectedMenu",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/menu-list/",
      "link_zh": "https://mui.com/material-ui/api/menu-list/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "MenuList"
  },
  {
      "name": "MobileStepper",
      "props": {
          "steps": {
              "description": "The total steps.",
              "description_zh": "The total steps.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": true
          },
          "activeStep": {
              "description": "Set the active step (zero based index). Defines which dot is highlighted when the variant is 'dots'.",
              "description_zh": "Set the active step (zero based index). Defines which dot is highlighted when the variant is 'dots'.",
              "default": "0",
              "value": "",
              "type": "integer",
              "required": false
          },
          "backButton": {
              "description": "A back button element. For instance, it can be a Button or an IconButton.",
              "description_zh": "A back button element. For instance, it can be a Button or an IconButton.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "LinearProgressProps": {
              "description": "Props applied to the LinearProgress element.",
              "description_zh": "Props applied to the LinearProgress element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "nextButton": {
              "description": "A next button element. For instance, it can be a Button or an IconButton.",
              "description_zh": "A next button element. For instance, it can be a Button or an IconButton.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "position": {
              "description": "Set the positioning type.",
              "description_zh": "Set the positioning type.",
              "default": "'bottom'",
              "value": "",
              "type": "bottom| static| top",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'dots'",
              "value": "",
              "type": "dots| progress| text",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/mobile-stepper/",
      "link_zh": "https://mui.com/material-ui/api/mobile-stepper/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "MobileStepper"
  },
  {
      "name": "Modal",
      "props": {
          "children": {
              "description": "A single child content element.This needs to be able to hold a ref.",
              "description_zh": "A single child content element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "BackdropComponent": {
              "description": "A backdrop component. This prop enables custom backdrop rendering.Deprecated - Use slots.backdrop instead. While this prop currently works, it will be removed in the next major version.",
              "description_zh": "A backdrop component. This prop enables custom backdrop rendering.Deprecated - Use slots.backdrop instead. While this prop currently works, it will be removed in the next major version.",
              "default": "styled(Backdrop, {\n  name: 'MuiModal',\n  slot: 'Backdrop',\n  overridesResolver: (props, styles) => {\n    return styles.backdrop;\n  },\n})({\n  zIndex: -1,\n})",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "BackdropProps": {
              "description": "Props applied to the Backdrop element.Deprecated - Use slotProps.backdrop instead.",
              "description_zh": "Props applied to the Backdrop element.Deprecated - Use slotProps.backdrop instead.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "closeAfterTransition": {
              "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
              "description_zh": "When set to true the Modal waits until a nested Transition is completed before closing.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Backdrop?: elementType, Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ backdrop?: func| object, root?: func| object }",
              "required": false
          },
          "container": {
              "description": "An HTML element or function that returns one. The container will have the portal children appended to it.You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.By default, it uses the body of the top-level document object, so it's simply document.body most of the time.",
              "description_zh": "An HTML element or function that returns one. The container will have the portal children appended to it.You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.By default, it uses the body of the top-level document object, so it's simply document.body most of the time.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "disableAutoFocus": {
              "description": "If true, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the disableAutoFocus prop.Generally this should never be set to true as it makes the modal less accessible to assistive technologies, like screen readers.",
              "description_zh": "If true, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the disableAutoFocus prop.Generally this should never be set to true as it makes the modal less accessible to assistive technologies, like screen readers.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableEnforceFocus": {
              "description": "If true, the modal will not prevent focus from leaving the modal while open.Generally this should never be set to true as it makes the modal less accessible to assistive technologies, like screen readers.",
              "description_zh": "If true, the modal will not prevent focus from leaving the modal while open.Generally this should never be set to true as it makes the modal less accessible to assistive technologies, like screen readers.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableEscapeKeyDown": {
              "description": "If true, hitting escape will not fire the onClose callback.",
              "description_zh": "If true, hitting escape will not fire the onClose callback.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disablePortal": {
              "description": "The children will be under the DOM hierarchy of the parent component.",
              "description_zh": "The children will be under the DOM hierarchy of the parent component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRestoreFocus": {
              "description": "If true, the modal will not restore focus to previously focused element once modal is hidden or unmounted.",
              "description_zh": "If true, the modal will not restore focus to previously focused element once modal is hidden or unmounted.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableScrollLock": {
              "description": "Disable the scroll lock behavior.",
              "description_zh": "Disable the scroll lock behavior.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "hideBackdrop": {
              "description": "If true, the backdrop is not rendered.",
              "description_zh": "If true, the backdrop is not rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "keepMounted": {
              "description": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.",
              "description_zh": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onBackdropClick": {
              "description": "Callback fired when the backdrop is clicked.Deprecated - Use the onClose prop with the reason argument to handle the backdropClick events.",
              "description_zh": "Callback fired when the backdrop is clicked.Deprecated - Use the onClose prop with the reason argument to handle the backdropClick events.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onTransitionEnter": {
              "description": "A function called when a transition enters.",
              "description_zh": "A function called when a transition enters.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onTransitionExited": {
              "description": "A function called when a transition has exited.",
              "description_zh": "A function called when a transition has exited.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the Modal.",
              "description_zh": "The props used for each slot inside the Modal.",
              "default": "{}",
              "value": "",
              "type": "{ backdrop?: func| object, root?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the Modal. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Modal. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ backdrop?: elementType, root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/modal/",
      "link_zh": "https://mui.com/material-ui/api/modal/",
      "typeDetail": {},
      "events": [
          {
              "name": "onBackdropClick",
              "description": "Callback fired when the backdrop is clicked.Deprecated - Use the  prop with the reason argument to handle the backdropClick events.",
              "description_zh": "Callback fired when the backdrop is clicked.Deprecated - Use the  prop with the reason argument to handle the backdropClick events.",
              "params": "onClose"
          },
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "description_zh": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"escapeKeyDown\", \"backdropClick\".",
              "params": "reason"
          },
          {
              "name": "onTransitionEnter",
              "description": "A function called when a transition enters.",
              "description_zh": "A function called when a transition enters."
          },
          {
              "name": "onTransitionExited",
              "description": "A function called when a transition has exited.",
              "description_zh": "A function called when a transition has exited."
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Modal"
  },
  {
      "name": "NativeSelect",
      "props": {
          "children": {
              "description": "The option elements to populate the select with. Can be some <option> elements.",
              "description_zh": "The option elements to populate the select with. Can be some <option> elements.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "IconComponent": {
              "description": "The icon that displays the arrow.",
              "description_zh": "The icon that displays the arrow.",
              "default": "ArrowDropDownIcon",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "input": {
              "description": "An Input element; does not have to be a material-ui specific Input.",
              "description_zh": "An Input element; does not have to be a material-ui specific Input.",
              "default": "<Input />",
              "value": "",
              "type": "element",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the select element.",
              "description_zh": "Attributes applied to the select element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when a menu item is selected.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when a menu item is selected.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The input value. The DOM API casts this to a string.",
              "description_zh": "The input value. The DOM API casts this to a string.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "-",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/native-select/",
      "link_zh": "https://mui.com/material-ui/api/native-select/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when a menu item is selected.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when a menu item is selected.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "NativeSelect"
  },
  {
      "name": "OutlinedInput",
      "props": {
          "autoComplete": {
              "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "description_zh": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the input element is focused during the first mount.",
              "description_zh": "If true, the input element is focused during the first mount.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. The prop defaults to the value ('primary') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "primary| secondary| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Input?: elementType, Root?: elementType }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the component is disabled. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "endAdornment": {
              "description": "End InputAdornment for this component.",
              "description_zh": "End InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "error": {
              "description": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input will indicate an error. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inputComponent": {
              "description": "The component used for the input element. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the input element. Either a string to use a HTML element or a component.",
              "default": "'input'",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "label": {
              "description": "The label of the input. It is only used for layout. The actual labelling is handled by InputLabel.",
              "description_zh": "The label of the input. It is only used for layout. The actual labelling is handled by InputLabel.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "margin": {
              "description": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "description_zh": "If dense, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value ('none') inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "dense| none",
              "required": false
          },
          "maxRows": {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "description_zh": "Maximum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "minRows": {
              "description": "Minimum number of rows to display when multiline option is set to true.",
              "description_zh": "Minimum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "multiline": {
              "description": "If true, a TextareaAutosize element is rendered.",
              "description_zh": "If true, a TextareaAutosize element is rendered.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "notched": {
              "description": "If true, the outline is notched to accommodate the label.",
              "description_zh": "If true, the outline is notched to accommodate the label.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "placeholder": {
              "description": "The short hint displayed in the input before the user enters a value.",
              "description_zh": "The short hint displayed in the input before the user enters a value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "readOnly": {
              "description": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "description_zh": "It prevents the user from changing the value of the field (not from interacting with the field).",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "description_zh": "If true, the input element is required. The prop defaults to the value (false) inherited from the parent FormControl component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "rows": {
              "description": "Number of rows to display when multiline option is set to true.",
              "description_zh": "Number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ input?: elementType, root?: elementType }",
              "required": false
          },
          "startAdornment": {
              "description": "Start InputAdornment for this component.",
              "description_zh": "Start InputAdornment for this component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "description_zh": "Type of the input element. It should be a valid HTML5 input type.",
              "default": "'text'",
              "value": "",
              "type": "string",
              "required": false
          },
          "value": {
              "description": "The value of the input element, required for a controlled component.",
              "description_zh": "The value of the input element, required for a controlled component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/outlined-input/",
      "link_zh": "https://mui.com/material-ui/api/outlined-input/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "OutlinedInput"
  },
  {
      "name": "Pagination",
      "props": {
          "boundaryCount": {
              "description": "Number of always visible pages at the beginning and end.",
              "description_zh": "Number of always visible pages at the beginning and end.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The active color. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The active color. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'standard'",
              "value": "",
              "type": "primary| secondary| standard| string",
              "required": false
          },
          "count": {
              "description": "The total number of pages.",
              "description_zh": "The total number of pages.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "defaultPage": {
              "description": "The page selected by default when the component is uncontrolled.",
              "description_zh": "The page selected by default when the component is uncontrolled.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "getItemAriaLabel": {
              "description": "Accepts a function which returns a string value that provides a user-friendly name for the current page. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(type: string, page: number, selected: bool) => stringtype The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.page The page number to format.selected If true, the current page is selected.",
              "description_zh": "Accepts a function which returns a string value that provides a user-friendly name for the current page. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(type: string, page: number, selected: bool) => stringtype The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.page The page number to format.selected If true, the current page is selected.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "hideNextButton": {
              "description": "If true, hide the next-page button.",
              "description_zh": "If true, hide the next-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "hidePrevButton": {
              "description": "If true, hide the previous-page button.",
              "description_zh": "If true, hide the previous-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the page is changed.Signature:function(event: React.ChangeEvent, page: number) => voidevent The event source of the callback.page The page selected.",
              "description_zh": "Callback fired when the page is changed.Signature:function(event: React.ChangeEvent, page: number) => voidevent The event source of the callback.page The page selected.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "page": {
              "description": "The current page. Unlike TablePagination, which starts numbering from 0, this pagination starts from 1.",
              "description_zh": "The current page. Unlike TablePagination, which starts numbering from 0, this pagination starts from 1.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": false
          },
          "renderItem": {
              "description": "Render the item.Signature:function(params: PaginationRenderItemParams) => ReactNodeparams The props to spread on a PaginationItem.",
              "description_zh": "Render the item.Signature:function(params: PaginationRenderItemParams) => ReactNodeparams The props to spread on a PaginationItem.",
              "default": "(item) => <PaginationItem {...item} />",
              "value": "",
              "type": "func",
              "required": false
          },
          "shape": {
              "description": "The shape of the pagination items.",
              "description_zh": "The shape of the pagination items.",
              "default": "'circular'",
              "value": "",
              "type": "circular| rounded",
              "required": false
          },
          "showFirstButton": {
              "description": "If true, show the first-page button.",
              "description_zh": "If true, show the first-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "showLastButton": {
              "description": "If true, show the last-page button.",
              "description_zh": "If true, show the last-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "siblingCount": {
              "description": "Number of always visible pages before and after the current page.",
              "description_zh": "Number of always visible pages before and after the current page.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'text'",
              "value": "",
              "type": "outlined| text| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/pagination/",
      "link_zh": "https://mui.com/material-ui/api/pagination/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the page is changed.Signature:event The event source of the callback.page The page selected.",
              "description_zh": "Callback fired when the page is changed.Signature:event The event source of the callback.page The page selected.",
              "params": "function(event: React.ChangeEvent, page: number) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Pagination"
  },
  {
      "name": "PaginationItem",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The active color. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The active color. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'standard'",
              "value": "",
              "type": "primary| secondary| standard| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ first?: elementType, last?: elementType, next?: elementType, previous?: elementType }",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "page": {
              "description": "The current page number.",
              "description_zh": "The current page number.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "selected": {
              "description": "If true the pagination item is selected.",
              "description_zh": "If true the pagination item is selected.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "shape": {
              "description": "The shape of the pagination item.",
              "description_zh": "The shape of the pagination item.",
              "default": "'circular'",
              "value": "",
              "type": "circular| rounded",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ first?: elementType, last?: elementType, next?: elementType, previous?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "The type of pagination item.",
              "description_zh": "The type of pagination item.",
              "default": "'page'",
              "value": "",
              "type": "end-ellipsis| first| last| next| page| previous| start-ellipsis",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'text'",
              "value": "",
              "type": "outlined| text| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/pagination-item/",
      "link_zh": "https://mui.com/material-ui/api/pagination-item/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "PaginationItem"
  },
  {
      "name": "Paper",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "elevation": {
              "description": "Shadow depth, corresponds to dp in the spec. It accepts values between 0 and 24 inclusive.",
              "description_zh": "Shadow depth, corresponds to dp in the spec. It accepts values between 0 and 24 inclusive.",
              "default": "1",
              "value": "",
              "type": "integer",
              "required": false
          },
          "square": {
              "description": "If true, rounded corners are disabled.",
              "description_zh": "If true, rounded corners are disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'elevation'",
              "value": "",
              "type": "elevation| outlined| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/paper/",
      "link_zh": "https://mui.com/material-ui/api/paper/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Paper"
  },
  {
      "name": "Popover",
      "props": {
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "action": {
              "description": "A ref for imperative actions. It currently only supports updatePosition() action.",
              "description_zh": "A ref for imperative actions. It currently only supports updatePosition() action.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "anchorEl": {
              "description": "An HTML element, PopoverVirtualElement, or a function that returns either. It's used to set the position of the popover.",
              "description_zh": "An HTML element, PopoverVirtualElement, or a function that returns either. It's used to set the position of the popover.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "anchorOrigin": {
              "description": "This is the point on the anchor where the popover's anchorEl will attach to. This is not used when the anchorReference is 'anchorPosition'.Options: vertical: [top, center, bottom]; horizontal: [left, center, right].",
              "description_zh": "This is the point on the anchor where the popover's anchorEl will attach to. This is not used when the anchorReference is 'anchorPosition'.Options: vertical: [top, center, bottom]; horizontal: [left, center, right].",
              "default": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
              "value": "",
              "type": "{ horizontal: center| left| right| number, vertical: bottom| center| top| number }",
              "required": false
          },
          "anchorPosition": {
              "description": "This is the position that may be used to set the position of the popover. The coordinates are relative to the application's client area.",
              "description_zh": "This is the position that may be used to set the position of the popover. The coordinates are relative to the application's client area.",
              "default": "-",
              "value": "",
              "type": "{ left: number, top: number }",
              "required": false
          },
          "anchorReference": {
              "description": "This determines which anchor prop to refer to when setting the position of the popover.",
              "description_zh": "This determines which anchor prop to refer to when setting the position of the popover.",
              "default": "'anchorEl'",
              "value": "",
              "type": "anchorEl| anchorPosition| none",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "container": {
              "description": "An HTML element, component instance, or function that returns either. The container will passed to the Modal component.By default, it uses the body of the anchorEl's top-level document object, so it's simply document.body most of the time.",
              "description_zh": "An HTML element, component instance, or function that returns either. The container will passed to the Modal component.By default, it uses the body of the anchorEl's top-level document object, so it's simply document.body most of the time.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "disableScrollLock": {
              "description": "Disable the scroll lock behavior.",
              "description_zh": "Disable the scroll lock behavior.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "elevation": {
              "description": "The elevation of the popover.",
              "description_zh": "The elevation of the popover.",
              "default": "8",
              "value": "",
              "type": "integer",
              "required": false
          },
          "marginThreshold": {
              "description": "Specifies how close to the edge of the window the popover can appear. If null, the popover will not be constrained by the window.",
              "description_zh": "Specifies how close to the edge of the window the popover can appear. If null, the popover will not be constrained by the window.",
              "default": "16",
              "value": "",
              "type": "number",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.",
              "description_zh": "Callback fired when the component requests to be closed. The reason parameter can optionally be used to control the response to onClose.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "PaperProps": {
              "description": "Props applied to the Paper element.This prop is an alias for slotProps.paper and will be overriden by it if both are used.Deprecated - Use slotProps.paper instead.",
              "description_zh": "Props applied to the Paper element.This prop is an alias for slotProps.paper and will be overriden by it if both are used.Deprecated - Use slotProps.paper instead.",
              "default": "{}",
              "value": "",
              "type": "{ component?: element type }",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.",
              "default": "{}",
              "value": "",
              "type": "{ paper?: func| object, root?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ paper?: elementType, root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "transformOrigin": {
              "description": "This is the point on the popover which will attach to the anchor's origin.Options: vertical: [top, center, bottom, x(px)]; horizontal: [left, center, right, x(px)].",
              "description_zh": "This is the point on the popover which will attach to the anchor's origin.Options: vertical: [top, center, bottom, x(px)]; horizontal: [left, center, right, x(px)].",
              "default": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
              "value": "",
              "type": "{ horizontal: center| left| right| number, vertical: bottom| center| top| number }",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Grow",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "Set to 'auto' to automatically calculate transition time based on height.",
              "description_zh": "Set to 'auto' to automatically calculate transition time based on height.",
              "default": "'auto'",
              "value": "",
              "type": "auto| number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/popover/",
      "link_zh": "https://mui.com/material-ui/api/popover/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.",
              "description_zh": "Callback fired when the component requests to be closed. The  parameter can optionally be used to control the response to onClose.",
              "params": "reason"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Popover"
  },
  {
      "name": "Popper",
      "props": {
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": true
          },
          "anchorEl": {
              "description": "An HTML element, virtualElement, or a function that returns either. It's used to set the position of the popper. The return value will passed as the reference object of the Popper instance.",
              "description_zh": "An HTML element, virtualElement, or a function that returns either. It's used to set the position of the popper. The return value will passed as the reference object of the Popper instance.",
              "default": "-",
              "value": "",
              "type": "HTML element| object| func",
              "required": false
          },
          "children": {
              "description": "Popper render function or node.",
              "description_zh": "Popper render function or node.",
              "default": "-",
              "value": "",
              "type": "node| func",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ Root?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The props used for each slot inside the Popper.",
              "description_zh": "The props used for each slot inside the Popper.",
              "default": "{}",
              "value": "",
              "type": "{ root?: func| object }",
              "required": false
          },
          "container": {
              "description": "An HTML element or function that returns one. The container will have the portal children appended to it.You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.By default, it uses the body of the top-level document object, so it's simply document.body most of the time.",
              "description_zh": "An HTML element or function that returns one. The container will have the portal children appended to it.You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.By default, it uses the body of the top-level document object, so it's simply document.body most of the time.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "disablePortal": {
              "description": "The children will be under the DOM hierarchy of the parent component.",
              "description_zh": "The children will be under the DOM hierarchy of the parent component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "keepMounted": {
              "description": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Popper.",
              "description_zh": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Popper.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "modifiers": {
              "description": "Popper.js is based on a \"plugin-like\" architecture, most of its features are fully encapsulated \"modifiers\".A modifier is a function that is called each time Popper.js needs to compute the position of the popper. For this reason, modifiers should be very performant to avoid bottlenecks. To learn how to create a modifier, read the modifiers documentation.",
              "description_zh": "Popper.js is based on a \"plugin-like\" architecture, most of its features are fully encapsulated \"modifiers\".A modifier is a function that is called each time Popper.js needs to compute the position of the popper. For this reason, modifiers should be very performant to avoid bottlenecks. To learn how to create a modifier, read the modifiers documentation.",
              "default": "-",
              "value": "",
              "type": "Array<{ data?: object, effect?: func, enabled?: bool, fn?: func, name?: any, options?: object, phase?: afterMain| afterRead| afterWrite| beforeMain| beforeRead| beforeWrite| main| read| write, requires?: Array<string>, requiresIfExists?: Array<string> }>",
              "required": false
          },
          "placement": {
              "description": "Popper placement.",
              "description_zh": "Popper placement.",
              "default": "'bottom'",
              "value": "",
              "type": "auto-end| auto-start| auto| bottom-end| bottom-start| bottom| left-end| left-start| left| right-end| right-start| right| top-end| top-start| top",
              "required": false
          },
          "popperOptions": {
              "description": "Options provided to the Popper.js instance.",
              "description_zh": "Options provided to the Popper.js instance.",
              "default": "{}",
              "value": "",
              "type": "{ modifiers?: array, onFirstUpdate?: func, placement?: auto-end| auto-start| auto| bottom-end| bottom-start| bottom| left-end| left-start| left| right-end| right-start| right| top-end| top-start| top, strategy?: absolute| fixed }",
              "required": false
          },
          "popperRef": {
              "description": "A ref that points to the used popper instance.",
              "description_zh": "A ref that points to the used popper instance.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the Popper.",
              "description_zh": "The props used for each slot inside the Popper.",
              "default": "{}",
              "value": "",
              "type": "{ root?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ root?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "transition": {
              "description": "Help supporting a react-transition-group/Transition component.",
              "description_zh": "Help supporting a react-transition-group/Transition component.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/popper/",
      "link_zh": "https://mui.com/material-ui/api/popper/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Popper"
  },
  {
      "name": "Radio",
      "props": {
          "checked": {
              "description": "If true, the component is checked.",
              "description_zh": "If true, the component is checked.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "checkedIcon": {
              "description": "The icon to display when the component is checked.",
              "description_zh": "The icon to display when the component is checked.",
              "default": "<RadioButtonIcon checked />",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "default| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.",
              "description_zh": "If true, the ripple effect is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The icon to display when the component is unchecked.",
              "description_zh": "The icon to display when the component is unchecked.",
              "default": "<RadioButtonIcon />",
              "value": "",
              "type": "node",
              "required": false
          },
          "id": {
              "description": "The id of the input element.",
              "description_zh": "The id of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the state is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string). You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string). You can pull out the new checked state by accessing event.target.checked (boolean).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "required": {
              "description": "If true, the input element is required.",
              "description_zh": "If true, the input element is required.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component. small is equivalent to the dense radio styling.",
              "description_zh": "The size of the component. small is equivalent to the dense radio styling.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The value of the component. The DOM API casts this to a string.",
              "description_zh": "The value of the component. The DOM API casts this to a string.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/radio/",
      "link_zh": "https://mui.com/material-ui/api/radio/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string). You can pull out the new checked state by accessing event.target.checked (boolean).",
              "description_zh": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string). You can pull out the new checked state by accessing event.target.checked (boolean).",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Radio"
  },
  {
      "name": "RadioGroup",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "",
              "value": "",
              "type": "any",
              "required": false
          },
          "name": {
              "description": "The name used to reference the value of the control. If you don't provide this prop, it falls back to a randomly generated name.",
              "description_zh": "The name used to reference the value of the control. If you don't provide this prop, it falls back to a randomly generated name.",
              "default": "",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when a radio button is selected.Signature:function(event: React.ChangeEvent, value: string) => voidevent The event source of the callback.value The value of the selected radio button. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when a radio button is selected.Signature:function(event: React.ChangeEvent, value: string) => voidevent The event source of the callback.value The value of the selected radio button. You can pull out the new value by accessing event.target.value (string).",
              "default": "",
              "value": "",
              "type": "func",
              "required": false
          },
          "value": {
              "description": "Value of the selected radio button. The DOM API casts this to a string.",
              "description_zh": "Value of the selected radio button. The DOM API casts this to a string.",
              "default": "",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/radio-group/",
      "link_zh": "https://mui.com/material-ui/api/radio-group/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when a radio button is selected.Signature:event The event source of the callback.value The value of the selected radio button. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when a radio button is selected.Signature:event The event source of the callback.value The value of the selected radio button. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: React.ChangeEvent, value: string) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "RadioGroup"
  },
  {
      "name": "Rating",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "null",
              "value": "",
              "type": "number",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "emptyIcon": {
              "description": "The icon to display when empty.",
              "description_zh": "The icon to display when empty.",
              "default": "<StarBorder fontSize=\"inherit\" />",
              "value": "",
              "type": "node",
              "required": false
          },
          "emptyLabelText": {
              "description": "The label read when the rating input is empty.",
              "description_zh": "The label read when the rating input is empty.",
              "default": "'Empty'",
              "value": "",
              "type": "node",
              "required": false
          },
          "getLabelText": {
              "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(value: number) => stringvalue The rating label's value to format.",
              "description_zh": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(value: number) => stringvalue The rating label's value to format.",
              "default": "function defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}",
              "value": "",
              "type": "func",
              "required": false
          },
          "highlightSelectedOnly": {
              "description": "If true, only the selected icon will be highlighted.",
              "description_zh": "If true, only the selected icon will be highlighted.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The icon to display.",
              "description_zh": "The icon to display.",
              "default": "<Star fontSize=\"inherit\" />",
              "value": "",
              "type": "node",
              "required": false
          },
          "IconContainerComponent": {
              "description": "The component containing the icon.",
              "description_zh": "The component containing the icon.",
              "default": "function IconContainer(props) {\n  const { value, ...other } = props;\n  return <span {...other} />;\n}",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "max": {
              "description": "Maximum rating.",
              "description_zh": "Maximum rating.",
              "default": "5",
              "value": "",
              "type": "number",
              "required": false
          },
          "name": {
              "description": "The name attribute of the radio input elements. This input name should be unique within the page. Being unique within a form is insufficient since the name is used to generated IDs.",
              "description_zh": "The name attribute of the radio input elements. This input name should be unique within the page. Being unique within a form is insufficient since the name is used to generated IDs.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: number | null) => voidevent The event source of the callback.value The new value.",
              "description_zh": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: number | null) => voidevent The event source of the callback.value The new value.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onChangeActive": {
              "description": "Callback function that is fired when the hover state changes.Signature:function(event: React.SyntheticEvent, value: number) => voidevent The event source of the callback.value The new value.",
              "description_zh": "Callback function that is fired when the hover state changes.Signature:function(event: React.SyntheticEvent, value: number) => voidevent The event source of the callback.value The new value.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "precision": {
              "description": "The minimum increment value change allowed.",
              "description_zh": "The minimum increment value change allowed.",
              "default": "1",
              "value": "",
              "type": "number",
              "required": false
          },
          "readOnly": {
              "description": "Removes all hover effects and pointer events.",
              "description_zh": "Removes all hover effects and pointer events.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The rating value.",
              "description_zh": "The rating value.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/rating/",
      "link_zh": "https://mui.com/material-ui/api/rating/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value changes.Signature:event The event source of the callback.value The new value.",
              "description_zh": "Callback fired when the value changes.Signature:event The event source of the callback.value The new value.",
              "params": "function(event: React.SyntheticEvent, value: number | null) => void"
          },
          {
              "name": "onChangeActive",
              "description": "Callback function that is fired when the hover state changes.Signature:event The event source of the callback.value The new value.",
              "description_zh": "Callback function that is fired when the hover state changes.Signature:event The event source of the callback.value The new value.",
              "params": "function(event: React.SyntheticEvent, value: number) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Rating"
  },
  {
      "name": "ScopedCssBaseline",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "enableColorScheme": {
              "description": "Enable color-scheme CSS property to use theme.palette.mode. For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme For browser support, check out https://caniuse.com/?search=color-scheme",
              "description_zh": "Enable color-scheme CSS property to use theme.palette.mode. For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme For browser support, check out https://caniuse.com/?search=color-scheme",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/scoped-css-baseline/",
      "link_zh": "https://mui.com/material-ui/api/scoped-css-baseline/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ScopedCssBaseline"
  },
  {
      "name": "Select",
      "props": {
          "autoWidth": {
              "description": "If true, the width of the popover will automatically be set according to the items inside the menu, otherwise it will be at least the width of the select input.",
              "description_zh": "If true, the width of the popover will automatically be set according to the items inside the menu, otherwise it will be at least the width of the select input.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The option elements to populate the select with. Can be some MenuItem when native is false and option when native is true.⚠️The MenuItem elements must be direct descendants when native is false.",
              "description_zh": "The option elements to populate the select with. Can be some MenuItem when native is false and option when native is true.⚠️The MenuItem elements must be direct descendants when native is false.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "defaultOpen": {
              "description": "If true, the component is initially open. Use when the component open state is not controlled (i.e. the open prop is not defined). You can only use it when the native prop is false (default).",
              "description_zh": "If true, the component is initially open. Use when the component open state is not controlled (i.e. the open prop is not defined). You can only use it when the native prop is false (default).",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "displayEmpty": {
              "description": "If true, a value is displayed even if no items are selected.In order to display a meaningful value, a function can be passed to the renderValue prop which returns the value to be displayed when no items are selected.⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value. The label should either be hidden or forced to a shrunk state.",
              "description_zh": "If true, a value is displayed even if no items are selected.In order to display a meaningful value, a function can be passed to the renderValue prop which returns the value to be displayed when no items are selected.⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value. The label should either be hidden or forced to a shrunk state.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "IconComponent": {
              "description": "The icon that displays the arrow.",
              "description_zh": "The icon that displays the arrow.",
              "default": "ArrowDropDownIcon",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "id": {
              "description": "The id of the wrapper element or the select element when native.",
              "description_zh": "The id of the wrapper element or the select element when native.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "input": {
              "description": "An Input element; does not have to be a material-ui specific Input.",
              "description_zh": "An Input element; does not have to be a material-ui specific Input.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element. When native is true, the attributes are applied on the select element.",
              "description_zh": "Attributes applied to the input element. When native is true, the attributes are applied on the select element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "label": {
              "description": "See OutlinedInput#label",
              "description_zh": "See OutlinedInput#label",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "labelId": {
              "description": "The ID of an element that acts as an additional label. The Select will be labelled by the additional label and the selected value.",
              "description_zh": "The ID of an element that acts as an additional label. The Select will be labelled by the additional label and the selected value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "MenuProps": {
              "description": "Props applied to the Menu element.",
              "description_zh": "Props applied to the Menu element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "multiple": {
              "description": "If true, value must be an array and the menu will support multiple selections.",
              "description_zh": "If true, value must be an array and the menu will support multiple selections.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "native": {
              "description": "If true, the component uses a native select element.",
              "description_zh": "If true, the component uses a native select element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when a menu item is selected.Signature:function(event: SelectChangeEvent, child?: object) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event, not a change event, unless the change event is caused by browser autofill.child The react element that was selected when native is false (default).",
              "description_zh": "Callback fired when a menu item is selected.Signature:function(event: SelectChangeEvent, child?: object) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event, not a change event, unless the change event is caused by browser autofill.child The react element that was selected when native is false (default).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select collapses).Signature:function(event: object) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select collapses).Signature:function(event: object) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onOpen": {
              "description": "Callback fired when the component requests to be opened. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select expands).Signature:function(event: object) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be opened. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select expands).Signature:function(event: object) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown. You can only use it when the native prop is false (default).",
              "description_zh": "If true, the component is shown. You can only use it when the native prop is false (default).",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "renderValue": {
              "description": "Render the selected value. You can only use it when the native prop is false (default).Signature:function(value: any) => ReactNodevalue The value provided to the component.",
              "description_zh": "Render the selected value. You can only use it when the native prop is false (default).Signature:function(value: any) => ReactNodevalue The value provided to the component.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "SelectDisplayProps": {
              "description": "Props applied to the clickable div element.",
              "description_zh": "Props applied to the clickable div element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The input value. Providing an empty string will select no options. Set to an empty string '' if you don't want any of the available options to be selected.If the value is an object it must have reference equality with the option in order to be selected. If the value is not an object, the string representation must match with the string representation of the option in order to be selected.",
              "description_zh": "The input value. Providing an empty string will select no options. Set to an empty string '' if you don't want any of the available options to be selected.If the value is an object it must have reference equality with the option in order to be selected. If the value is not an object, the string representation must match with the string representation of the option in order to be selected.",
              "default": "-",
              "value": "",
              "type": "| any",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'outlined'",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/select/",
      "link_zh": "https://mui.com/material-ui/api/select/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when a menu item is selected.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event, not a change event, unless the change event is caused by browser autofill.child The react element that was selected when native is false (default).",
              "description_zh": "Callback fired when a menu item is selected.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event, not a change event, unless the change event is caused by browser autofill.child The react element that was selected when native is false (default).",
              "params": "function(event: SelectChangeEvent, child?: object) => void"
          },
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. Use it in either controlled (see the  prop), or uncontrolled mode (to detect when the Select collapses).Signature:function(event: object) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed. Use it in either controlled (see the  prop), or uncontrolled mode (to detect when the Select collapses).Signature:function(event: object) => voidevent The event source of the callback.",
              "params": "open"
          },
          {
              "name": "onOpen",
              "description": "Callback fired when the component requests to be ed. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select expands).Signature:function(event: object) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be ed. Use it in either controlled (see the open prop), or uncontrolled mode (to detect when the Select expands).Signature:function(event: object) => voidevent The event source of the callback.",
              "params": "open"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Select"
  },
  {
      "name": "Skeleton",
      "props": {
          "animation": {
              "description": "The animation. If false the animation effect is disabled.",
              "description_zh": "The animation. If false the animation effect is disabled.",
              "default": "'pulse'",
              "value": "",
              "type": "pulse| wave| false",
              "required": false
          },
          "children": {
              "description": "Optional children to infer width and height from.",
              "description_zh": "Optional children to infer width and height from.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "height": {
              "description": "Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.",
              "description_zh": "Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The type of content that will be rendered.",
              "description_zh": "The type of content that will be rendered.",
              "default": "'text'",
              "value": "",
              "type": "circular| rectangular| rounded| text| string",
              "required": false
          },
          "width": {
              "description": "Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.",
              "description_zh": "Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/skeleton/",
      "link_zh": "https://mui.com/material-ui/api/skeleton/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Skeleton"
  },
  {
      "name": "Slide",
      "props": {
          "children": {
              "description": "A single child content element.This needs to be able to hold a ref.",
              "description_zh": "A single child content element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "addEndListener": {
              "description": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "description_zh": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "appear": {
              "description": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "description_zh": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "default": "true",
              "value": "",
              "type": "bool",
              "required": false
          },
          "container": {
              "description": "An HTML element, or a function that returns one. It's used to set the container the Slide is transitioning from.",
              "description_zh": "An HTML element, or a function that returns one. It's used to set the container the Slide is transitioning from.",
              "default": "-",
              "value": "",
              "type": "HTML element| func",
              "required": false
          },
          "direction": {
              "description": "Direction the child node will enter from.",
              "description_zh": "Direction the child node will enter from.",
              "default": "'down'",
              "value": "",
              "type": "down| left| right| up",
              "required": false
          },
          "easing": {
              "description": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "description_zh": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "default": "{\n  enter: theme.transitions.easing.easeOut,\n  exit: theme.transitions.easing.sharp,\n}",
              "value": "",
              "type": "{ enter?: string, exit?: string }| string",
              "required": false
          },
          "in": {
              "description": "If true, the component will transition in.",
              "description_zh": "If true, the component will transition in.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "timeout": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/slide/",
      "link_zh": "https://mui.com/material-ui/api/slide/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Slide"
  },
  {
      "name": "Slider",
      "props": {
          "aria-label": {
              "description": "The label of the slider.",
              "description_zh": "The label of the slider.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "aria-labelledby": {
              "description": "The id of the element containing a label for the slider.",
              "description_zh": "The id of the element containing a label for the slider.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "aria-valuetext": {
              "description": "A string value that provides a user-friendly name for the current value of the slider.",
              "description_zh": "A string value that provides a user-friendly name for the current value of the slider.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.Deprecated - use the slots prop instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "The components used for each slot inside.Deprecated - use the slots prop instead. This prop will be removed in v7. How to migrate.",
              "default": "{}",
              "value": "",
              "type": "{ Input?: elementType, Mark?: elementType, MarkLabel?: elementType, Rail?: elementType, Root?: elementType, Thumb?: elementType, Track?: elementType, ValueLabel?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.Deprecated - use the slotProps prop instead. This prop will be removed in v7. How to migrate.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.Deprecated - use the slotProps prop instead. This prop will be removed in v7. How to migrate.",
              "default": "{}",
              "value": "",
              "type": "{ input?: func| object, mark?: func| object, markLabel?: func| object, rail?: func| object, root?: func| object, thumb?: func| object, track?: func| object, valueLabel?: func| { children?: element, className?: string, open?: bool, style?: object, value?: number, valueLabelDisplay?: auto| off| on } }",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "Array<number>| number",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableSwap": {
              "description": "If true, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.",
              "description_zh": "If true, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "getAriaLabel": {
              "description": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider. This is important for screen reader users.Signature:function(index: number) => stringindex The thumb label's index to format.",
              "description_zh": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider. This is important for screen reader users.Signature:function(index: number) => stringindex The thumb label's index to format.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "getAriaValueText": {
              "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider. This is important for screen reader users.Signature:function(value: number, index: number) => stringvalue The thumb label's value to format.index The thumb label's index to format.",
              "description_zh": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider. This is important for screen reader users.Signature:function(value: number, index: number) => stringvalue The thumb label's value to format.index The thumb label's index to format.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "marks": {
              "description": "Marks indicate predetermined values to which the user can move the slider. If true the marks are spaced according the value of the step prop. If an array, it should contain objects with value and an optional label keys.",
              "description_zh": "Marks indicate predetermined values to which the user can move the slider. If true the marks are spaced according the value of the step prop. If an array, it should contain objects with value and an optional label keys.",
              "default": "false",
              "value": "",
              "type": "Array<{ label?: node, value: number }>| bool",
              "required": false
          },
          "max": {
              "description": "The maximum allowed value of the slider. Should not be equal to min.",
              "description_zh": "The maximum allowed value of the slider. Should not be equal to min.",
              "default": "100",
              "value": "",
              "type": "number",
              "required": false
          },
          "min": {
              "description": "The minimum allowed value of the slider. Should not be equal to max.",
              "description_zh": "The minimum allowed value of the slider. Should not be equal to max.",
              "default": "0",
              "value": "",
              "type": "number",
              "required": false
          },
          "name": {
              "description": "Name attribute of the hidden input element.",
              "description_zh": "Name attribute of the hidden input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback function that is fired when the slider's value changed.Signature:function(event: Event, value: number | Array, activeThumb: number) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event not a change event.value The new value.activeThumb Index of the currently moved thumb.",
              "description_zh": "Callback function that is fired when the slider's value changed.Signature:function(event: Event, value: number | Array, activeThumb: number) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event not a change event.value The new value.activeThumb Index of the currently moved thumb.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onChangeCommitted": {
              "description": "Callback function that is fired when the mouseup is triggered.Signature:function(event: React.SyntheticEvent | Event, value: number | Array) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value The new value.",
              "description_zh": "Callback function that is fired when the mouseup is triggered.Signature:function(event: React.SyntheticEvent | Event, value: number | Array) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value The new value.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "orientation": {
              "description": "The component orientation.",
              "description_zh": "The component orientation.",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "scale": {
              "description": "A transformation function, to change the scale of the slider.Signature:function(x: any) => any",
              "description_zh": "A transformation function, to change the scale of the slider.Signature:function(x: any) => any",
              "default": "function Identity(x) {\n  return x;\n}",
              "value": "",
              "type": "func",
              "required": false
          },
          "shiftStep": {
              "description": "The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.",
              "description_zh": "The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.",
              "default": "10",
              "value": "",
              "type": "number",
              "required": false
          },
          "size": {
              "description": "The size of the slider.",
              "description_zh": "The size of the slider.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| string",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the Slider.",
              "description_zh": "The props used for each slot inside the Slider.",
              "default": "{}",
              "value": "",
              "type": "{ input?: func| object, mark?: func| object, markLabel?: func| object, rail?: func| object, root?: func| object, thumb?: func| object, track?: func| object, valueLabel?: func| { children?: element, className?: string, open?: bool, style?: object, value?: number, valueLabelDisplay?: auto| off| on } }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the Slider. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the Slider. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ input?: elementType, mark?: elementType, markLabel?: elementType, rail?: elementType, root?: elementType, thumb?: elementType, track?: elementType, valueLabel?: elementType }",
              "required": false
          },
          "step": {
              "description": "The granularity with which the slider can step through values. (A \"discrete\" slider.) The min prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.When step is null, the thumb can only be slid onto marks provided with the marks prop.",
              "description_zh": "The granularity with which the slider can step through values. (A \"discrete\" slider.) The min prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.When step is null, the thumb can only be slid onto marks provided with the marks prop.",
              "default": "1",
              "value": "",
              "type": "number",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "tabIndex": {
              "description": "Tab index attribute of the hidden input element.",
              "description_zh": "Tab index attribute of the hidden input element.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "track": {
              "description": "The track presentation:\n\nnormal the track will render a bar representing the slider value.\ninverted the track will render a bar representing the remaining slider value.\nfalse the track will render without a bar.\n\n",
              "description_zh": "The track presentation:\n\nnormal the track will render a bar representing the slider value.\ninverted the track will render a bar representing the remaining slider value.\nfalse the track will render without a bar.\n\n",
              "default": "'normal'",
              "value": "",
              "type": "inverted| normal| false",
              "required": false
          },
          "value": {
              "description": "The value of the slider. For ranged sliders, provide an array with two values.",
              "description_zh": "The value of the slider. For ranged sliders, provide an array with two values.",
              "default": "-",
              "value": "",
              "type": "Array<number>| number",
              "required": false
          },
          "valueLabelDisplay": {
              "description": "Controls when the value label is displayed:\n\nauto the value label will display when the thumb is hovered or focused.\non will display persistently.\noff will never display.\n\n",
              "description_zh": "Controls when the value label is displayed:\n\nauto the value label will display when the thumb is hovered or focused.\non will display persistently.\noff will never display.\n\n",
              "default": "'off'",
              "value": "",
              "type": "auto| off| on",
              "required": false
          },
          "valueLabelFormat": {
              "description": "The format function the value label's value.When a function is provided, it should have the following signature:- {number} value The value label's value to format - {number} index The value label's index to format",
              "description_zh": "The format function the value label's value.When a function is provided, it should have the following signature:- {number} value The value label's value to format - {number} index The value label's index to format",
              "default": "function Identity(x) {\n  return x;\n}",
              "value": "",
              "type": "func| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/slider/",
      "link_zh": "https://mui.com/material-ui/api/slider/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback function that is fired when the slider's value changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event not a change event.value The new value.activeThumb Index of the currently moved thumb.",
              "description_zh": "Callback function that is fired when the slider's value changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (any). Warning: This is a generic event not a change event.value The new value.activeThumb Index of the currently moved thumb.",
              "params": "function(event: Event, value: number | Array, activeThumb: number) => void"
          },
          {
              "name": "onChangeCommitted",
              "description": "Callback function that is fired when the  is triggered.Signature:function(event: React.SyntheticEvent | Event, value: number | Array) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value The new value.",
              "description_zh": "Callback function that is fired when the  is triggered.Signature:function(event: React.SyntheticEvent | Event, value: number | Array) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value The new value.",
              "params": "mouseup"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Slider"
  },
  {
      "name": "Snackbar",
      "props": {
          "action": {
              "description": "The action to display. It renders after the message, at the end of the snackbar.",
              "description_zh": "The action to display. It renders after the message, at the end of the snackbar.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "anchorOrigin": {
              "description": "The anchor of the Snackbar. On smaller screens, the component grows to occupy all the available width, the horizontal alignment is ignored.",
              "description_zh": "The anchor of the Snackbar. On smaller screens, the component grows to occupy all the available width, the horizontal alignment is ignored.",
              "default": "{ vertical: 'bottom', horizontal: 'left' }",
              "value": "",
              "type": "{ horizontal: center| left| right, vertical: bottom| top }",
              "required": false
          },
          "autoHideDuration": {
              "description": "The number of milliseconds to wait before automatically calling the onClose function. onClose should then set the state of the open prop to hide the Snackbar. This behavior is disabled by default with the null value.",
              "description_zh": "The number of milliseconds to wait before automatically calling the onClose function. onClose should then set the state of the open prop to hide the Snackbar. This behavior is disabled by default with the null value.",
              "default": "null",
              "value": "",
              "type": "number",
              "required": false
          },
          "children": {
              "description": "Replace the SnackbarContent component.",
              "description_zh": "Replace the SnackbarContent component.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "ClickAwayListenerProps": {
              "description": "Props applied to the ClickAwayListener element.",
              "description_zh": "Props applied to the ClickAwayListener element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "ContentProps": {
              "description": "Props applied to the SnackbarContent element.",
              "description_zh": "Props applied to the SnackbarContent element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disableWindowBlurListener": {
              "description": "If true, the autoHideDuration timer will expire even if the window is not focused.",
              "description_zh": "If true, the autoHideDuration timer will expire even if the window is not focused.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "key": {
              "description": "When displaying multiple consecutive snackbars using a single parent-rendered <Snackbar/>, add the key prop to ensure independent treatment of each message. For instance, use <Snackbar key={message} />. Otherwise, messages might update in place, and features like autoHideDuration could be affected.",
              "description_zh": "When displaying multiple consecutive snackbars using a single parent-rendered <Snackbar/>, add the key prop to ensure independent treatment of each message. For instance, use <Snackbar key={message} />. Otherwise, messages might update in place, and features like autoHideDuration could be affected.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "message": {
              "description": "The message to display.",
              "description_zh": "The message to display.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed. Typically onClose is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed. Typically onClose is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "resumeHideDuration": {
              "description": "The number of milliseconds to wait before dismissing after user interaction. If autoHideDuration prop isn't specified, it does nothing. If autoHideDuration prop is specified but resumeHideDuration isn't, we default to autoHideDuration / 2 ms.",
              "description_zh": "The number of milliseconds to wait before dismissing after user interaction. If autoHideDuration prop isn't specified, it does nothing. If autoHideDuration prop is specified but resumeHideDuration isn't, we default to autoHideDuration / 2 ms.",
              "default": "-",
              "value": "",
              "type": "number",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Grow",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/snackbar/",
      "link_zh": "https://mui.com/material-ui/api/snackbar/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed. Typically  is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed. Typically  is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
              "params": "onClose"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Snackbar"
  },
  {
      "name": "SnackbarContent",
      "props": {
          "action": {
              "description": "The action to display. It renders after the message, at the end of the snackbar.",
              "description_zh": "The action to display. It renders after the message, at the end of the snackbar.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "message": {
              "description": "The message to display.",
              "description_zh": "The message to display.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "role": {
              "description": "The ARIA role attribute of the element.",
              "description_zh": "The ARIA role attribute of the element.",
              "default": "'alert'",
              "value": "",
              "type": "string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/snackbar-content/",
      "link_zh": "https://mui.com/material-ui/api/snackbar-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SnackbarContent"
  },
  {
      "name": "SpeedDial",
      "props": {
          "ariaLabel": {
              "description": "The aria-label of the button element. Also used to provide the id for the SpeedDial element and its children.",
              "description_zh": "The aria-label of the button element. Also used to provide the id for the SpeedDial element and its children.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": true
          },
          "children": {
              "description": "SpeedDialActions to display when the SpeedDial is open.",
              "description_zh": "SpeedDialActions to display when the SpeedDial is open.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "direction": {
              "description": "The direction the actions open relative to the floating action button.",
              "description_zh": "The direction the actions open relative to the floating action button.",
              "default": "'up'",
              "value": "",
              "type": "down| left| right| up",
              "required": false
          },
          "FabProps": {
              "description": "Props applied to the Fab element.",
              "description_zh": "Props applied to the Fab element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "hidden": {
              "description": "If true, the SpeedDial is hidden.",
              "description_zh": "If true, the SpeedDial is hidden.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The icon to display in the SpeedDial Fab. The SpeedDialIcon component provides a default Icon with animation.",
              "description_zh": "The icon to display in the SpeedDial Fab. The SpeedDialIcon component provides a default Icon with animation.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"toggle\", \"blur\", \"mouseLeave\", \"escapeKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"toggle\", \"blur\", \"mouseLeave\", \"escapeKeyDown\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onOpen": {
              "description": "Callback fired when the component requests to be open.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"toggle\", \"focus\", \"mouseEnter\".",
              "description_zh": "Callback fired when the component requests to be open.Signature:function(event: object, reason: string) => voidevent The event source of the callback.reason Can be: \"toggle\", \"focus\", \"mouseEnter\".",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "openIcon": {
              "description": "The icon to display in the SpeedDial Fab when the SpeedDial is open.",
              "description_zh": "The icon to display in the SpeedDial Fab when the SpeedDial is open.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Zoom",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/speed-dial/",
      "link_zh": "https://mui.com/material-ui/api/speed-dial/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"toggle\", \"blur\", \"mouseLeave\", \"escapeKeyDown\".",
              "description_zh": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.reason Can be: \"toggle\", \"blur\", \"mouseLeave\", \"escapeKeyDown\".",
              "params": "function(event: object, reason: string) => void"
          },
          {
              "name": "onOpen",
              "description": "Callback fired when the component requests to be open.Signature:event The event source of the callback.reason Can be: \"toggle\", \"focus\", \"mouseEnter\".",
              "description_zh": "Callback fired when the component requests to be open.Signature:event The event source of the callback.reason Can be: \"toggle\", \"focus\", \"mouseEnter\".",
              "params": "function(event: object, reason: string) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SpeedDial"
  },
  {
      "name": "SpeedDialAction",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "delay": {
              "description": "Adds a transition delay, to allow a series of SpeedDialActions to be animated.",
              "description_zh": "Adds a transition delay, to allow a series of SpeedDialActions to be animated.",
              "default": "0",
              "value": "",
              "type": "number",
              "required": false
          },
          "FabProps": {
              "description": "Props applied to the Fab component.",
              "description_zh": "Props applied to the Fab component.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "icon": {
              "description": "The icon to display in the SpeedDial Fab.",
              "description_zh": "The icon to display in the SpeedDial Fab.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "id": {
              "description": "This prop is used to help implement the accessibility logic. If you don't provide this prop. It falls back to a randomly generated id.",
              "description_zh": "This prop is used to help implement the accessibility logic. If you don't provide this prop. It falls back to a randomly generated id.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TooltipClasses": {
              "description": "classes prop applied to the Tooltip element.",
              "description_zh": "classes prop applied to the Tooltip element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "tooltipOpen": {
              "description": "Make the tooltip always visible when the SpeedDial is open.",
              "description_zh": "Make the tooltip always visible when the SpeedDial is open.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "tooltipPlacement": {
              "description": "Placement of the tooltip.",
              "description_zh": "Placement of the tooltip.",
              "default": "'left'",
              "value": "",
              "type": "bottom-end| bottom-start| bottom| left-end| left-start| left| right-end| right-start| right| top-end| top-start| top",
              "required": false
          },
          "tooltipTitle": {
              "description": "Label to display in the tooltip.",
              "description_zh": "Label to display in the tooltip.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/speed-dial-action/",
      "link_zh": "https://mui.com/material-ui/api/speed-dial-action/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SpeedDialAction"
  },
  {
      "name": "SpeedDialIcon",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "icon": {
              "description": "The icon to display.",
              "description_zh": "The icon to display.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "openIcon": {
              "description": "The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.",
              "description_zh": "The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/speed-dial-icon/",
      "link_zh": "https://mui.com/material-ui/api/speed-dial-icon/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SpeedDialIcon"
  },
  {
      "name": "Stack",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "direction": {
              "description": "Defines the flex-direction style property. It is applied for all screen sizes.",
              "description_zh": "Defines the flex-direction style property. It is applied for all screen sizes.",
              "default": "",
              "value": "",
              "type": "column-reverse| column| row-reverse| row| Array<column-reverse| column| row-reverse| row>| object",
              "required": false
          },
          "divider": {
              "description": "Add an element between each child.",
              "description_zh": "Add an element between each child.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "spacing": {
              "description": "Defines the space between immediate children.",
              "description_zh": "Defines the space between immediate children.",
              "default": "",
              "value": "",
              "type": "Array<number| string>| number| object| string",
              "required": false
          },
          "sx": {
              "description": "The system prop, which allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop, which allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "useFlexGap": {
              "description": "If true, the CSS flexbox gap is used instead of applying margin to children.While CSS gap removes the known limitations, it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.To enable this flag globally, follow the theme's default props configuration.",
              "description_zh": "If true, the CSS flexbox gap is used instead of applying margin to children.While CSS gap removes the known limitations, it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.To enable this flag globally, follow the theme's default props configuration.",
              "default": "",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/stack/",
      "link_zh": "https://mui.com/material-ui/api/stack/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Stack"
  },
  {
      "name": "Step",
      "props": {
          "active": {
              "description": "Sets the step as active. Is passed to child components.",
              "description_zh": "Sets the step as active. Is passed to child components.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "Should be Step sub-components such as StepLabel, StepContent.",
              "description_zh": "Should be Step sub-components such as StepLabel, StepContent.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "completed": {
              "description": "Mark the step as completed. Is passed to child components.",
              "description_zh": "Mark the step as completed. Is passed to child components.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the step is disabled, will also disable the button if StepButton is a child of Step. Is passed to child components.",
              "description_zh": "If true, the step is disabled, will also disable the button if StepButton is a child of Step. Is passed to child components.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "expanded": {
              "description": "Expand the step.",
              "description_zh": "Expand the step.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "index": {
              "description": "The position of the step. The prop defaults to the value inherited from the parent Stepper component.",
              "description_zh": "The position of the step. The prop defaults to the value inherited from the parent Stepper component.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": false
          },
          "last": {
              "description": "If true, the Step is displayed as rendered last. The prop defaults to the value inherited from the parent Stepper component.",
              "description_zh": "If true, the Step is displayed as rendered last. The prop defaults to the value inherited from the parent Stepper component.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step/",
      "link_zh": "https://mui.com/material-ui/api/step/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Step"
  },
  {
      "name": "StepButton",
      "props": {
          "children": {
              "description": "Can be a StepLabel or a node to place inside StepLabel as children.",
              "description_zh": "Can be a StepLabel or a node to place inside StepLabel as children.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "icon": {
              "description": "The icon displayed by the step label.",
              "description_zh": "The icon displayed by the step label.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "optional": {
              "description": "The optional node to display.",
              "description_zh": "The optional node to display.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step-button/",
      "link_zh": "https://mui.com/material-ui/api/step-button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "StepButton"
  },
  {
      "name": "StepConnector",
      "props": {
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step-connector/",
      "link_zh": "https://mui.com/material-ui/api/step-connector/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "StepConnector"
  },
  {
      "name": "StepContent",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Collapse",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "transitionDuration": {
              "description": "Adjust the duration of the content expand transition. Passed as a prop to the transition component.Set to 'auto' to automatically calculate transition time based on height.",
              "description_zh": "Adjust the duration of the content expand transition. Passed as a prop to the transition component.Set to 'auto' to automatically calculate transition time based on height.",
              "default": "'auto'",
              "value": "",
              "type": "auto| number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step-content/",
      "link_zh": "https://mui.com/material-ui/api/step-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "StepContent"
  },
  {
      "name": "StepIcon",
      "props": {
          "active": {
              "description": "Whether this step is active.",
              "description_zh": "Whether this step is active.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "completed": {
              "description": "Mark the step as completed. Is passed to child components.",
              "description_zh": "Mark the step as completed. Is passed to child components.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, the step is marked as failed.",
              "description_zh": "If true, the step is marked as failed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The label displayed in the step icon.",
              "description_zh": "The label displayed in the step icon.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step-icon/",
      "link_zh": "https://mui.com/material-ui/api/step-icon/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "StepIcon"
  },
  {
      "name": "StepLabel",
      "props": {
          "children": {
              "description": "In most cases will simply be a string containing a title for the label.",
              "description_zh": "In most cases will simply be a string containing a title for the label.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "componentsProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ label?: object }",
              "required": false
          },
          "error": {
              "description": "If true, the step is marked as failed.",
              "description_zh": "If true, the step is marked as failed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "Override the default label of the step icon.",
              "description_zh": "Override the default label of the step icon.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "optional": {
              "description": "The optional node to display.",
              "description_zh": "The optional node to display.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside.",
              "description_zh": "The props used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ label?: object }",
              "required": false
          },
          "StepIconComponent": {
              "description": "The component to render in place of the StepIcon.",
              "description_zh": "The component to render in place of the StepIcon.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "StepIconProps": {
              "description": "Props applied to the StepIcon element.",
              "description_zh": "Props applied to the StepIcon element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/step-label/",
      "link_zh": "https://mui.com/material-ui/api/step-label/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "StepLabel"
  },
  {
      "name": "Stepper",
      "props": {
          "activeStep": {
              "description": "Set the active step (zero based index). Set to -1 to disable all the steps.",
              "description_zh": "Set the active step (zero based index). Set to -1 to disable all the steps.",
              "default": "0",
              "value": "",
              "type": "integer",
              "required": false
          },
          "alternativeLabel": {
              "description": "If set to 'true' and orientation is horizontal, then the step label will be positioned under the icon.",
              "description_zh": "If set to 'true' and orientation is horizontal, then the step label will be positioned under the icon.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "Two or more <Step /> components.",
              "description_zh": "Two or more <Step /> components.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "connector": {
              "description": "An element to be placed between each step.",
              "description_zh": "An element to be placed between each step.",
              "default": "<StepConnector />",
              "value": "",
              "type": "element",
              "required": false
          },
          "nonLinear": {
              "description": "If set the Stepper will not assist in controlling steps for linear flow.",
              "description_zh": "If set the Stepper will not assist in controlling steps for linear flow.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "orientation": {
              "description": "The component orientation (layout flow direction).",
              "description_zh": "The component orientation (layout flow direction).",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/stepper/",
      "link_zh": "https://mui.com/material-ui/api/stepper/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Stepper"
  },
  {
      "name": "SvgIcon",
      "props": {
          "children": {
              "description": "Node passed into the SVG element.",
              "description_zh": "Node passed into the SVG element.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. You can use the htmlColor prop to apply a color attribute to the SVG element.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide. You can use the htmlColor prop to apply a color attribute to the SVG element.",
              "default": "'inherit'",
              "value": "",
              "type": "inherit| action| disabled| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "fontSize": {
              "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
              "description_zh": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
              "default": "'medium'",
              "value": "",
              "type": "inherit| large| medium| small| string",
              "required": false
          },
          "htmlColor": {
              "description": "Applies a color attribute to the SVG element.",
              "description_zh": "Applies a color attribute to the SVG element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "inheritViewBox": {
              "description": "If true, the root node will inherit the custom component's viewBox and the viewBox prop will be ignored. Useful when you want to reference a custom component and have SvgIcon pass that component's viewBox to the root node.",
              "description_zh": "If true, the root node will inherit the custom component's viewBox and the viewBox prop will be ignored. Useful when you want to reference a custom component and have SvgIcon pass that component's viewBox to the root node.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "shapeRendering": {
              "description": "The shape-rendering attribute. The behavior of the different options is described on the MDN Web Docs. If you are having issues with blurry icons you should investigate this prop.",
              "description_zh": "The shape-rendering attribute. The behavior of the different options is described on the MDN Web Docs. If you are having issues with blurry icons you should investigate this prop.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "titleAccess": {
              "description": "Provides a human-readable title for the element that contains it. https://www.w3.org/TR/SVG-access/#Equivalent",
              "description_zh": "Provides a human-readable title for the element that contains it. https://www.w3.org/TR/SVG-access/#Equivalent",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "viewBox": {
              "description": "Allows you to redefine what the coordinates without units mean inside an SVG element. For example, if the SVG element is 500 (width) by 200 (height), and you pass viewBox=\"0 0 50 20\", this means that the coordinates inside the SVG will go from the top left corner (0,0) to bottom right (50,20) and each unit will be worth 10px.",
              "description_zh": "Allows you to redefine what the coordinates without units mean inside an SVG element. For example, if the SVG element is 500 (width) by 200 (height), and you pass viewBox=\"0 0 50 20\", this means that the coordinates inside the SVG will go from the top left corner (0,0) to bottom right (50,20) and each unit will be worth 10px.",
              "default": "'0 0 24 24'",
              "value": "",
              "type": "string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/svg-icon/",
      "link_zh": "https://mui.com/material-ui/api/svg-icon/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SvgIcon"
  },
  {
      "name": "SwipeableDrawer",
      "props": {
          "onClose": {
              "description": "Callback fired when the component requests to be closed.Signature:function(event: React.SyntheticEvent<{}>) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed.Signature:function(event: React.SyntheticEvent<{}>) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": true
          },
          "onOpen": {
              "description": "Callback fired when the component requests to be opened.Signature:function(event: React.SyntheticEvent<{}>) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be opened.Signature:function(event: React.SyntheticEvent<{}>) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": true
          },
          "allowSwipeInChildren": {
              "description": "If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children. This can be useful in scenarios where the drawer is partially visible. You can customize it further with a callback that determines which children the user can drag over to open the drawer (for example, to ignore other elements that handle touch move events, like sliders).",
              "description_zh": "If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children. This can be useful in scenarios where the drawer is partially visible. You can customize it further with a callback that determines which children the user can drag over to open the drawer (for example, to ignore other elements that handle touch move events, like sliders).",
              "default": "false",
              "value": "",
              "type": "func| bool",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "disableBackdropTransition": {
              "description": "Disable the backdrop transition. This can improve the FPS on low-end devices.",
              "description_zh": "Disable the backdrop transition. This can improve the FPS on low-end devices.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableDiscovery": {
              "description": "If true, touching the screen near the edge of the drawer will not slide in the drawer a bit to promote accidental discovery of the swipe gesture.",
              "description_zh": "If true, touching the screen near the edge of the drawer will not slide in the drawer a bit to promote accidental discovery of the swipe gesture.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableSwipeToOpen": {
              "description": "If true, swipe to open is disabled. This is useful in browsers where swiping triggers navigation actions. Swipe to open is disabled on iOS browsers by default.",
              "description_zh": "If true, swipe to open is disabled. This is useful in browsers where swiping triggers navigation actions. Swipe to open is disabled on iOS browsers by default.",
              "default": "typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)",
              "value": "",
              "type": "bool",
              "required": false
          },
          "hysteresis": {
              "description": "Affects how far the drawer must be opened/closed to change its state. Specified as percent (0-1) of the width of the drawer",
              "description_zh": "Affects how far the drawer must be opened/closed to change its state. Specified as percent (0-1) of the width of the drawer",
              "default": "0.52",
              "value": "",
              "type": "number",
              "required": false
          },
          "minFlingVelocity": {
              "description": "Defines, from which (average) velocity on, the swipe is defined as complete although hysteresis isn't reached. Good threshold is between 250 - 1000 px/s",
              "description_zh": "Defines, from which (average) velocity on, the swipe is defined as complete although hysteresis isn't reached. Good threshold is between 250 - 1000 px/s",
              "default": "450",
              "value": "",
              "type": "number",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "SwipeAreaProps": {
              "description": "The element is used to intercept the touch events on the edge.",
              "description_zh": "The element is used to intercept the touch events on the edge.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "swipeAreaWidth": {
              "description": "The width of the left most (or right most) area in px that the drawer can be swiped open from.",
              "description_zh": "The width of the left most (or right most) area in px that the drawer can be swiped open from.",
              "default": "20",
              "value": "",
              "type": "number",
              "required": false
          },
          "transitionDuration": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/swipeable-drawer/",
      "link_zh": "https://mui.com/material-ui/api/swipeable-drawer/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.",
              "params": "function(event: React.SyntheticEvent<{}>) => void"
          },
          {
              "name": "onOpen",
              "description": "Callback fired when the component requests to be opened.Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be opened.Signature:event The event source of the callback.",
              "params": "function(event: React.SyntheticEvent<{}>) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "SwipeableDrawer"
  },
  {
      "name": "Switch",
      "props": {},
      "link": "https://mui.com/material-ui/api/switch/",
      "link_zh": "https://mui.com/material-ui/api/switch/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Switch"
  },
  {
      "name": "Tab",
      "props": {
          "children": {
              "description": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "description_zh": "This prop isn't supported. Use the component prop if you need to change the children structure.",
              "default": "-",
              "value": "",
              "type": "unsupportedProp",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the  keyboard focus ripple is disabled.",
              "description_zh": "If true, the  keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "description_zh": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "icon": {
              "description": "The icon to display.",
              "description_zh": "The icon to display.",
              "default": "-",
              "value": "",
              "type": "element| string",
              "required": false
          },
          "iconPosition": {
              "description": "The position of the icon relative to the label.",
              "description_zh": "The position of the icon relative to the label.",
              "default": "'top'",
              "value": "",
              "type": "bottom| end| start| top",
              "required": false
          },
          "label": {
              "description": "The label element.",
              "description_zh": "The label element.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
              "description_zh": "You can provide your own value. Otherwise, we fallback to the child position index.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "wrapped": {
              "description": "Tab labels appear in a single row. They can use a second line if needed.",
              "description_zh": "Tab labels appear in a single row. They can use a second line if needed.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tab/",
      "link_zh": "https://mui.com/material-ui/api/tab/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Tab"
  },
  {
      "name": "TabContext",
      "props": {
          "value": {
              "description": "The value of the currently selected Tab.",
              "description_zh": "The value of the currently selected Tab.",
              "default": "",
              "value": "",
              "type": "number| string",
              "required": true
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tab-context/",
      "link_zh": "https://mui.com/material-ui/api/tab-context/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TabContext"
  },
  {
      "name": "Table",
      "props": {
          "children": {
              "description": "The content of the table, normally TableHead and TableBody.",
              "description_zh": "The content of the table, normally TableHead and TableBody.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "padding": {
              "description": "Allows TableCells to inherit padding of the Table.",
              "description_zh": "Allows TableCells to inherit padding of the Table.",
              "default": "'normal'",
              "value": "",
              "type": "checkbox| none| normal",
              "required": false
          },
          "size": {
              "description": "Allows TableCells to inherit size of the Table.",
              "description_zh": "Allows TableCells to inherit size of the Table.",
              "default": "'medium'",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "stickyHeader": {
              "description": "Set the header sticky.⚠️ It doesn't work with IE11.",
              "description_zh": "Set the header sticky.⚠️ It doesn't work with IE11.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table/",
      "link_zh": "https://mui.com/material-ui/api/table/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Table"
  },
  {
      "name": "TableBody",
      "props": {
          "children": {
              "description": "The content of the component, normally TableRow.",
              "description_zh": "The content of the component, normally TableRow.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-body/",
      "link_zh": "https://mui.com/material-ui/api/table-body/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableBody"
  },
  {
      "name": "TableCell",
      "props": {
          "align": {
              "description": "Set the text-align on the table cell content.Monetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals.",
              "description_zh": "Set the text-align on the table cell content.Monetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals.",
              "default": "'inherit'",
              "value": "",
              "type": "center| inherit| justify| left| right",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "padding": {
              "description": "Sets the padding applied to the cell. The prop defaults to the value ('default') inherited from the parent Table component.",
              "description_zh": "Sets the padding applied to the cell. The prop defaults to the value ('default') inherited from the parent Table component.",
              "default": "-",
              "value": "",
              "type": "checkbox| none| normal",
              "required": false
          },
          "scope": {
              "description": "Set scope attribute.",
              "description_zh": "Set scope attribute.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "size": {
              "description": "Specify the size of the cell. The prop defaults to the value ('medium') inherited from the parent Table component.",
              "description_zh": "Specify the size of the cell. The prop defaults to the value ('medium') inherited from the parent Table component.",
              "default": "-",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "sortDirection": {
              "description": "Set aria-sort direction.",
              "description_zh": "Set aria-sort direction.",
              "default": "-",
              "value": "",
              "type": "asc| desc| false",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "Specify the cell type. The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.",
              "description_zh": "Specify the cell type. The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.",
              "default": "-",
              "value": "",
              "type": "body| footer| head| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-cell/",
      "link_zh": "https://mui.com/material-ui/api/table-cell/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableCell"
  },
  {
      "name": "TableContainer",
      "props": {
          "children": {
              "description": "The content of the component, normally Table.",
              "description_zh": "The content of the component, normally Table.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-container/",
      "link_zh": "https://mui.com/material-ui/api/table-container/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableContainer"
  },
  {
      "name": "TableFooter",
      "props": {
          "children": {
              "description": "The content of the component, normally TableRow.",
              "description_zh": "The content of the component, normally TableRow.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-footer/",
      "link_zh": "https://mui.com/material-ui/api/table-footer/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableFooter"
  },
  {
      "name": "TableHead",
      "props": {
          "children": {
              "description": "The content of the component, normally TableRow.",
              "description_zh": "The content of the component, normally TableRow.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-head/",
      "link_zh": "https://mui.com/material-ui/api/table-head/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableHead"
  },
  {
      "name": "TablePagination",
      "props": {
          "count": {
              "description": "The total number of rows.To enable server side pagination for an unknown number of items, provide -1.",
              "description_zh": "The total number of rows.To enable server side pagination for an unknown number of items, provide -1.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": true
          },
          "onPageChange": {
              "description": "Callback fired when the page is changed.Signature:function(event: React.MouseEvent | null, page: number) => voidevent The event source of the callback.page The page selected.",
              "description_zh": "Callback fired when the page is changed.Signature:function(event: React.MouseEvent | null, page: number) => voidevent The event source of the callback.page The page selected.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": true
          },
          "page": {
              "description": "The zero-based index of the current page.",
              "description_zh": "The zero-based index of the current page.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": true
          },
          "rowsPerPage": {
              "description": "The number of rows per page.Set -1 to display all the rows.",
              "description_zh": "The number of rows per page.Set -1 to display all the rows.",
              "default": "-",
              "value": "",
              "type": "integer",
              "required": true
          },
          "ActionsComponent": {
              "description": "The component used for displaying the actions. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for displaying the actions. Either a string to use a HTML element or a component.",
              "default": "TablePaginationActions",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "backIconButtonProps": {
              "description": "Props applied to the back arrow IconButton component.This prop is an alias for slotProps.actions.previousButton and will be overriden by it if both are used.Deprecated - Use slotProps.actions.previousButton instead.",
              "description_zh": "Props applied to the back arrow IconButton component.This prop is an alias for slotProps.actions.previousButton and will be overriden by it if both are used.Deprecated - Use slotProps.actions.previousButton instead.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "getItemAriaLabel": {
              "description": "Accepts a function which returns a string value that provides a user-friendly name for the current page. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(type: string) => stringtype The link or button type to format ('first' | 'last' | 'next' | 'previous').",
              "description_zh": "Accepts a function which returns a string value that provides a user-friendly name for the current page. This is important for screen reader users.For localization purposes, you can use the provided translations.Signature:function(type: string) => stringtype The link or button type to format ('first' | 'last' | 'next' | 'previous').",
              "default": "function defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}",
              "value": "",
              "type": "func",
              "required": false
          },
          "labelDisplayedRows": {
              "description": "Customize the displayed rows label. Invoked with a { from, to, count, page } object.For localization purposes, you can use the provided translations.",
              "description_zh": "Customize the displayed rows label. Invoked with a { from, to, count, page } object.For localization purposes, you can use the provided translations.",
              "default": "function defaultLabelDisplayedRows({ from, to, count }) {\n  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}",
              "value": "",
              "type": "func",
              "required": false
          },
          "labelRowsPerPage": {
              "description": "Customize the rows per page label.For localization purposes, you can use the provided translations.",
              "description_zh": "Customize the rows per page label.For localization purposes, you can use the provided translations.",
              "default": "'Rows per page:'",
              "value": "",
              "type": "node",
              "required": false
          },
          "nextIconButtonProps": {
              "description": "Props applied to the next arrow IconButton element.This prop is an alias for slotProps.actions.nextButton and will be overriden by it if both are used.Deprecated - Use slotProps.actions.nextButton instead.",
              "description_zh": "Props applied to the next arrow IconButton element.This prop is an alias for slotProps.actions.nextButton and will be overriden by it if both are used.Deprecated - Use slotProps.actions.nextButton instead.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "onRowsPerPageChange": {
              "description": "Callback fired when the number of rows per page is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the number of rows per page is changed.Signature:function(event: React.ChangeEvent) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "rowsPerPageOptions": {
              "description": "Customizes the options of the rows per page select field. If less than two options are available, no select field will be displayed. Use -1 for the value with a custom label to show all the rows.",
              "description_zh": "Customizes the options of the rows per page select field. If less than two options are available, no select field will be displayed. Use -1 for the value with a custom label to show all the rows.",
              "default": "[10, 25, 50, 100]",
              "value": "",
              "type": "Array<number| { label: string, value: number }>",
              "required": false
          },
          "SelectProps": {
              "description": "Props applied to the rows per page Select element.This prop is an alias for slotProps.select and will be overriden by it if both are used.Deprecated - Use slotProps.select instead.",
              "description_zh": "Props applied to the rows per page Select element.This prop is an alias for slotProps.select and will be overriden by it if both are used.Deprecated - Use slotProps.select instead.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "showFirstButton": {
              "description": "If true, show the first-page button.",
              "description_zh": "If true, show the first-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "showLastButton": {
              "description": "If true, show the last-page button.",
              "description_zh": "If true, show the last-page button.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The props used for each slot inside the TablePagination.",
              "description_zh": "The props used for each slot inside the TablePagination.",
              "default": "{}",
              "value": "",
              "type": "{ actions?: { firstButton?: object, firstButtonIcon?: object, lastButton?: object, lastButtonIcon?: object, nextButton?: object, nextButtonIcon?: object, previousButton?: object, previousButtonIcon?: object }, select?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside the TablePagination. Either a string to use a HTML element or a component.",
              "description_zh": "The components used for each slot inside the TablePagination. Either a string to use a HTML element or a component.",
              "default": "{}",
              "value": "",
              "type": "{ actions?: { firstButton?: elementType, firstButtonIcon?: elementType, lastButton?: elementType, lastButtonIcon?: elementType, nextButton?: elementType, nextButtonIcon?: elementType, previousButton?: elementType, previousButtonIcon?: elementType } }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-pagination/",
      "link_zh": "https://mui.com/material-ui/api/table-pagination/",
      "typeDetail": {},
      "events": [
          {
              "name": "onPageChange",
              "description": "Callback fired when the page is changed.Signature:event The event source of the callback.page The page selected.",
              "description_zh": "Callback fired when the page is changed.Signature:event The event source of the callback.page The page selected.",
              "params": "function(event: React.MouseEvent | null, page: number) => void"
          },
          {
              "name": "onRowsPerPageChange",
              "description": "Callback fired when the number of rows per page is changed.Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the number of rows per page is changed.Signature:event The event source of the callback.",
              "params": "function(event: React.ChangeEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TablePagination"
  },
  {
      "name": "TableRow",
      "props": {
          "children": {
              "description": "Should be valid <tr> children such as TableCell.",
              "description_zh": "Should be valid <tr> children such as TableCell.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "hover": {
              "description": "If true, the table row will shade on hover.",
              "description_zh": "If true, the table row will shade on hover.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "selected": {
              "description": "If true, the table row will have the selected shading.",
              "description_zh": "If true, the table row will have the selected shading.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-row/",
      "link_zh": "https://mui.com/material-ui/api/table-row/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableRow"
  },
  {
      "name": "TableSortLabel",
      "props": {
          "active": {
              "description": "If true, the label will have the active styling (should be true for the sorted column).",
              "description_zh": "If true, the label will have the active styling (should be true for the sorted column).",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "Label contents, the arrow will be appended automatically.",
              "description_zh": "Label contents, the arrow will be appended automatically.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "direction": {
              "description": "The current sort direction.",
              "description_zh": "The current sort direction.",
              "default": "'asc'",
              "value": "",
              "type": "asc| desc",
              "required": false
          },
          "hideSortIcon": {
              "description": "Hide sort icon when active is false.",
              "description_zh": "Hide sort icon when active is false.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "IconComponent": {
              "description": "Sort icon to use.",
              "description_zh": "Sort icon to use.",
              "default": "ArrowDownwardIcon",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/table-sort-label/",
      "link_zh": "https://mui.com/material-ui/api/table-sort-label/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TableSortLabel"
  },
  {
      "name": "TabList",
      "props": {
          "children": {
              "description": "A list of <Tab /> elements.",
              "description_zh": "A list of <Tab /> elements.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tab-list/",
      "link_zh": "https://mui.com/material-ui/api/tab-list/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TabList"
  },
  {
      "name": "TabPanel",
      "props": {
          "value": {
              "description": "The value of the corresponding Tab. Must use the index of the Tab when no value was passed to Tab.",
              "description_zh": "The value of the corresponding Tab. Must use the index of the Tab when no value was passed to Tab.",
              "default": "",
              "value": "",
              "type": "string",
              "required": true
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tab-panel/",
      "link_zh": "https://mui.com/material-ui/api/tab-panel/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TabPanel"
  },
  {
      "name": "Tabs",
      "props": {
          "action": {
              "description": "Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: updateIndicator() and updateScrollButtons()",
              "description_zh": "Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: updateIndicator() and updateScrollButtons()",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "allowScrollButtonsMobile": {
              "description": "If true, the scroll buttons aren't forced hidden on mobile. By default the scroll buttons are hidden on mobile and takes precedence over scrollButtons.",
              "description_zh": "If true, the scroll buttons aren't forced hidden on mobile. By default the scroll buttons are hidden on mobile and takes precedence over scrollButtons.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "aria-label": {
              "description": "The label for the Tabs as a string.",
              "description_zh": "The label for the Tabs as a string.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "aria-labelledby": {
              "description": "An id or list of ids separated by a space that label the Tabs.",
              "description_zh": "An id or list of ids separated by a space that label the Tabs.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "centered": {
              "description": "If true, the tabs are centered. This prop is intended for large views.",
              "description_zh": "If true, the tabs are centered. This prop is intended for large views.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "indicatorColor": {
              "description": "Determines the color of the indicator.",
              "description_zh": "Determines the color of the indicator.",
              "default": "'primary'",
              "value": "",
              "type": "primary| secondary| string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: any) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child (number)",
              "description_zh": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: any) => voidevent The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child (number)",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "orientation": {
              "description": "The component orientation (layout flow direction).",
              "description_zh": "The component orientation (layout flow direction).",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "ScrollButtonComponent": {
              "description": "The component used to render the scroll buttons.",
              "description_zh": "The component used to render the scroll buttons.",
              "default": "TabScrollButton",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "scrollButtons": {
              "description": "Determine behavior of scroll buttons when tabs are set to scroll:\n\nauto will only present them when not all the items are visible.\ntrue will always present them.\nfalse will never present them.\n\nBy default the scroll buttons are hidden on mobile.\nThis behavior can be disabled with allowScrollButtonsMobile.\n",
              "description_zh": "Determine behavior of scroll buttons when tabs are set to scroll:\n\nauto will only present them when not all the items are visible.\ntrue will always present them.\nfalse will never present them.\n\nBy default the scroll buttons are hidden on mobile.\nThis behavior can be disabled with allowScrollButtonsMobile.\n",
              "default": "'auto'",
              "value": "",
              "type": "auto| false| true",
              "required": false
          },
          "selectionFollowsFocus": {
              "description": "If true the selected tab changes on focus. Otherwise it only changes on activation.",
              "description_zh": "If true the selected tab changes on focus. Otherwise it only changes on activation.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.",
              "default": "{}",
              "value": "",
              "type": "{ endScrollButtonIcon?: func| object, startScrollButtonIcon?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ EndScrollButtonIcon?: elementType, StartScrollButtonIcon?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "TabIndicatorProps": {
              "description": "Props applied to the tab indicator element.",
              "description_zh": "Props applied to the tab indicator element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "TabScrollButtonProps": {
              "description": "Props applied to the TabScrollButton element.",
              "description_zh": "Props applied to the TabScrollButton element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "textColor": {
              "description": "Determines the color of the Tab.",
              "description_zh": "Determines the color of the Tab.",
              "default": "'primary'",
              "value": "",
              "type": "inherit| primary| secondary",
              "required": false
          },
          "value": {
              "description": "The value of the currently selected Tab. If you don't want any selected Tab, you can set this prop to false.",
              "description_zh": "The value of the currently selected Tab. If you don't want any selected Tab, you can set this prop to false.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "variant": {
              "description": "Determines additional display behavior of the tabs:\n\nscrollable will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\nfullWidth will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\nstandard will render the default state.\n\n",
              "description_zh": "Determines additional display behavior of the tabs:\n\nscrollable will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\nfullWidth will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\nstandard will render the default state.\n\n",
              "default": "'standard'",
              "value": "",
              "type": "fullWidth| scrollable| standard",
              "required": false
          },
          "visibleScrollbar": {
              "description": "If true, the scrollbar is visible. It can be useful when displaying a long vertical list of tabs.",
              "description_zh": "If true, the scrollbar is visible. It can be useful when displaying a long vertical list of tabs.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tabs/",
      "link_zh": "https://mui.com/material-ui/api/tabs/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value changes.Signature:event The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child (number)",
              "description_zh": "Callback fired when the value changes.Signature:event The event source of the callback. Warning: This is a generic event not a change event.value We default to the index of the child (number)",
              "params": "function(event: React.SyntheticEvent, value: any) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Tabs"
  },
  {
      "name": "TabScrollButton",
      "props": {
          "direction": {
              "description": "The direction the button should indicate.",
              "description_zh": "The direction the button should indicate.",
              "default": "-",
              "value": "",
              "type": "left| right",
              "required": true
          },
          "orientation": {
              "description": "The component orientation (layout flow direction).",
              "description_zh": "The component orientation (layout flow direction).",
              "default": "-",
              "value": "",
              "type": "horizontal| vertical",
              "required": true
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.",
              "default": "{}",
              "value": "",
              "type": "{ endScrollButtonIcon?: func| object, startScrollButtonIcon?: func| object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.",
              "description_zh": "The components used for each slot inside.",
              "default": "{}",
              "value": "",
              "type": "{ EndScrollButtonIcon?: elementType, StartScrollButtonIcon?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tab-scroll-button/",
      "link_zh": "https://mui.com/material-ui/api/tab-scroll-button/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TabScrollButton"
  },
  {
      "name": "TextField",
      "props": {
          "autoComplete": {
              "description": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "description_zh": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it's more like an autofill. You can learn more about it following the specification.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "autoFocus": {
              "description": "If true, the input element is focused during the first mount.",
              "description_zh": "If true, the input element is focused during the first mount.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'primary'",
              "value": "",
              "type": "primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "defaultValue": {
              "description": "The default value. Use when the component is not controlled.",
              "description_zh": "The default value. Use when the component is not controlled.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "error": {
              "description": "If true, the label is displayed in an error state.",
              "description_zh": "If true, the label is displayed in an error state.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "FormHelperTextProps": {
              "description": "Props applied to the FormHelperText element.",
              "description_zh": "Props applied to the FormHelperText element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the input will take up the full width of its container.",
              "description_zh": "If true, the input will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "helperText": {
              "description": "The helper text content.",
              "description_zh": "The helper text content.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "id": {
              "description": "The id of the input element. Use this prop to make label and helperText accessible for screen readers.",
              "description_zh": "The id of the input element. Use this prop to make label and helperText accessible for screen readers.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "InputLabelProps": {
              "description": "Props applied to the InputLabel element. Pointer events like onClick are enabled if and only if shrink is true.",
              "description_zh": "Props applied to the InputLabel element. Pointer events like onClick are enabled if and only if shrink is true.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputProps": {
              "description": "Attributes applied to the input element.",
              "description_zh": "Attributes applied to the input element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "InputProps": {
              "description": "Props applied to the Input element. It will be a FilledInput, OutlinedInput or Input component depending on the variant prop value.",
              "description_zh": "Props applied to the Input element. It will be a FilledInput, OutlinedInput or Input component depending on the variant prop value.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "inputRef": {
              "description": "Pass a ref to the input element.",
              "description_zh": "Pass a ref to the input element.",
              "default": "-",
              "value": "",
              "type": "ref",
              "required": false
          },
          "label": {
              "description": "The label content.",
              "description_zh": "The label content.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "margin": {
              "description": "If dense or normal, will adjust vertical spacing of this and contained components.",
              "description_zh": "If dense or normal, will adjust vertical spacing of this and contained components.",
              "default": "'none'",
              "value": "",
              "type": "dense| none| normal",
              "required": false
          },
          "maxRows": {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "description_zh": "Maximum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "minRows": {
              "description": "Minimum number of rows to display when multiline option is set to true.",
              "description_zh": "Minimum number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "multiline": {
              "description": "If true, a textarea element is rendered instead of an input.",
              "description_zh": "If true, a textarea element is rendered instead of an input.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "name": {
              "description": "Name attribute of the input element.",
              "description_zh": "Name attribute of the input element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value is changed.Signature:function(event: object) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:function(event: object) => voidevent The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "placeholder": {
              "description": "The short hint displayed in the input before the user enters a value.",
              "description_zh": "The short hint displayed in the input before the user enters a value.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "required": {
              "description": "If true, the label is displayed as required and the input element is required.",
              "description_zh": "If true, the label is displayed as required and the input element is required.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "rows": {
              "description": "Number of rows to display when multiline option is set to true.",
              "description_zh": "Number of rows to display when multiline option is set to true.",
              "default": "-",
              "value": "",
              "type": "number| string",
              "required": false
          },
          "select": {
              "description": "Render a Select element while passing the Input element to Select as input parameter. If this option is set you must pass the options of the select as children.",
              "description_zh": "Render a Select element while passing the Input element to Select as input parameter. If this option is set you must pass the options of the select as children.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "SelectProps": {
              "description": "Props applied to the Select element.",
              "description_zh": "Props applied to the Select element.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "-",
              "value": "",
              "type": "medium| small| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "type": {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "description_zh": "Type of the input element. It should be a valid HTML5 input type.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "value": {
              "description": "The value of the input element, required for a controlled component.",
              "description_zh": "The value of the input element, required for a controlled component.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'outlined'",
              "value": "",
              "type": "filled| outlined| standard",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/text-field/",
      "link_zh": "https://mui.com/material-ui/api/text-field/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "description_zh": "Callback fired when the value is changed.Signature:event The event source of the callback. You can pull out the new value by accessing event.target.value (string).",
              "params": "function(event: object) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TextField"
  },
  {
      "name": "Timeline",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "className": {
              "description": "className applied to the root element.",
              "description_zh": "className applied to the root element.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "position": {
              "description": "The position where the TimelineContent should appear relative to the time axis.",
              "description_zh": "The position where the TimelineContent should appear relative to the time axis.",
              "default": "'right'",
              "value": "",
              "type": "alternate-reverse| alternate| left| right",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline/",
      "link_zh": "https://mui.com/material-ui/api/timeline/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Timeline"
  },
  {
      "name": "TimelineConnector",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-connector/",
      "link_zh": "https://mui.com/material-ui/api/timeline-connector/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineConnector"
  },
  {
      "name": "TimelineContent",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-content/",
      "link_zh": "https://mui.com/material-ui/api/timeline-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineContent"
  },
  {
      "name": "TimelineDot",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The dot can have a different colors.",
              "description_zh": "The dot can have a different colors.",
              "default": "'grey'",
              "value": "",
              "type": "error| grey| info| inherit| primary| secondary| success| warning| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The dot can appear filled or outlined.",
              "description_zh": "The dot can appear filled or outlined.",
              "default": "'filled'",
              "value": "",
              "type": "filled| outlined| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-dot/",
      "link_zh": "https://mui.com/material-ui/api/timeline-dot/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineDot"
  },
  {
      "name": "TimelineItem",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "position": {
              "description": "The position where the timeline's item should appear.",
              "description_zh": "The position where the timeline's item should appear.",
              "default": "",
              "value": "",
              "type": "alternate-reverse| alternate| left| right",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-item/",
      "link_zh": "https://mui.com/material-ui/api/timeline-item/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineItem"
  },
  {
      "name": "TimelineOppositeContent",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-opposite-content/",
      "link_zh": "https://mui.com/material-ui/api/timeline-opposite-content/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineOppositeContent"
  },
  {
      "name": "TimelineSeparator",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "",
              "value": "",
              "type": "object",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/timeline-separator/",
      "link_zh": "https://mui.com/material-ui/api/timeline-separator/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "TimelineSeparator"
  },
  {
      "name": "ToggleButton",
      "props": {
          "value": {
              "description": "The value to associate with the button when selected in a ToggleButtonGroup.",
              "description_zh": "The value to associate with the button when selected in a ToggleButtonGroup.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": true
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the button when it is in an active state. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the button when it is in an active state. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'standard'",
              "value": "",
              "type": "standard| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled.",
              "description_zh": "If true, the component is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusRipple": {
              "description": "If true, the  keyboard focus ripple is disabled.",
              "description_zh": "If true, the  keyboard focus ripple is disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableRipple": {
              "description": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "description_zh": "If true, the ripple effect is disabled.⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the .Mui-focusVisible class.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the button will take up the full width of its container.",
              "description_zh": "If true, the button will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the state changes.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected button.",
              "description_zh": "Callback fired when the state changes.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected button.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onClick": {
              "description": "Callback fired when the button is clicked.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected button.",
              "description_zh": "Callback fired when the button is clicked.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected button.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "selected": {
              "description": "If true, the button is rendered in an active state.",
              "description_zh": "If true, the button is rendered in an active state.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "size": {
              "description": "The size of the component. The prop defaults to the value inherited from the parent ToggleButtonGroup component.",
              "description_zh": "The size of the component. The prop defaults to the value inherited from the parent ToggleButtonGroup component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/toggle-button/",
      "link_zh": "https://mui.com/material-ui/api/toggle-button/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the state changes.Signature:event The event source of the callback.value of the selected button.",
              "description_zh": "Callback fired when the state changes.Signature:event The event source of the callback.value of the selected button.",
              "params": "function(event: React.MouseEvent, value: any) => void"
          },
          {
              "name": "onClick",
              "description": "Callback fired when the button is clicked.Signature:event The event source of the callback.value of the selected button.",
              "description_zh": "Callback fired when the button is clicked.Signature:event The event source of the callback.value of the selected button.",
              "params": "function(event: React.MouseEvent, value: any) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ToggleButton"
  },
  {
      "name": "ToggleButtonGroup",
      "props": {
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "color": {
              "description": "The color of the button when it is selected. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "description_zh": "The color of the button when it is selected. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
              "default": "'standard'",
              "value": "",
              "type": "standard| primary| secondary| error| info| success| warning| string",
              "required": false
          },
          "disabled": {
              "description": "If true, the component is disabled. This implies that all ToggleButton children will be disabled.",
              "description_zh": "If true, the component is disabled. This implies that all ToggleButton children will be disabled.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "exclusive": {
              "description": "If true, only allow one of the child ToggleButton values to be selected.",
              "description_zh": "If true, only allow one of the child ToggleButton values to be selected.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "fullWidth": {
              "description": "If true, the button group will take up the full width of its container.",
              "description_zh": "If true, the button group will take up the full width of its container.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "onChange": {
              "description": "Callback fired when the value changes.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected buttons. When exclusive is true this is a single value; when false an array of selected values. If no value is selected and exclusive is true the value is null; when false an empty array.",
              "description_zh": "Callback fired when the value changes.Signature:function(event: React.MouseEvent, value: any) => voidevent The event source of the callback.value of the selected buttons. When exclusive is true this is a single value; when false an array of selected values. If no value is selected and exclusive is true the value is null; when false an empty array.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "orientation": {
              "description": "The component orientation (layout flow direction).",
              "description_zh": "The component orientation (layout flow direction).",
              "default": "'horizontal'",
              "value": "",
              "type": "horizontal| vertical",
              "required": false
          },
          "size": {
              "description": "The size of the component.",
              "description_zh": "The size of the component.",
              "default": "'medium'",
              "value": "",
              "type": "small| medium| large| string",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "value": {
              "description": "The currently selected value within the group or an array of selected values when exclusive is false.The value must have reference equality with the option in order to be selected.",
              "description_zh": "The currently selected value within the group or an array of selected values when exclusive is false.The value must have reference equality with the option in order to be selected.",
              "default": "-",
              "value": "",
              "type": "any",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/toggle-button-group/",
      "link_zh": "https://mui.com/material-ui/api/toggle-button-group/",
      "typeDetail": {},
      "events": [
          {
              "name": "onChange",
              "description": "Callback fired when the value changes.Signature:event The event source of the callback.value of the selected buttons. When exclusive is true this is a single value; when false an array of selected values. If no value is selected and exclusive is true the value is null; when false an empty array.",
              "description_zh": "Callback fired when the value changes.Signature:event The event source of the callback.value of the selected buttons. When exclusive is true this is a single value; when false an array of selected values. If no value is selected and exclusive is true the value is null; when false an empty array.",
              "params": "function(event: React.MouseEvent, value: any) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "ToggleButtonGroup"
  },
  {
      "name": "Toolbar",
      "props": {
          "children": {
              "description": "The Toolbar children, usually a mixture of IconButton, Button and Typography. The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.",
              "description_zh": "The Toolbar children, usually a mixture of IconButton, Button and Typography. The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "disableGutters": {
              "description": "If true, disables gutter padding.",
              "description_zh": "If true, disables gutter padding.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "The variant to use.",
              "description_zh": "The variant to use.",
              "default": "'regular'",
              "value": "",
              "type": "dense| regular| string",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/toolbar/",
      "link_zh": "https://mui.com/material-ui/api/toolbar/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Toolbar"
  },
  {
      "name": "Tooltip",
      "props": {
          "children": {
              "description": "Tooltip reference element.This needs to be able to hold a ref.",
              "description_zh": "Tooltip reference element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "arrow": {
              "description": "If true, adds an arrow to the tooltip.",
              "description_zh": "If true, adds an arrow to the tooltip.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "components": {
              "description": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the slots prop. It's recommended to use the slots prop instead.",
              "default": "{}",
              "value": "",
              "type": "{ Arrow?: elementType, Popper?: elementType, Tooltip?: elementType, Transition?: elementType }",
              "required": false
          },
          "componentsProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the slotProps prop. It's recommended to use the slotProps prop instead, as componentsProps will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ arrow?: object, popper?: object, tooltip?: object, transition?: object }",
              "required": false
          },
          "describeChild": {
              "description": "Set to true if the title acts as an accessible description. By default the title acts as an accessible label for the child.",
              "description_zh": "Set to true if the title acts as an accessible description. By default the title acts as an accessible label for the child.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableFocusListener": {
              "description": "Do not respond to focus-visible events.",
              "description_zh": "Do not respond to focus-visible events.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableHoverListener": {
              "description": "Do not respond to hover events.",
              "description_zh": "Do not respond to hover events.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableInteractive": {
              "description": "Makes a tooltip not interactive, i.e. it will close when the user hovers over the tooltip before the leaveDelay is expired.",
              "description_zh": "Makes a tooltip not interactive, i.e. it will close when the user hovers over the tooltip before the leaveDelay is expired.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "disableTouchListener": {
              "description": "Do not respond to long press touch events.",
              "description_zh": "Do not respond to long press touch events.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "enterDelay": {
              "description": "The number of milliseconds to wait before showing the tooltip. This prop won't impact the enter touch delay (enterTouchDelay).",
              "description_zh": "The number of milliseconds to wait before showing the tooltip. This prop won't impact the enter touch delay (enterTouchDelay).",
              "default": "100",
              "value": "",
              "type": "number",
              "required": false
          },
          "enterNextDelay": {
              "description": "The number of milliseconds to wait before showing the tooltip when one was already recently opened.",
              "description_zh": "The number of milliseconds to wait before showing the tooltip when one was already recently opened.",
              "default": "0",
              "value": "",
              "type": "number",
              "required": false
          },
          "enterTouchDelay": {
              "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
              "description_zh": "The number of milliseconds a user must touch the element before showing the tooltip.",
              "default": "700",
              "value": "",
              "type": "number",
              "required": false
          },
          "followCursor": {
              "description": "If true, the tooltip follow the cursor over the wrapped element.",
              "description_zh": "If true, the tooltip follow the cursor over the wrapped element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "id": {
              "description": "This prop is used to help implement the accessibility logic. If you don't provide this prop. It falls back to a randomly generated id.",
              "description_zh": "This prop is used to help implement the accessibility logic. If you don't provide this prop. It falls back to a randomly generated id.",
              "default": "-",
              "value": "",
              "type": "string",
              "required": false
          },
          "leaveDelay": {
              "description": "The number of milliseconds to wait before hiding the tooltip. This prop won't impact the leave touch delay (leaveTouchDelay).",
              "description_zh": "The number of milliseconds to wait before hiding the tooltip. This prop won't impact the leave touch delay (leaveTouchDelay).",
              "default": "0",
              "value": "",
              "type": "number",
              "required": false
          },
          "leaveTouchDelay": {
              "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
              "description_zh": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
              "default": "1500",
              "value": "",
              "type": "number",
              "required": false
          },
          "onClose": {
              "description": "Callback fired when the component requests to be closed.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "onOpen": {
              "description": "Callback fired when the component requests to be open.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be open.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "open": {
              "description": "If true, the component is shown.",
              "description_zh": "If true, the component is shown.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "placement": {
              "description": "Tooltip placement.",
              "description_zh": "Tooltip placement.",
              "default": "'bottom'",
              "value": "",
              "type": "bottom-end| bottom-start| bottom| left-end| left-start| left| right-end| right-start| right| top-end| top-start| top",
              "required": false
          },
          "PopperComponent": {
              "description": "The component used for the popper.",
              "description_zh": "The component used for the popper.",
              "default": "Popper",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "PopperProps": {
              "description": "Props applied to the Popper element.",
              "description_zh": "Props applied to the Popper element.",
              "default": "{}",
              "value": "",
              "type": "object",
              "required": false
          },
          "slotProps": {
              "description": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "description_zh": "The extra props for the slot components. You can override the existing props or add new ones.This prop is an alias for the componentsProps prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ arrow?: object, popper?: object, tooltip?: object, transition?: object }",
              "required": false
          },
          "slots": {
              "description": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "description_zh": "The components used for each slot inside.This prop is an alias for the components prop, which will be deprecated in the future.",
              "default": "{}",
              "value": "",
              "type": "{ arrow?: elementType, popper?: elementType, tooltip?: elementType, transition?: elementType }",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "title": {
              "description": "Tooltip title. Zero-length titles string, undefined, null and false are never displayed.",
              "description_zh": "Tooltip title. Zero-length titles string, undefined, null and false are never displayed.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "TransitionComponent": {
              "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "description_zh": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
              "default": "Grow",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "TransitionProps": {
              "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "description_zh": "Props applied to the transition element. By default, the element is based on this Transition component.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/tooltip/",
      "link_zh": "https://mui.com/material-ui/api/tooltip/",
      "typeDetail": {},
      "events": [
          {
              "name": "onClose",
              "description": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be closed.Signature:event The event source of the callback.",
              "params": "function(event: React.SyntheticEvent) => void"
          },
          {
              "name": "onOpen",
              "description": "Callback fired when the component requests to be open.Signature:event The event source of the callback.",
              "description_zh": "Callback fired when the component requests to be open.Signature:event The event source of the callback.",
              "params": "function(event: React.SyntheticEvent) => void"
          }
      ],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Tooltip"
  },
  {
      "name": "Typography",
      "props": {
          "align": {
              "description": "Set the text-align on the component.",
              "description_zh": "Set the text-align on the component.",
              "default": "'inherit'",
              "value": "",
              "type": "center| inherit| justify| left| right",
              "required": false
          },
          "children": {
              "description": "The content of the component.",
              "description_zh": "The content of the component.",
              "default": "-",
              "value": "",
              "type": "node",
              "required": false
          },
          "classes": {
              "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "description_zh": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
              "default": "-",
              "value": "",
              "type": "object",
              "required": false
          },
          "component": {
              "description": "The component used for the root node. Either a string to use a HTML element or a component.",
              "description_zh": "The component used for the root node. Either a string to use a HTML element or a component.",
              "default": "-",
              "value": "",
              "type": "elementType",
              "required": false
          },
          "gutterBottom": {
              "description": "If true, the text will have a bottom margin.",
              "description_zh": "If true, the text will have a bottom margin.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "noWrap": {
              "description": "If true, the text will not wrap, but instead will truncate with a text overflow ellipsis.Note that text overflow can only happen with block or inline-block level elements (the element needs to have a width in order to overflow).",
              "description_zh": "If true, the text will not wrap, but instead will truncate with a text overflow ellipsis.Note that text overflow can only happen with block or inline-block level elements (the element needs to have a width in order to overflow).",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "paragraph": {
              "description": "If true, the element will be a paragraph element.",
              "description_zh": "If true, the element will be a paragraph element.",
              "default": "false",
              "value": "",
              "type": "bool",
              "required": false
          },
          "sx": {
              "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "description_zh": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
              "default": "-",
              "value": "",
              "type": "Array<func| object| bool>| func| object",
              "required": false
          },
          "variant": {
              "description": "Applies the theme typography styles.",
              "description_zh": "Applies the theme typography styles.",
              "default": "'body1'",
              "value": "",
              "type": "body1| body2| button| caption| h1| h2| h3| h4| h5| h6| inherit| overline| subtitle1| subtitle2| string",
              "required": false
          },
          "variantMapping": {
              "description": "The component maps the variant prop to a range of different HTML element types. For instance, subtitle1 to <h6>. If you wish to change that mapping, you can provide your own. Alternatively, you can use the component prop.",
              "description_zh": "The component maps the variant prop to a range of different HTML element types. For instance, subtitle1 to <h6>. If you wish to change that mapping, you can provide your own. Alternatively, you can use the component prop.",
              "default": "{\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p',\n}",
              "value": "",
              "type": "object",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/typography/",
      "link_zh": "https://mui.com/material-ui/api/typography/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Typography"
  },
  {
      "name": "Zoom",
      "props": {
          "children": {
              "description": "A single child content element.This needs to be able to hold a ref.",
              "description_zh": "A single child content element.This needs to be able to hold a ref.",
              "default": "-",
              "value": "",
              "type": "element",
              "required": true
          },
          "addEndListener": {
              "description": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "description_zh": "Add a custom transition end trigger. Called with the transitioning DOM node and a done callback. Allows for more fine grained transition end logic. Note: Timeouts are still used as a fallback if provided.",
              "default": "-",
              "value": "",
              "type": "func",
              "required": false
          },
          "appear": {
              "description": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "description_zh": "Perform the enter transition when it first mounts if in is also true. Set this to false to disable this behavior.",
              "default": "true",
              "value": "",
              "type": "bool",
              "required": false
          },
          "easing": {
              "description": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "description_zh": "The transition timing function. You may specify a single easing or a object containing enter and exit values.",
              "default": "-",
              "value": "",
              "type": "{ enter?: string, exit?: string }| string",
              "required": false
          },
          "in": {
              "description": "If true, the component will transition in.",
              "description_zh": "If true, the component will transition in.",
              "default": "-",
              "value": "",
              "type": "bool",
              "required": false
          },
          "timeout": {
              "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "description_zh": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
              "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
              "value": "",
              "type": "number| { appear?: number, enter?: number, exit?: number }",
              "required": false
          }
      },
      "link": "https://mui.com/material-ui/api/zoom/",
      "link_zh": "https://mui.com/material-ui/api/zoom/",
      "typeDetail": {},
      "events": [],
      "methods": [],
      "slots": [],
      "suggestions": [],
      "filename": "Zoom"
  }
]
