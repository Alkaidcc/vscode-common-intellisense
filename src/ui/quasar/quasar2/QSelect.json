{
  "name": "QSelect",
  "methods": [
    {
      "name": "focus",
      "description": "Focus component",
      "params": ""
    },
    {
      "name": "showPopup",
      "description": "Focus and open popup",
      "params": ""
    },
    {
      "name": "hidePopup",
      "description": "Hide popup",
      "params": ""
    },
    {
      "name": "removeAtIndex",
      "description": "Remove selected option located at specific index",
      "params": "(index: Number) => void"
    },
    {
      "name": "add",
      "description": "Adds option to model",
      "params": "(opt: Any, unique: Boolean) => void"
    },
    {
      "name": "toggleOption",
      "description": "Add/remove option from model",
      "params": "(opt: Any, keepOpen: Boolean) => void"
    },
    {
      "name": "getOptionIndex",
      "description": "Gets current focused option index from menu; It's -1 if no option is focused",
      "params": ""
    },
    {
      "name": "setOptionIndex",
      "description": "Sets option from menu as 'focused'; -1 to focus none",
      "params": "(index: Number) => void"
    },
    {
      "name": "moveOptionSelection",
      "description": "Move selected option from menu by index offset",
      "params": "(offset: Number, skipInputValue: Boolean) => void"
    },
    {
      "name": "filter",
      "description": "Filter options",
      "params": "(value: String) => void"
    },
    {
      "name": "updateMenuPosition",
      "description": "Recomputes menu position",
      "params": ""
    },
    {
      "name": "updateInputValue",
      "description": "If 'use-input' is specified, this updates the value that it holds",
      "params": "(value: String, noFilter: Boolean) => void"
    },
    {
      "name": "isOptionSelected",
      "description": "Tells if an option is selected",
      "params": "(opt: Any) => Boolean"
    },
    {
      "name": "getEmittingOptionValue",
      "description": "Get the model value that would be emitted by QSelect when selecting a said option; Also takes into consideration if 'emit-value' is set",
      "params": "(opt: Any) => Any"
    },
    {
      "name": "getOptionValue",
      "description": "Get the model value of an option; Takes into consideration 'option-value' (if used), but does not looks for 'emit-value', like getEmittingOptionValue() does",
      "params": "(opt: Any) => Any"
    },
    {
      "name": "getOptionLabel",
      "description": "Get the label of an option; Takes into consideration the 'option-label' prop (if used)",
      "params": "(opt: Any) => Any"
    },
    {
      "name": "isOptionDisabled",
      "description": "Tells if an option is disabled; Takes into consideration 'option-disable' prop (if used)",
      "params": "(opt: Any) => Boolean"
    }
  ],
  "events": [
    {
      "name": "update:model-value",
      "description": "",
      "params": ""
    },
    {
      "name": "input-value",
      "description": "Emitted when the value in the text input changes",
      "params": "(value: String) => void"
    },
    {
      "name": "remove",
      "description": "Emitted when an option is removed from selection",
      "params": "(details: Object) => void"
    },
    {
      "name": "add",
      "description": "Emitted when an option is added to the selection",
      "params": "(details: Object) => void"
    },
    {
      "name": "new-value",
      "description": "Enables creation of new values; Emitted when a new value has been created; You can override 'new-value-mode' property with it",
      "params": "(inputValue: String, doneFn: Function) => void"
    },
    {
      "name": "filter",
      "description": "Emitted when user wants to filter a value",
      "params": "(inputValue: String, doneFn: Function, abortFn: Function) => void"
    },
    {
      "name": "filter-abort",
      "description": "Emitted when a filtering was aborted; Probably a new one was requested?",
      "params": ""
    },
    {
      "name": "popup-show",
      "description": "Emitted when the select options menu or dialog is shown.",
      "params": "(evt: undefined) => void"
    },
    {
      "name": "popup-hide",
      "description": "Emitted when the select options menu or dialog is hidden.",
      "params": "(evt: undefined) => void"
    },
    {
      "name": "virtual-scroll",
      "description": "",
      "params": "(details: undefined) => void"
    }
  ],
  "props": {
    "model-value": {
      "value": "",
      "type": "Any",
      "description": "",
      "default": "",
      "extends": "model-value",
      "desc": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
      "examples": [
        "v-model=\"myModel\""
      ]
    },
    "multiple": {
      "value": "",
      "type": "Boolean",
      "description": "Allow multiple selection; Model must be Array",
      "default": "false"
    },
    "display-value": {
      "value": "",
      "type": [
        "Number",
        "String"
      ],
      "description": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop",
      "default": ""
    },
    "display-value-html": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "",
      "extends": "html",
      "desc": "Force render the selected option(s) as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'selected' or 'selected-item' slots!",
      "category": "selection"
    },
    "options": {
      "value": "",
      "type": "Array",
      "description": "Available options that the user can select from. For best performance freeze the list of options.",
      "default": "[]"
    },
    "option-value": {
      "value": "",
      "type": [
        "Function",
        "String"
      ],
      "description": "Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline",
      "default": "value"
    },
    "option-label": {
      "value": "",
      "type": [
        "Function",
        "String"
      ],
      "description": "Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline",
      "default": "label"
    },
    "option-disable": {
      "value": "",
      "type": [
        "Function",
        "String"
      ],
      "description": "Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline",
      "default": "disable"
    },
    "hide-selected": {
      "value": "",
      "type": "Boolean",
      "description": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects",
      "default": "false"
    },
    "hide-dropdown-icon": {
      "value": "",
      "type": "Boolean",
      "description": "Hides dropdown icon",
      "default": "false"
    },
    "dropdown-icon": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "",
      "extends": "icon"
    },
    "max-values": {
      "value": "",
      "type": [
        "Number",
        "String"
      ],
      "description": "Allow a maximum number of selections that the user can do",
      "default": ""
    },
    "options-dense": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "",
      "extends": "dense",
      "desc": "Dense mode for options list; occupies less space",
      "category": "options"
    },
    "options-dark": {
      "value": "",
      "type": "Boolean",
      "description": "Options menu will be colored with a dark color",
      "default": "false"
    },
    "options-selected-class": {
      "value": "",
      "type": "String",
      "description": "CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value)",
      "default": ""
    },
    "options-html": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "",
      "extends": "html",
      "desc": "Force render the options as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'option' slot!",
      "category": "options"
    },
    "options-cover": {
      "value": "",
      "type": "Boolean",
      "description": "Expanded menu will cover the component (will not work along with 'use-input' prop for obvious reasons)",
      "default": "false"
    },
    "menu-shrink": {
      "value": "",
      "type": "Boolean",
      "description": "Allow the options list to be narrower than the field (only in menu mode)",
      "default": "false"
    },
    "menu-anchor": {
      "value": "",
      "type": "String",
      "description": "Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode)",
      "default": ""
    },
    "menu-self": {
      "value": "",
      "type": "String",
      "description": "Two values setting the options list's own position relative to its target (only in menu mode)",
      "default": ""
    },
    "menu-offset": {
      "value": "",
      "type": "Array",
      "description": "An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode)",
      "default": ""
    },
    "popup-content-class": {
      "value": "",
      "type": "String",
      "description": "Class definitions to be attributed to the popup content",
      "default": ""
    },
    "popup-content-style": {
      "value": "",
      "type": [
        "String",
        "Array",
        "Object"
      ],
      "description": "Style definitions to be attributed to the popup content",
      "default": ""
    },
    "use-input": {
      "value": "",
      "type": "Boolean",
      "description": "Use an input tag where users can type",
      "default": "false"
    },
    "use-chips": {
      "value": "",
      "type": "Boolean",
      "description": "Use QChip to show what is currently selected",
      "default": "false"
    },
    "fill-input": {
      "value": "",
      "type": "Boolean",
      "description": "Fills the input with current value; Useful along with 'hide-selected'; Does NOT works along with 'multiple' selection",
      "default": "false"
    },
    "new-value-mode": {
      "value": "",
      "type": "String",
      "description": "Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for @new-value becomes optional (only to override the behavior defined by 'new-value-mode')",
      "default": ""
    },
    "map-options": {
      "value": "",
      "type": "Boolean",
      "description": "Try to map labels of model from 'options' Array; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value;  Refer to the 'Affecting model' section above",
      "default": "false"
    },
    "emit-value": {
      "value": "",
      "type": "Boolean",
      "description": "Update model with the value of the selected option instead of the whole option",
      "default": "false"
    },
    "input-debounce": {
      "value": "",
      "type": [
        "Number",
        "String"
      ],
      "description": "Debounce the input model update with an amount of milliseconds",
      "default": 500
    },
    "input-class": {
      "value": "",
      "type": [
        "String",
        "Array",
        "Object"
      ],
      "description": "Class definitions to be attributed to the underlying input tag",
      "default": ""
    },
    "input-style": {
      "value": "",
      "type": [
        "String",
        "Array",
        "Object"
      ],
      "description": "Style definitions to be attributed to the underlying input tag",
      "default": ""
    },
    "tabindex": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "",
      "extends": "tabindex"
    },
    "autocomplete": {
      "value": "",
      "type": "String",
      "description": "Autocomplete attribute for field",
      "default": ""
    },
    "transition-show": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "fade",
      "extends": "transition",
      "desc": "Transition when showing the menu/dialog; One of Quasar's embedded transitions",
      "category": "behavior"
    },
    "transition-hide": {
      "value": "",
      "type": "String",
      "description": "",
      "default": "fade",
      "extends": "transition",
      "desc": "Transition when hiding the menu/dialog; One of Quasar's embedded transitions",
      "category": "behavior"
    },
    "transition-duration": {
      "value": "",
      "type": [
        "String",
        "Number"
      ],
      "description": "Transition duration when hiding the menu/dialog (in milliseconds, without unit)",
      "default": 300
    },
    "behavior": {
      "value": "",
      "type": "String",
      "description": "Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles",
      "default": "default"
    }
  },
  "link": "https://v2.quasar.dev/vue-components/select"
}
