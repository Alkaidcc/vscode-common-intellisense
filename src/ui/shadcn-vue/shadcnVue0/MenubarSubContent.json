{
  "name": "MenubarSubContent",
  "props": {
    "loop": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "When true, keyboard navigation will loop from last item to first, and vice versa.",
      "description_zh": ""
    },
    "forceMount": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Used to force mounting when more control is needed. Useful when controlling animation with Vue.js animation libraries. It inherits from{' '} MenubarPortal.",
      "description_zh": ""
    },
    ":sideOffset": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "span>The distance in pixels from the trigger.",
      "description_zh": ""
    },
    ":alignOffset": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "An offset in pixels from the \"start\" or \"end\" alignment options.",
      "description_zh": ""
    },
    "avoidCollisions": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "When true, overrides the side and align preferences to prevent collisions with boundary edges.",
      "description_zh": ""
    },
    "collisionBoundary": {
      "default": "[]",
      "value": "",
      "type": "Element | null | Array<Element | null>",
      "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
      "description_zh": ""
    },
    "collisionPadding": {
      "default": "0",
      "value": "",
      "type": "number | Partial<Record<Side, number>>",
      "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: { top: 20, left: 20 }.",
      "description_zh": ""
    },
    "arrowPadding": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "The padding between the arrow and the edges of the content. If your content has border-radius, this will prevent it from overflowing the corners.",
      "description_zh": ""
    },
    "sticky": {
      "default": "\"partial\"",
      "value": ["partial", "always"],
      "type": "\"partial\" | \"always\"",
      "description": "The sticky behavior on the align axis. \"partial\" will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst \"always\" will keep the content in the boundary regardless.",
      "description_zh": ""
    },
    "hideWhenDetached": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to hide the content when the trigger becomes fully occluded.",
      "description_zh": ""
    },
    "as": {
      "default": "div",
      "value": "",
      "type": "string | Component",
      "description": "The element or component this component should render as. Can be overwrite by asChild",
      "description_zh": ""
    },
    "asChild": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.",
      "description_zh": ""
    }
  },
  "events": [{
    "name": "escapeKeyDown",
    "params": "(event: KeyboardEvent) => void",
    "description": "Event handler called when the escape key is down. It can be prevented by calling event.preventDefault.",
    "description_zh": ""
  }, {
    "name": "pointerDownOutside",
    "params": "(event: PointerDownOutsideEvent) => void",
    "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling event.preventDefault.",
    "description_zh": ""
  }, {
    "name": "focusOutside",
    "params": "(event: FocusOutsideEvent) => void",
    "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling event.preventDefault.",
    "description_zh": ""
  }, {
    "name": "interactOutside",
    "params": "(event: FocusEvent | MouseEvent | TouchEvent) => void",
    "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling event.preventDefault.",
    "description_zh": ""
  }],
  "methods": [],
  "link": "https://www.radix-vue.com/components/menubar.html#root",
  "link_zh": "https://www.radix-vue.com/components/menubar.html#root"
}
