{
  "name": "DateRangePickerContent",
  "props": {
    "align": {
      "default": "",
      "value": "",
      "type": "start | center | end",
      "description": "The preferred alignment against the trigger.\nMay change when collisions occur.\n",
      "description_zh": "The preferred alignment against the trigger.\nMay change when collisions occur.\n"
    },
    "alignOffset": {
      "default": "",
      "value": "",
      "type": "number",
      "description": "An offset in pixels from the start or end alignment options.\n",
      "description_zh": "An offset in pixels from the start or end alignment options.\n"
    },
    "arrowPadding": {
      "default": "",
      "value": "",
      "type": "number",
      "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.\n",
      "description_zh": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.\n"
    },
    "as": {
      "default": "div",
      "value": "",
      "type": "AsTag | Component",
      "description": "The element or component this component should render as. Can be overwrite by asChild\n",
      "description_zh": "The element or component this component should render as. Can be overwrite by asChild\n"
    },
    "asChild": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.\nRead our Composition guide for more details.\n",
      "description_zh": "Change the default rendered element for the one passed as a child, merging their props and behavior.\nRead our Composition guide for more details.\n"
    },
    "avoidCollisions": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "When true, overrides the side andalign preferences\nto prevent collisions with boundary edges.\n",
      "description_zh": "When true, overrides the side andalign preferences\nto prevent collisions with boundary edges.\n"
    },
    "collisionBoundary": {
      "default": "",
      "value": "",
      "type": "Element | (Element | null)[] | null",
      "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.\n",
      "description_zh": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.\n"
    },
    "collisionPadding": {
      "default": "",
      "value": "",
      "type": "number | Partial<Record<top | right | bottom | left, number>>",
      "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.\n",
      "description_zh": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.\n"
    },
    "disableOutsidePointerEvents": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "When true, hover/focus/click interactions will be disabled on elements outside\nthe DismissableLayer. Users will need to click twice on outside elements to\ninteract with them: once to close the DismissableLayer, and again to trigger the element.\n",
      "description_zh": "When true, hover/focus/click interactions will be disabled on elements outside\nthe DismissableLayer. Users will need to click twice on outside elements to\ninteract with them: once to close the DismissableLayer, and again to trigger the element.\n"
    },
    "forceMount": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.\n",
      "description_zh": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.\n"
    },
    "hideWhenDetached": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Whether to hide the content when the trigger becomes fully occluded.\n",
      "description_zh": "Whether to hide the content when the trigger becomes fully occluded.\n"
    },
    "prioritizePosition": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Force content to be position within the viewport.\nMight overlap the reference element, which may not be desired.\n",
      "description_zh": "Force content to be position within the viewport.\nMight overlap the reference element, which may not be desired.\n"
    },
    "side": {
      "default": "",
      "value": "",
      "type": "top | right | bottom | left",
      "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.\n",
      "description_zh": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.\n"
    },
    "sideOffset": {
      "default": "",
      "value": "",
      "type": "number",
      "description": "The distance in pixels from the trigger.\n",
      "description_zh": "The distance in pixels from the trigger.\n"
    },
    "sticky": {
      "default": "",
      "value": "",
      "type": "partial | always",
      "description": "The sticky behavior on the align axis. partial will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst \"always\" will keep the content in the boundary\nregardless.\n",
      "description_zh": "The sticky behavior on the align axis. partial will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst \"always\" will keep the content in the boundary\nregardless.\n"
    },
    "trapFocus": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Whether focus should be trapped within the MenuContent\n",
      "description_zh": "Whether focus should be trapped within the MenuContent\n"
    },
    "updatePositionStrategy": {
      "default": "",
      "value": "",
      "type": "always | optimized",
      "description": "Strategy to update the position of the floating element on every animation frame.\n",
      "description_zh": "Strategy to update the position of the floating element on every animation frame.\n"
    }
  },
  "events": [
    {
      "name": "closeAutoFocus",
      "description": "Event handler called when auto-focusing on close.\nCan be prevented.\n",
      "description_zh": "Event handler called when auto-focusing on close.\nCan be prevented.\n",
      "params": "[event: Event]"
    },
    {
      "name": "escapeKeyDown",
      "description": "Event handler called when the escape key is down.\nCan be prevented.\n",
      "description_zh": "Event handler called when the escape key is down.\nCan be prevented.\n",
      "params": "[event: KeyboardEvent]"
    },
    {
      "name": "focusOutside",
      "description": "Event handler called when the focus moves outside of the DismissableLayer.\nCan be prevented.\n",
      "description_zh": "Event handler called when the focus moves outside of the DismissableLayer.\nCan be prevented.\n",
      "params": "[event: FocusOutsideEvent]"
    },
    {
      "name": "interactOutside",
      "description": "Event handler called when an interaction happens outside the DismissableLayer.\nSpecifically, when a pointerdown event happens outside or focus moves outside of it.\nCan be prevented.\n",
      "description_zh": "Event handler called when an interaction happens outside the DismissableLayer.\nSpecifically, when a pointerdown event happens outside or focus moves outside of it.\nCan be prevented.\n",
      "params": "[event: PointerDownOutsideEvent | FocusOutsideEvent]"
    },
    {
      "name": "openAutoFocus",
      "description": "Event handler called when auto-focusing on open.\nCan be prevented.\n",
      "description_zh": "Event handler called when auto-focusing on open.\nCan be prevented.\n",
      "params": "[event: Event]"
    },
    {
      "name": "pointerDownOutside",
      "description": "Event handler called when the a pointerdown event happens outside of the DismissableLayer.\nCan be prevented.\n",
      "description_zh": "Event handler called when the a pointerdown event happens outside of the DismissableLayer.\nCan be prevented.\n",
      "params": "[event: PointerDownOutsideEvent]"
    }
  ],
  "methods": [],
  "link": "https://www.radix-vue.com/components/date-range-picker.html",
  "link_zh": "https://www.radix-vue.com/components/date-range-picker.html"
}
