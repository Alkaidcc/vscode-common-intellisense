{
  "name": "CalendarPicker",
  "props": {
    "visible": {
      "description": "To show or hide the Cclendar",
      "description_zh": "To show or hide the Cclendar",
      "default": "true",
      "value": "",
      "type": "boolean"
    },
    "confirmText": {
      "description": "The text of confirm button",
      "description_zh": "The text of confirm button",
      "default": "Confirm",
      "value": "",
      "type": "string"
    },
    "popupClassName": {
      "description": "The custom class name of the popup",
      "description_zh": "The custom class name of the popup",
      "default": "-",
      "value": "",
      "type": "string"
    },
    "popupStyle": {
      "description": "The custom style of the popup",
      "description_zh": "The custom style of the popup",
      "default": "-",
      "value": "",
      "type": "React.CSSProperties"
    },
    "popupBodyStyle": {
      "description": "The custom style of the popup body",
      "description_zh": "The custom style of the popup body",
      "default": "-",
      "value": "",
      "type": "React.CSSProperties"
    },
    "forceRender": {
      "description": "Render content forcely，When ref is passed，always be true",
      "description_zh": "Render content forcely，When ref is passed，always be true",
      "default": "false",
      "value": "",
      "type": "boolean"
    },
    "closeOnMaskClick": {
      "description": "Whether to close after clicking the mask layer",
      "description_zh": "Whether to close after clicking the mask layer",
      "default": "true",
      "value": "",
      "type": "boolean"
    },
    "getContainer": {
      "description": "To get the specified mounted HTML node, the default is body, if null returned, it would be rendered to the current node",
      "description_zh": "To get the specified mounted HTML node, the default is body, if null returned, it would be rendered to the current node",
      "default": "() => document.body",
      "value": "",
      "type": "HTMLElement | () => HTMLElement | null"
    },
    "allowClear": {
      "description": "Whether to allow clearing after another click.",
      "description_zh": "Whether to allow clearing after another click.",
      "default": "true",
      "value": "",
      "type": "boolean"
    },
    "defaultValue": {
      "description": "The default selected date or date range.",
      "description_zh": "The default selected date or date range.",
      "default": "-",
      "value": "",
      "type": "Same as value prop."
    },
    "max": {
      "description": "Maximum value of a selectable range.",
      "description_zh": "Maximum value of a selectable range.",
      "default": "-",
      "value": "",
      "type": "Date"
    },
    "min": {
      "description": "Minimum value of a selectable range.",
      "description_zh": "Minimum value of a selectable range.",
      "default": "-",
      "value": "",
      "type": "Date"
    },
    "renderTop": {
      "description": "The top information of date render function.",
      "description_zh": "The top information of date render function.",
      "default": "-",
      "value": "",
      "type": "(date: Date) => ReactNode | null | undefined"
    },
    "renderBottom": {
      "description": "The bottom information of date render function.",
      "description_zh": "The bottom information of date render function.",
      "default": "-",
      "value": "",
      "type": "(date: Date) => ReactNode | null | undefined"
    },
    "selectionMode": {
      "description": "The selection mode. Disable selection when this prop is not set.",
      "description_zh": "The selection mode. Disable selection when this prop is not set.",
      "default": "-",
      "value": "",
      "type": "single / range"
    },
    "shouldDisableDate": {
      "description": "Set whether the date is disable selection. The min and max Settings are ignored",
      "description_zh": "Set whether the date is disable selection. The min and max Settings are ignored",
      "default": "-",
      "value": "",
      "type": "(date: Date) => boolean"
    },
    "title": {
      "description": "The title of calendar",
      "description_zh": "The title of calendar",
      "default": "Date selection",
      "value": "",
      "type": "React.ReactNode"
    },
    "value": {
      "description": "The selected date or date range.",
      "description_zh": "The selected date or date range.",
      "default": "-",
      "value": "",
      "type": "Date | null when selection mode is \"single\". [Date, Date] | null when selection mode is \"range\""
    },
    "weekStartsOn": {
      "description": "Week starts on which day.",
      "description_zh": "Week starts on which day.",
      "default": "'Sunday'",
      "value": "",
      "type": "Monday / Sunday"
    },
    "renderDate": {
      "description": "Custom date rendering.",
      "description_zh": "Custom date rendering.",
      "default": "-",
      "value": "",
      "type": "(date: Date) => ReactNode"
    }
  },
  "link": "https://mobile.ant.design/components/calendar-picker/calendar-picker",
  "link_zh": "https://mobile.ant.design/components/calendar-picker/calendar-picker",
  "typeDetail": {},
  "events": [
    {
      "name": "onClose",
      "description": "Triggered when closed",
      "description_zh": "Triggered when closed",
      "params": "() => void"
    },
    {
      "name": "onMaskClick",
      "description": "Triggered when the mask is clicked",
      "description_zh": "Triggered when the mask is clicked",
      "params": "() => void"
    },
    {
      "name": "onChange",
      "description": "Trigger when selected date changes.",
      "description_zh": "Trigger when selected date changes.",
      "params": "(val: Date | null) => void when selection mode is \"single\". (val: [Date, Date] | null) => void when selection mode is \"range\"."
    },
    {
      "name": "onConfirm",
      "description": "Trigger when confirm button is clicked.",
      "description_zh": "Trigger when confirm button is clicked.",
      "params": "(val: Date | null) => void when selection mode is \"single\"，(val: [Date, Date] | null) => void when selection mode is \"range\""
    }
  ],
  "methods": [
    {
      "name": "jumpTo",
      "description": "Jump to specified page",
      "description_zh": "Jump to specified page",
      "params": "(page: Page | ((page: Page) => Page)) => void"
    },
    {
      "name": "jumpToToday",
      "description": "Jump to today's page",
      "description_zh": "Jump to today's page",
      "params": "() => void"
    },
    {
      "name": "getDateRange",
      "description": "get date",
      "description_zh": "get date",
      "params": "[Date, Date]"
    }
  ],
  "slots": [],
  "suggestions": []
}
