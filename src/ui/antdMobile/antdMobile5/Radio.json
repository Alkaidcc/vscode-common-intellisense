{
  "name": "Radio",
  "props": {
    "block": {
      "description": "Whether to render as a block-level element",
      "description_zh": "Whether to render as a block-level element",
      "default": "false",
      "value": "",
      "type": "boolean"
    },
    "checked": {
      "description": "To specify whether it is currently selected",
      "description_zh": "To specify whether it is currently selected",
      "default": "false",
      "value": "",
      "type": "boolean"
    },
    "defaultChecked": {
      "description": "To specify whether it is currently selected by default",
      "description_zh": "To specify whether it is currently selected by default",
      "default": "false",
      "value": "",
      "type": "boolean"
    },
    "disabled": {
      "description": "Disabled state",
      "description_zh": "Disabled state",
      "default": "false",
      "value": "",
      "type": "boolean"
    },
    "icon": {
      "description": "Customized icon icon",
      "description_zh": "Customized icon icon",
      "default": "-",
      "value": "",
      "type": "(checked: boolean) => React.ReactNode"
    },
    "id": {
      "description": "The id of the input element, often used in conjunction with the label",
      "description_zh": "The id of the input element, often used in conjunction with the label",
      "default": "-",
      "value": "",
      "type": "string"
    },
    "value": {
      "description": "Value is carrying identification, used in Group mode",
      "description_zh": "Value is carrying identification, used in Group mode",
      "default": "-",
      "value": "",
      "type": "RadioValue"
    }
  },
  "events": [
    {
      "name": "onChange",
      "description": "Callback function when checked is changed",
      "description_zh": "Callback function when checked is changed",
      "params": "(val: boolean) => void"
    },
    {
      "name": "onClick",
      "description": "Radio's click event",
      "description_zh": "Radio's click event",
      "params": "(event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void"
    }
  ],
  "link": "https://mobile.ant.design/components/radio",
  "link_zh": "https://mobile.ant.design/components/radio",
  "typeDetail": {},
  "methods": [],
  "slots": [],
  "suggestions": []
}
