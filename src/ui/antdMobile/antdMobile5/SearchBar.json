{
  "name": "SearchBar",
  "props": {
    "cancelText": {
      "description": "Text of the cancel button",
      "description_zh": "Text of the cancel button",
      "default": "'取消'",
      "value": "",
      "type": "string"
    },
    "clearOnCancel": {
      "description": "Whether to clear the input after the cancel button is clicked",
      "description_zh": "Whether to clear the input after the cancel button is clicked",
      "default": "true",
      "value": "",
      "type": "boolean"
    },
    "clearable": {
      "description": "Whether to enable the clear icon, the input would be cleared after the clear icon is clicked",
      "description_zh": "Whether to enable the clear icon, the input would be cleared after the clear icon is clicked",
      "default": "true",
      "value": "",
      "type": "boolean"
    },
    "icon": {
      "description": "Icon",
      "description_zh": "Icon",
      "default": "<SearchOutline />",
      "value": "",
      "type": "ReactNode"
    },
    "maxLength": {
      "description": "The maximum number of characters the user can enter",
      "description_zh": "The maximum number of characters the user can enter",
      "default": "-",
      "value": "",
      "type": "number"
    },
    "placeholder": {
      "description": "Hint text",
      "description_zh": "Hint text",
      "default": "-",
      "value": "",
      "type": "string"
    },
    "showCancelButton": {
      "description": "Whether to display the cancel button on the right side of the search input",
      "description_zh": "Whether to display the cancel button on the right side of the search input",
      "default": "false",
      "value": "",
      "type": "boolean | ((focus: boolean, value: string) => boolean)"
    },
    "value": {
      "description": "Input value",
      "description_zh": "Input value",
      "default": "-",
      "value": "",
      "type": "string"
    }
  },
  "link": "https://mobile.ant.design/components/search-bar",
  "link_zh": "https://mobile.ant.design/components/search-bar",
  "typeDetail": {},
  "events": [
    {
      "name": "onBlur",
      "description": "Triggered when the input lose focus",
      "description_zh": "Triggered when the input lose focus",
      "params": "(e: React.FocusEvent<HTMLInputElement>) => void"
    },
    {
      "name": "onCancel",
      "description": "Triggered when the cancel button is clicked",
      "description_zh": "Triggered when the cancel button is clicked",
      "params": "() => void"
    },
    {
      "name": "onChange",
      "description": "Triggered when the input content is changed",
      "description_zh": "Triggered when the input content is changed",
      "params": "(value: string) => void"
    },
    {
      "name": "onClear",
      "description": "Triggered when the clear button is clicked",
      "description_zh": "Triggered when the clear button is clicked",
      "params": "() => void"
    },
    {
      "name": "onFocus",
      "description": "Triggered when the input get focus",
      "description_zh": "Triggered when the input get focus",
      "params": "(e: React.FocusEvent<HTMLInputElement>) => void"
    },
    {
      "name": "onSearch",
      "description": "Triggered when the enter key is input",
      "description_zh": "Triggered when the enter key is input",
      "params": "(value: string) => void"
    },
    {
      "name": "onlyShowClearWhenFocus",
      "description": "If true, the clear button will only be displayed when the input box is focused. If false, the clear button will still be displayed after the input box loses focus.",
      "description_zh": "If true, the clear button will only be displayed when the input box is focused. If false, the clear button will still be displayed after the input box loses focus.",
      "params": "boolean"
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": []
}
