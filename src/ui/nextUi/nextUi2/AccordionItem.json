{
  "name": "AccordionItem",
  "methods": [],
  "events": [
    {
      "name": "onFocus",
      "description": "Handler that is called when the element receives focus.",
      "params": "`(e: FocusEvent) => void`"
    },
    {
      "name": "onBlur",
      "description": "Handler that is called when the element loses focus.",
      "params": "`(e: FocusEvent) => void`"
    },
    {
      "name": "onFocusChange",
      "description": "Handler that is called when the element's focus status changes.",
      "params": "`(isFocused: boolean) => void`"
    },
    {
      "name": "onKeyDown",
      "description": "Handler that is called when a key is pressed.",
      "params": "`(e: KeyboardEvent) => void`"
    },
    {
      "name": "onKeyUp",
      "description": "Handler that is called when a key is released.",
      "params": "`(e: KeyboardEvent) => void`"
    },
    {
      "name": "onPress",
      "description": "Handler called when the press is released over the target.",
      "params": "`(e: PressEvent) => void`"
    },
    {
      "name": "onPressStart",
      "description": "Handler called when a press interaction starts.",
      "params": "`(e: PressEvent) => void`"
    },
    {
      "name": "onPressEnd",
      "description": "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      "params": "`(e: PressEvent) => void`"
    },
    {
      "name": "onPressChange",
      "description": "Handler called when the press state changes.",
      "params": "`(isPressed: boolean) => void`"
    },
    {
      "name": "onPressUp",
      "description": "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      "params": "`(e: PressEvent) => void`"
    },
    {
      "name": "onClick",
      "description": "The native button click event handler (**Deprecated**) use **onPress** instead.",
      "params": "`MouseEventHandler`"
    }
  ],
  "props": {
    "children": {
      "type": "`ReactNode` | `string`",
      "default": "",
      "description": "The content of the component."
    },
    "title": {
      "type": "`ReactNode` | `string`",
      "default": "",
      "description": "The accordion item title."
    },
    "subtitle": {
      "type": "`ReactNode` | `string`",
      "default": "",
      "description": "The accordion item subtitle."
    },
    "indicator": {
      "type": "[IndicatorProps](#accordion-item-indicator-props)",
      "default": "",
      "description": "The accordion item `expanded` indicator, usually an arrow icon."
    },
    "startContent": {
      "type": "`ReactNode`",
      "default": "",
      "description": "The accordion item start content, usually an icon or avatar."
    },
    "motionProps": {
      "type": "[MotionProps](#motion-props)",
      "default": "",
      "description": "The props to modify the framer motion animation. Use the `variants` API to create your own animation."
    },
    "isCompact": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the AccordionItem is compact."
    },
    "isDisabled": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "The current disabled status."
    },
    "keepContentMounted": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the AccordionItem content is kept mounted when closed."
    },
    "hideIndicator": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the AccordionItem indicator is hidden."
    },
    "disableAnimation": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the AccordionItem animation is disabled."
    },
    "disableIndicatorAnimation": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the AccordionItem indicator animation is disabled."
    },
    "classNames": {
      "type": "[Classnames](#accordion-item-classnames)",
      "default": "-",
      "description": "Allows to set custom class names for the accordion item slots."
    }
  },
  "link": "https://nextui.org/docs/components/accordion"
}
