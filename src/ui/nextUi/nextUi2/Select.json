{
  "name": "Select",
  "methods": [],
  "events": [
    {
      "name": "onClose",
      "description": "Callback fired when the select popover is closed.",
      "params": "`() => void`"
    },
    {
      "name": "onOpenChange",
      "description": "Callback fired when the select popover is opened or closed.",
      "params": "`(isOpen: boolean) => void`"
    },
    {
      "name": "onSelectionChange",
      "description": "Callback fired when the selected keys change.",
      "params": "`(keys: React.Key[]) => void`"
    },
    {
      "name": "onChange",
      "description": "Native select change event, fired when the selected value changes.",
      "params": "`React.ChangeEvent<HTMLSelectElement>`"
    },
    {
      "name": "renderValue",
      "description": "Function to render the value of the select. It renders the selected item by default.",
      "params": "[RenderValueFunction](#render-value-function)"
    }
  ],
  "props": {
    "children\\*": {
      "type": "`ReactNode[]`",
      "default": "-",
      "description": "The children to render. Usually a list of `SelectItem` and `SelectSection` elements."
    },
    "items": {
      "type": "[`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)",
      "default": "-",
      "description": "Item objects in the select. (dynamic)"
    },
    "selectionMode": {
      "type": "`single` | `multiple`",
      "default": "-",
      "description": "The type of selection that is allowed in the collection."
    },
    "selectedKeys": {
      "type": "`all` | `React.Key[]`",
      "default": "-",
      "description": "The currently selected keys in the collection (controlled)."
    },
    "disabledKeys": {
      "type": "`all` | `React.Key[]`",
      "default": "-",
      "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with."
    },
    "defaultSelectedKeys": {
      "type": "`all` | `React.Key[]`",
      "default": "-",
      "description": "The initial selected keys in the collection (uncontrolled)."
    },
    "variant": {
      "type": "`flat` | `bordered` | `faded` | `underlined`",
      "default": "`flat`",
      "description": "The variant of the select."
    },
    "color": {
      "type": "`default` | `primary` | `secondary` | `success` | `warning` | `danger`",
      "default": "`default`",
      "description": "The color of the select."
    },
    "size": {
      "type": "`sm` | `md` | `lg`",
      "default": "`md`",
      "description": "The size of the select."
    },
    "radius": {
      "type": "`none` | `sm` | `md` | `lg` | `full`",
      "default": "-",
      "description": "The radius of the select."
    },
    "placeholder": {
      "type": "`string`",
      "default": "`Select an option`",
      "description": "The placeholder of the select."
    },
    "labelPlacement": {
      "type": "`inside` | `outside` | `outside-left`",
      "default": "`inside`",
      "description": "The position of the label."
    },
    "label": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "The content to display as the label."
    },
    "description": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "A description for the select. Provides a hint such as specific requirements for what to choose."
    },
    "errorMessage": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "An error message for the select."
    },
    "startContent": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "Element to be rendered in the left side of the select."
    },
    "endContent": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "Element to be rendered in the right side of the select."
    },
    "selectorIcon": {
      "type": "`ReactNode`",
      "default": "-",
      "description": "Element to be rendered as the selector icon."
    },
    "scrollRef": {
      "type": "`React.RefObject<HTMLElement>`",
      "default": "-",
      "description": "A ref to the scrollable element."
    },
    "spinnerRef": {
      "type": "`React.RefObject<HTMLElement>`",
      "default": "-",
      "description": "A ref to the spinner element."
    },
    "fullWidth": {
      "type": "`boolean`",
      "default": "`true`",
      "description": "Whether the select should take up the width of its parent."
    },
    "isOpen": {
      "type": "`boolean`",
      "default": "-",
      "description": "Whether the select is open by default (controlled)."
    },
    "defaultOpen": {
      "type": "`boolean`",
      "default": "-",
      "description": "Whether the select is open by default (uncontrolled)."
    },
    "isRequired": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether user select is required on the select before form submission."
    },
    "isDisabled": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the select is disabled."
    },
    "isMultiline": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the select should allow multiple lines of text."
    },
    "isInvalid": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the select is invalid."
    },
    "validationState": {
      "type": "`valid` | `invalid`",
      "default": "-",
      "description": "Whether the select should display its \"valid\" or \"invalid\" visual styling. (**Deprecated**) use **isInvalid** instead."
    },
    "showScrollIndicators": {
      "type": "`boolean`",
      "default": "`true`",
      "description": "Whether the select should show scroll indicators when the listbox is scrollable."
    },
    "autoFocus": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the select should be focused on the first mount."
    },
    "disallowEmptySelection": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the collection allows empty selection."
    },
    "disableAnimation": {
      "type": "`boolean`",
      "default": "`true`",
      "description": "Whether the select should be animated."
    },
    "disableSelectionIconRotation": {
      "type": "`boolean`",
      "default": "`false`",
      "description": "Whether the select should disable the rotation of the selector icon."
    },
    "popoverProps": {
      "type": "[PopoverProps](/docs/components/popover#api)",
      "default": "-",
      "description": "Props to be passed to the popover component."
    },
    "listboxProps": {
      "type": "[ListboxProps](/docs/components/listbox#api)",
      "default": "-",
      "description": "Props to be passed to the listbox component."
    },
    "scrollShadowProps": {
      "type": "[ScrollShadowProps](/docs/components/scroll-shadow#api)",
      "default": "-",
      "description": "Props to be passed to the scroll shadow component."
    },
    "classNames": {
      "type": "`Record<\"base\"｜ \"label\"｜ \"trigger\"｜ \"mainWrapper\" ｜ \"innerWrapper\"｜ \"selectorIcon\" ｜ \"value\" ｜ \"listboxWrapper\"｜ \"listbox\" ｜ \"popover\" ｜ \"helperWrapper\" ｜ \"description\" ｜ \"errorMessage\", string>`",
      "default": "-",
      "description": "Allows to set custom class names for the dropdown item slots."
    }
  },
  "link": "https://nextui.org/docs/components/select"
}
