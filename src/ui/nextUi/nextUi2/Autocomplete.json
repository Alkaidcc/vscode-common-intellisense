{
  "name": "Autocomplete",
  "props": {
    ":children": {
      "default": "-",
      "value": "",
      "type": "ReactNode[]",
      "description": "The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements.",
      "description_zh": "The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements."
    },
    "label": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "The content to display as the label.",
      "description_zh": "The content to display as the label.",
      "required": true
    },
    "name": {
      "default": "-",
      "value": "",
      "type": "string",
      "description": "The name of the input element, used when submitting an HTML form. See MDN.",
      "description_zh": "The name of the input element, used when submitting an HTML form. See MDN."
    },
    "variant": {
      "default": "flat",
      "value": ["flat", "bordered", "faded", "underlined"],
      "type": "flat | bordered | faded | underlined",
      "description": "The variant of the Autocomplete.",
      "description_zh": "The variant of the Autocomplete."
    },
    "color": {
      "default": "default",
      "value": ["default", "primary", "secondary", "success", "warning", "danger"],
      "type": "default | primary | secondary | success | warning | danger",
      "description": "The color of the Autocomplete.",
      "description_zh": "The color of the Autocomplete."
    },
    "size": {
      "default": "md",
      "value": ["sm", "md", "lg"],
      "type": "sm | md | lg",
      "description": "The size of the Autocomplete.",
      "description_zh": "The size of the Autocomplete."
    },
    "radius": {
      "default": "-",
      "value": ["none", "sm", "md", "lg", "full"],
      "type": "none | sm | md | lg | full",
      "description": "The radius of the Autocomplete.",
      "description_zh": "The radius of the Autocomplete."
    },
    ":items": {
      "default": "-",
      "value": "",
      "type": "Iterable<T>",
      "description": "The list of Autocomplete items. (controlled)",
      "description_zh": "The list of Autocomplete items. (controlled)"
    },
    ":defaultItems": {
      "default": "-",
      "value": "",
      "type": "Iterable<T>",
      "description": "The list of Autocomplete items (uncontrolled).",
      "description_zh": "The list of Autocomplete items (uncontrolled)."
    },
    "inputValue": {
      "default": "-",
      "value": "",
      "type": "string",
      "description": "The value of the Autocomplete input (controlled).",
      "description_zh": "The value of the Autocomplete input (controlled)."
    },
    "defaultInputValue": {
      "default": "-",
      "value": "",
      "type": "string",
      "description": "The value of the Autocomplete input (uncontrolled).",
      "description_zh": "The value of the Autocomplete input (uncontrolled)."
    },
    "allowsCustomValue": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete allows a non-item matching input value to be set.",
      "description_zh": "Whether the Autocomplete allows a non-item matching input value to be set."
    },
    "allowsEmptyCollection": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the autocomplete allows the menu to be open when the collection is empty.",
      "description_zh": "Whether the autocomplete allows the menu to be open when the collection is empty."
    },
    "shouldCloseOnBlur": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete should close when the input is blurred.",
      "description_zh": "Whether the Autocomplete should close when the input is blurred."
    },
    "placeholder": {
      "default": "-",
      "value": "",
      "type": "string",
      "description": "Temporary text that occupies the text input when it is empty.",
      "description_zh": "Temporary text that occupies the text input when it is empty.",
      "required": true
    },
    ":description": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
      "description_zh": "A description for the field. Provides a hint such as specific requirements for what to choose."
    },
    "menuTrigger": {
      "default": "focus",
      "value": ["focus", "input", "manual"],
      "type": "focus | input | manual",
      "description": "The action that causes the menu to open.",
      "description_zh": "The action that causes the menu to open."
    },
    "labelPlacement": {
      "default": "inside",
      "value": ["inside", "outside", "outside-left"],
      "type": "inside | outside | outside-left",
      "description": "The position of the label.",
      "description_zh": "The position of the label."
    },
    ":selectedKey": {
      "default": "-",
      "value": "",
      "type": "React.Key",
      "description": "The currently selected key in the collection (controlled).",
      "description_zh": "The currently selected key in the collection (controlled)."
    },
    ":defaultSelectedKey": {
      "default": "-",
      "value": "",
      "type": "React.Key",
      "description": "The initial selected key in the collection (uncontrolled).",
      "description_zh": "The initial selected key in the collection (uncontrolled)."
    },
    ":disabledKeys": {
      "default": "-",
      "value": "",
      "type": "all | React.Key[]",
      "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      "description_zh": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with."
    },
    ":errorMessage": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "An error message to display below the field.",
      "description_zh": "An error message to display below the field."
    },
    ":startContent": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "Element to be rendered in the left side of the Autocomplete.",
      "description_zh": "Element to be rendered in the left side of the Autocomplete."
    },
    ":endContent": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "Element to be rendered in the right side of the Autocomplete.",
      "description_zh": "Element to be rendered in the right side of the Autocomplete."
    },
    "autoFocus": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete should be focused on render.",
      "description_zh": "Whether the Autocomplete should be focused on render."
    },
    ":defaultFilter": {
      "default": "-",
      "value": "",
      "type": "(textValue: string, inputValue: string) => boolean",
      "description": "The filter function used to determine if a option should be included in the Autocomplete list.",
      "description_zh": "The filter function used to determine if a option should be included in the Autocomplete list."
    },
    ":filterOptions": {
      "default": "{ sensitivity: 'base'}",
      "value": "",
      "type": "Intl.CollatorOptions",
      "description": "The options used to create the collator used for filtering.",
      "description_zh": "The options used to create the collator used for filtering."
    },
    "isReadOnly": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete is read only.",
      "description_zh": "Whether the Autocomplete is read only."
    },
    "isRequired": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete is required.",
      "description_zh": "Whether the Autocomplete is required."
    },
    "isInvalid": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete is invalid.",
      "description_zh": "Whether the Autocomplete is invalid."
    },
    "isDisabled": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete is disabled.",
      "description_zh": "Whether the Autocomplete is disabled."
    },
    "fullWidth": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the input should take up the width of its parent.",
      "description_zh": "Whether the input should take up the width of its parent."
    },
    ":selectorIcon": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "The icon that represents the autocomplete open state. Usually a chevron icon.",
      "description_zh": "The icon that represents the autocomplete open state. Usually a chevron icon."
    },
    ":clearIcon": {
      "default": "-",
      "value": "",
      "type": "ReactNode",
      "description": "The icon to be used in the clear button. Usually a cross icon.",
      "description_zh": "The icon to be used in the clear button. Usually a cross icon."
    },
    "showScrollIndicators": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the scroll indicators should be shown when the listbox is scrollable.",
      "description_zh": "Whether the scroll indicators should be shown when the listbox is scrollable."
    },
    ":scrollRef": {
      "default": "-",
      "value": "",
      "type": "React.RefObject<HTMLElement>",
      "description": "A ref to the scrollable element.",
      "description_zh": "A ref to the scrollable element."
    },
    "inputProps": {
      "default": "-",
      "value": "",
      "type": "InputProps",
      "description": "Props to be passed to the Input component.",
      "description_zh": "Props to be passed to the Input component."
    },
    ":popoverProps": {
      "default": "-",
      "value": "",
      "type": "PopoverProps",
      "description": "Props to be passed to the Popover component.",
      "description_zh": "Props to be passed to the Popover component."
    },
    ":listboxProps": {
      "default": "-",
      "value": "",
      "type": "ListboxProps",
      "description": "Props to be passed to the Listbox component.",
      "description_zh": "Props to be passed to the Listbox component."
    },
    ":scrollShadowProps": {
      "default": "-",
      "value": "",
      "type": "ScrollShadowProps",
      "description": "Props to be passed to the ScrollShadow component.",
      "description_zh": "Props to be passed to the ScrollShadow component."
    },
    ":selectorButtonProps": {
      "default": "-",
      "value": "",
      "type": "ButtonProps",
      "description": "Props to be passed to the selector button.",
      "description_zh": "Props to be passed to the selector button."
    },
    ":clearButtonProps": {
      "default": "-",
      "value": "",
      "type": "ButtonProps",
      "description": "Props to be passed to the clear button.",
      "description_zh": "Props to be passed to the clear button."
    },
    "isClearable": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the clear button should be shown.",
      "description_zh": "Whether the clear button should be shown."
    },
    "disableClearable": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the clear button should be hidden. (Deprecated) Use isClearable instead.",
      "description_zh": "Whether the clear button should be hidden. (Deprecated) Use isClearable instead."
    },
    "disableAnimation": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the Autocomplete should be animated.",
      "description_zh": "Whether the Autocomplete should be animated."
    },
    "disableSelectorIconRotation": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the select should disable the rotation of the selector icon.",
      "description_zh": "Whether the select should disable the rotation of the selector icon."
    },
    "classNames": {
      "default": "-",
      "value": "",
      "type": "Record<\"base\"｜ \"listboxWrapper\"｜ \"listbox\"｜ \"popoverContent\" ｜ \"endContentWrapper\"｜ \"clearButton\" ｜ \"selectorButton\", string>",
      "description": "Allows to set custom class names for the Autocomplete slots.",
      "description_zh": "Allows to set custom class names for the Autocomplete slots."
    }
  },
  "methods": [],
  "link": "https://nextui.org/docs/components/autocomplete#api",
  "link_zh": "https://nextui.org/docs/components/autocomplete#api",
  "events": [
    {
      "name": "onOpenChange",
      "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
      "description_zh": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
      "params": "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void"
    },
    {
      "name": "onInputChange",
      "description": "Handler that is called when the Autocomplete input value changes.",
      "description_zh": "Handler that is called when the Autocomplete input value changes.",
      "params": "(value: string) => void"
    },
    {
      "name": "onSelectionChange",
      "description": "Handler that is called when the Autocomplete selection changes.",
      "description_zh": "Handler that is called when the Autocomplete selection changes.",
      "params": "(key: React.Key) => void"
    },
    {
      "name": "onFocus",
      "description": "Handler that is called when the Autocomplete input is focused.",
      "description_zh": "Handler that is called when the Autocomplete input is focused.",
      "params": "(e:  FocusEvent<HTMLInputElement>) => void"
    },
    {
      "name": "onBlur",
      "description": "Handler that is called when the Autocomplete input is blurred.",
      "description_zh": "Handler that is called when the Autocomplete input is blurred.",
      "params": "(e:  FocusEvent<HTMLInputElement>) => void"
    },
    {
      "name": "onFocusChange",
      "description": "Handler that is called when the Autocomplete input focus changes.",
      "description_zh": "Handler that is called when the Autocomplete input focus changes.",
      "params": "(isFocused: boolean) => void"
    },
    {
      "name": "onKeyDown",
      "description": "Handler that is called when a key is pressed.",
      "description_zh": "Handler that is called when a key is pressed.",
      "params": "(e: KeyboardEvent) => void"
    },
    {
      "name": "onKeyUp",
      "description": "Handler that is called when a key is released.",
      "description_zh": "Handler that is called when a key is released.",
      "params": "(e: KeyboardEvent) => void"
    },
    {
      "name": "onClose",
      "description": "Handler that is called when the Autocomplete's Popover is closed.",
      "description_zh": "Handler that is called when the Autocomplete's Popover is closed.",
      "params": "() => void"
    }
  ],
  "slots": [
    {
      "name": "base",
      "params": "",
      "description": "The main wrapper of the autocomplete. This wraps the input and popover components.",
      "description_zh": "The main wrapper of the autocomplete. This wraps the input and popover components."
    },
    {
      "name": "listboxWrapper",
      "params": "",
      "description": "The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.",
      "description_zh": "The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component."
    },
    {
      "name": "listbox",
      "params": "",
      "description": "The listbox component. This is the component that wraps the autocomplete items.",
      "description_zh": "The listbox component. This is the component that wraps the autocomplete items."
    },
    {
      "name": "popoverContent",
      "params": "",
      "description": "The popover content slot. Use this to modify the popover content styles.",
      "description_zh": "The popover content slot. Use this to modify the popover content styles."
    },
    {
      "name": "endContentWrapper",
      "params": "",
      "description": "The wrapper of the end content. This wraps the clear button and selector button.",
      "description_zh": "The wrapper of the end content. This wraps the clear button and selector button."
    },
    {
      "name": "clearButton",
      "params": "",
      "description": "The clear button slot.",
      "description_zh": "The clear button slot."
    },
    {
      "name": "selectorButton",
      "params": "",
      "description": "The selector button slot.",
      "description_zh": "The selector button slot."
    }
  ],
  "suggestions": ["AutocompleteItem", "AutocompleteSection"],
  "typeDetail": {}
}
