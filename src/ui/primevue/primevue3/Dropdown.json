{
  "name": "Dropdown",
  "props": {
    "modelValue": {
      "default": "",
      "description": "Value of the component.",
      "type": "any",
      "value": ""
    },
    "options": {
      "default": "",
      "description": "An array of selectitems to display as the available options.",
      "type": "any[]",
      "value": ""
    },
    "optionLabel": {
      "default": "",
      "description": "Property name or getter function to use as the label of an option.",
      "type": "string | Function",
      "value": ""
    },
    "optionValue": {
      "default": "",
      "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined.",
      "type": "string | Function",
      "value": ""
    },
    "optionDisabled": {
      "default": "",
      "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.",
      "type": "string | Function",
      "value": ""
    },
    "optionGroupLabel": {
      "default": "",
      "description": "Property name or getter function to use as the label of an option group.",
      "type": "string | Function",
      "value": ""
    },
    "optionGroupChildren": {
      "default": "",
      "description": "Property name or getter function that refers to the children options of option group.",
      "type": "string | Function",
      "value": ""
    },
    "scrollHeight": {
      "default": "200px",
      "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value.",
      "type": "string",
      "value": ""
    },
    "filter": {
      "default": "false",
      "description": "When specified, displays a filter input at header.",
      "type": "boolean",
      "value": ""
    },
    "filterPlaceholder": {
      "default": "",
      "description": "Placeholder text to show when filter input is empty.",
      "type": "string",
      "value": ""
    },
    "filterLocale": {
      "default": "",
      "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
      "type": "string",
      "value": ""
    },
    "filterMatchMode": {
      "default": "contains",
      "description": "Defines the filtering algorithm to use when searching the options.",
      "type": "string",
      "value": ""
    },
    "filterFields": {
      "default": "",
      "description": "Fields used when filtering the options, defaults to optionLabel.",
      "type": "string[]",
      "value": ""
    },
    "editable": {
      "default": "false",
      "description": "When present, custom value instead of predefined options can be entered using the editable input field.",
      "type": "boolean",
      "value": ""
    },
    "placeholder": {
      "default": "",
      "description": "Default text to display when no option is selected.",
      "type": "string",
      "value": ""
    },
    "disabled": {
      "default": "false",
      "description": "When present, it specifies that the component should be disabled.",
      "type": "boolean",
      "value": ""
    },
    "dataKey": {
      "default": "",
      "description": "A property to uniquely identify an option.",
      "type": "string",
      "value": ""
    },
    "showClear": {
      "default": "false",
      "description": "When enabled, a clear icon is displayed to clear the value.",
      "type": "boolean",
      "value": ""
    },
    "inputId": {
      "default": "",
      "description": "Identifier of the underlying input element.",
      "type": "string",
      "value": ""
    },
    "inputStyle": {
      "default": "",
      "description": "Inline style of the input field.",
      "type": "object",
      "value": ""
    },
    "inputClass": {
      "default": "",
      "description": "Style class of the input field.",
      "type": "string | object",
      "value": ""
    },
    "inputProps": {
      "default": "",
      "description": "Used to pass all properties of the HTMLInputElement/HTMLSpanElement to the focusable input element inside the component.",
      "type": "HTMLAttributes | InputHTMLAttributes",
      "value": ""
    },
    "panelStyle": {
      "default": "",
      "description": "Inline style of the overlay panel.",
      "type": "object",
      "value": ""
    },
    "panelClass": {
      "default": "",
      "description": "Style class of the overlay panel.",
      "type": "string | object",
      "value": ""
    },
    "panelProps": {
      "default": "",
      "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component.",
      "type": "HTMLAttributes",
      "value": ""
    },
    "filterInputProps": {
      "default": "",
      "description": "Used to pass all properties of the HTMLInputElement to the filter input inside the component.",
      "type": "InputHTMLAttributes",
      "value": ""
    },
    "clearIconProps": {
      "default": "",
      "description": "Used to pass all properties of the HTMLElement to the clear icon inside the component.",
      "type": "HTMLAttributes",
      "value": ""
    },
    "appendTo": {
      "default": "body",
      "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.",
      "type": "string | HTMLElement",
      "value": ""
    },
    "loading": {
      "default": "false",
      "description": "Whether the dropdown is in loading state.",
      "type": "boolean",
      "value": ""
    },
    "clearIcon": {
      "default": "",
      "description": "Icon to display in clear button.",
      "type": "string",
      "value": ""
    },
    "dropdownIcon": {
      "default": "",
      "description": "Icon to display in the dropdown.",
      "type": "string",
      "value": ""
    },
    "filterIcon": {
      "default": "",
      "description": "Icon to display in filter input.",
      "type": "string",
      "value": ""
    },
    "loadingIcon": {
      "default": "",
      "description": "Icon to display in loading state.",
      "type": "string",
      "value": ""
    },
    "resetFilterOnHide": {
      "default": "false",
      "description": "Clears the filter value when hiding the dropdown.",
      "type": "boolean",
      "value": ""
    },
    "virtualScrollerOptions": {
      "default": "",
      "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.",
      "type": "VirtualScrollerProps",
      "value": ""
    },
    "autoOptionFocus": {
      "default": "true",
      "description": "Whether to focus on the first visible or selected element when the overlay panel is shown.",
      "type": "boolean",
      "value": ""
    },
    "autoFilterFocus": {
      "default": "false",
      "description": "Whether to focus on the filter element when the overlay panel is shown.",
      "type": "boolean",
      "value": ""
    },
    "selectOnFocus": {
      "default": "false",
      "description": "When enabled, the focused option is selected.",
      "type": "boolean",
      "value": ""
    },
    "filterMessage": {
      "default": "'{0} results are available'",
      "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration.",
      "type": "string",
      "value": ""
    },
    "selectionMessage": {
      "default": "'{0} items selected'",
      "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration.",
      "type": "string",
      "value": ""
    },
    "emptySelectionMessage": {
      "default": "No selected item",
      "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration.",
      "type": "string",
      "value": ""
    },
    "emptyFilterMessage": {
      "default": "No results found",
      "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration.",
      "type": "string",
      "value": ""
    },
    "emptyMessage": {
      "default": "No results found",
      "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration.",
      "type": "string",
      "value": ""
    },
    "tabindex": {
      "default": "",
      "description": "Index of the element in tabbing order.",
      "type": "string | number",
      "value": ""
    },
    "aria-label": {
      "default": "",
      "description": "Defines a string value that labels an interactive element.",
      "type": "string",
      "value": ""
    },
    "aria-labelledby": {
      "default": "",
      "description": "Identifier of the underlying input element.",
      "type": "string",
      "value": ""
    },
    "pt": {
      "default": "",
      "description": "Used to pass attributes to DOM elements inside the component.",
      "type": "PassThrough<DropdownPassThroughOptions>",
      "value": ""
    },
    "ptOptions": {
      "default": "",
      "description": "Used to configure passthrough(pt) options of the component.",
      "type": "PassThroughOptions",
      "value": ""
    },
    "unstyled": {
      "default": "false",
      "description": "When enabled, it removes component related styles in the core.",
      "type": "boolean",
      "value": ""
    }
  },
  "events": [
    {
      "name": "update:modelValue",
      "description": "Emitted when the value changes.",
      "params": "(value: any) => void"
    },
    {
      "name": "change",
      "description": "Callback to invoke on value change.",
      "params": "(event: DropdownChangeEvent) => void"
    },
    {
      "name": "focus",
      "description": "Callback to invoke when the component receives focus.",
      "params": "(event: Event) => void"
    },
    {
      "name": "blur",
      "description": "Callback to invoke when the component loses focus.",
      "params": "(event: Event) => void"
    },
    {
      "name": "before-show",
      "description": "Callback to invoke before the overlay is shown.",
      "params": "() => void"
    },
    {
      "name": "before-hide",
      "description": "Callback to invoke before the overlay is hidden.",
      "params": "() => void"
    },
    {
      "name": "show",
      "description": "Callback to invoke when the overlay is shown.",
      "params": "() => void"
    },
    {
      "name": "hide",
      "description": "Callback to invoke when the overlay is hidden.",
      "params": "() => void"
    },
    {
      "name": "filter",
      "description": "Callback to invoke on filter input.",
      "params": "(event: DropdownFilterEvent) => void"
    }
  ],
  "link": "https://primevue.org/dropdown/"
}
