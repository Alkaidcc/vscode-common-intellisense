{
  "name": "Form",
  "props": {
    "disabled": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "统一配置表单控件是否可用",
      "description_zh": "统一配置表单控件是否可用"
    },
    "id": {
      "default": "-",
      "value": "",
      "type": "string",
      "description": "设置后，会作为表单控件 id的前缀。",
      "description_zh": "设置后，会作为表单控件 id的前缀。"
    },
    "labelAlign": {
      "default": "right",
      "value": ["left", "right"],
      "type": "'left' | 'right'",
      "description": "标签的文本对齐方式",
      "description_zh": "标签的文本对齐方式"
    },
    "layout": {
      "default": "horizontal",
      "value": ["horizontal", "vertical", "inline"],
      "type": "'horizontal' | 'vertical' | 'inline'",
      "description": "表单的布局，有三种布局，水平、垂直、多列。",
      "description_zh": "表单的布局，有三种布局，水平、垂直、多列。"
    },
    "requiredSymbol": {
      "default": "true",
      "value": "",
      "type": "boolean | { position: 'start' | 'end' }",
      "description": "是否在 required 的时候显示加重的红色星号，设置 position 可选择将星号置于 label 前/后",
      "description_zh": "是否在 required 的时候显示加重的红色星号，设置 position 可选择将星号置于 label 前/后"
    },
    "size": {
      "default": "-",
      "value": ["mini", "small", "default", "large"],
      "type": "'mini' | 'small' | 'default' | 'large'",
      "description": "不同尺寸。",
      "description_zh": "不同尺寸。"
    },
    "colon": {
      "default": "-",
      "value": "",
      "type": "boolean | ReactNode",
      "description": "是否显示标签后的一个冒号，优先级小于 Form.Item 中 colon 的优先级。(ReactNode in v2.41.0)",
      "description_zh": "是否显示标签后的一个冒号，优先级小于 Form.Item 中 colon 的优先级。(ReactNode in v2.41.0)"
    },
    "className": {
      "default": "-",
      "value": "",
      "type": "string | string[]",
      "description": "节点类名",
      "description_zh": "节点类名"
    },
    ":form": {
      "default": "-",
      "value": "",
      "type": "FormInstance<FormData, FieldValue, FieldKey>",
      "description": "form",
      "description_zh": "form",
      "required": true
    },
    ":initialValues": {
      "default": "-",
      "value": "",
      "type": "Partial<FormData>",
      "description": "设置表单初始值",
      "description_zh": "设置表单初始值"
    },
    ":labelCol": {
      "default": "{ span: 5, offset: 0 }",
      "value": "",
      "type": "ColProps",
      "description": "<label>标签布局，同<Grid.Col>组件接收的参数相同，可以配置span和offset值，会覆盖全局的labelCol设置",
      "description_zh": "<label>标签布局，同<Grid.Col>组件接收的参数相同，可以配置span和offset值，会覆盖全局的labelCol设置"
    },
    ":scrollToFirstError": {
      "default": "-",
      "value": "",
      "type": "boolean | ScrollIntoViewOptions",
      "description": "验证失败后滚动到第一个错误字段。(ScrollIntoViewOptions 类型在 2.19.0 开始支持)",
      "description_zh": "验证失败后滚动到第一个错误字段。(ScrollIntoViewOptions 类型在 2.19.0 开始支持)"
    },
    ":style": {
      "default": "-",
      "value": "",
      "type": "CSSProperties",
      "description": "节点样式",
      "description_zh": "节点样式"
    },
    ":validateMessages": {
      "default": "-",
      "value": "",
      "type": "Partial<{[key in keyof ValidateMessagesTemplateType]: ValidateMessagesTemplateType[key] extends string? ValidateMessagesTemplateType[key] | ((data, { label }) => any): Partial<Record<keyof ValidateMessagesTemplateType[key], string | ((data, { label }) => any)>>;}>",
      "description": "校验提示信息模板 demo",
      "description_zh": "校验提示信息模板 demo"
    },
    "validateTrigger": {
      "default": "onChange",
      "value": "",
      "type": "string | string[]",
      "description": "触发验证的时机。",
      "description_zh": "触发验证的时机。"
    },
    ":wrapper": {
      "default": "form",
      "value": "",
      "type": "ComponentType",
      "description": "配置最外层标签，可以是 html 标签或是组件",
      "description_zh": "配置最外层标签，可以是 html 标签或是组件"
    },
    ":wrapperCol": {
      "default": "{ span: 19, offset: 0 }",
      "value": "",
      "type": "ColProps",
      "description": "控件布局，同labelCol的设置方法一致，会覆盖全局的wrapperCol设置，ColProps",
      "description_zh": "控件布局，同labelCol的设置方法一致，会覆盖全局的wrapperCol设置，ColProps"
    },
    ":wrapperProps": {
      "default": "-",
      "value": "",
      "type": "IndexedObject",
      "description": "配置 wrapper 之后，可以传一些参数到 wrapper 上。",
      "description_zh": "配置 wrapper 之后，可以传一些参数到 wrapper 上。"
    }
  },
  "methods": [
    {
      "name": "validate",
      "params": "Function(fields?: string[], callback(errors, values) => void)",
      "description": "校验并获取表单输入域的值与 Errors，如果不设置 fields 的话，会验证所有的 fields。支持 callback 和 promise 两种使用方法。"
    },
    {
      "name": "submit",
      "params": "Function",
      "description": "提交表单"
    },
    {
      "name": "setFieldValue",
      "params": "Function(field: string, value)",
      "description": "设置一个表单控件的值"
    },
    {
      "name": "setFields",
      "params": "Function({ [field]: string: { value: any, error: FieldError } })",
      "description": "设置一组表单控件的值和报错。"
    },
    {
      "name": "setFieldsValue",
      "params": "Function({[field]: string, value})",
      "description": "设置多个表单控件的值"
    },
    {
      "name": "getFieldValue",
      "params": "Function(field: string)",
      "description": "获取一个表单控件的值。请不要把返回值直接作为 useEffect 的依赖，其返回值会被深克隆，引用地址会发生改变",
      "value": ""
    },
    {
      "name": "getFields",
      "params": "Function",
      "description": "获取全部表单项的值，包括被创建后销毁的表单项。请不要把返回值直接作为 useEffect 的依赖，其返回值会被深克隆，引用地址会发生改变"
    },
    {
      "name": "getFieldsValue",
      "params": "Function(fields: string[])",
      "description": "获取一组表单控件的值，如果不设置 fields 的话，会获取所有的 fields。请不要把返回值直接作为 useEffect 的依赖，其返回值会被深克隆，引用地址会发生改变"
    },
    {
      "name": "getFieldError",
      "params": "Function(field: string)",
      "description": "获取一个表单控件的错误状态"
    },
    {
      "name": "getFieldsError",
      "params": "Function(fields?: string[])",
      "description": "获取一组表单控件的错误状态，如果不设置 fields 的话，会获取所有的控件的错误状态。"
    },
    {
      "name": "scrollToField",
      "params": "Function(field: string, options?: ScrollIntoViewOptions)",
      "description": "滚动到指定表单字段位置。ScrollIntoViewOptions"
    },
    {
      "name": "getTouchedFields",
      "params": "() => string[]",
      "description": "获取被操作过的字段"
    },
    {
      "name": "resetFields",
      "params": "Function(field?: string[])",
      "description": "重置表单控件的值变为初始值"
    },
    {
      "name": "clearFields",
      "params": "Function(field?: string[])",
      "description": "清除表单控件的值以及校验状态。等同于 form.setFields({ [field]: { value: undefined; error: null, warning: null } })"
    }
  ],
  "link": "https://arco.design/react/components/form#api",
  "link_zh": "https://arco.design/react/components/form#api",
  "events": [
    {
      "name": "onChange",
      "description": "表单项值改变时候触发。和 onValuesChange 不同的是只会在用户操作表单项时触发",
      "description_zh": "表单项值改变时候触发。和 onValuesChange 不同的是只会在用户操作表单项时触发",
      "params": "(value: Partial<FormData>, values: Partial<FormData>) => void"
    },
    {
      "name": "onValuesChange",
      "description": "任意表单项值改变时候触发。第一个参数是被改变表单项的值，第二个参数是所有的表单项值",
      "description_zh": "任意表单项值改变时候触发。第一个参数是被改变表单项的值，第二个参数是所有的表单项值",
      "params": "(value: Partial<FormData>, values: Partial<FormData>) => void"
    },
    {
      "name": "onSubmit",
      "description": "数据验证成功后回调事件",
      "description_zh": "数据验证成功后回调事件",
      "params": "(values: FormData) => void"
    },
    {
      "name": "onSubmitFailed",
      "description": "数据验证失败后回调事件",
      "description_zh": "数据验证失败后回调事件",
      "params": "(errors: { [key: string]: FieldError }) => void"
    }
  ],
  "typeDetail": {}
}
