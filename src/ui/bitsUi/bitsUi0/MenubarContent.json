{
  "name": "Menubar.Content",
  "props": {
    "transition": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A Svelte transition function to use when transitioning the content in and out.",
      "description_zh": "A Svelte transition function to use when transitioning the content in and out."
    },
    "transitionConfig": {
      "value": "",
      "default": "_",
      "type": "TransitionConfig",
      "description": "The configuration to apply to the transition.",
      "description_zh": "The configuration to apply to the transition."
    },
    "inTransition": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A Svelte transition function to use when transitioning the content in and out.",
      "description_zh": "A Svelte transition function to use when transitioning the content in and out."
    },
    "inTransitionConfig": {
      "value": "",
      "default": "_",
      "type": "TransitionConfig",
      "description": "The configuration to apply to the transition.",
      "description_zh": "The configuration to apply to the transition."
    },
    "outTransition": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A Svelte transition function to use when transitioning the content in and out.",
      "description_zh": "A Svelte transition function to use when transitioning the content in and out."
    },
    "outTransitionConfig": {
      "value": "",
      "default": "_",
      "type": "TransitionConfig",
      "description": "The configuration to apply to the transition.",
      "description_zh": "The configuration to apply to the transition."
    },
    "side": {
      "value": "",
      "default": "_",
      "type": "enum",
      "description": "The preferred side of the anchor to render against when open. Will be reversed when collisions occur. Floating UI reference.",
      "description_zh": "The preferred side of the anchor to render against when open. Will be reversed when collisions occur. Floating UI reference."
    },
    "sideOffset": {
      "value": "",
      "default": "0",
      "type": "number",
      "description": "The amount of offset to apply to the menu's position on the x-axis. Floating UI reference.",
      "description_zh": "The amount of offset to apply to the menu's position on the x-axis. Floating UI reference."
    },
    "align": {
      "value": "",
      "default": "_",
      "type": "enum",
      "description": "The preferred alignment of the anchor to render against when open. Floating UI reference.",
      "description_zh": "The preferred alignment of the anchor to render against when open. Floating UI reference."
    },
    "alignOffset": {
      "value": "",
      "default": "0",
      "type": "number",
      "description": "An offset in pixels from the 'start' or 'end' alignment options. Floating UI reference.",
      "description_zh": "An offset in pixels from the 'start' or 'end' alignment options. Floating UI reference."
    },
    "avoidCollisions": {
      "value": "",
      "default": "true",
      "type": "boolean",
      "description": "When true, overrides the side and align options to prevent collisions with the boundary edges. Floating UI reference.",
      "description_zh": "When true, overrides the side and align options to prevent collisions with the boundary edges. Floating UI reference."
    },
    "collisionBoundary": {
      "value": "",
      "default": "_",
      "type": "union",
      "description": "A boundary element or array of elements to check for collisions against. Floating UI reference.",
      "description_zh": "A boundary element or array of elements to check for collisions against. Floating UI reference."
    },
    "collisionPadding": {
      "value": "",
      "default": "0",
      "type": "number",
      "description": "The amount in pixels of virtual padding around the viewport edges to check for overflow which will cause a collision. Floating UI reference.",
      "description_zh": "The amount in pixels of virtual padding around the viewport edges to check for overflow which will cause a collision. Floating UI reference."
    },
    "fitViewport": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether the floating element should be constrained to the viewport. Floating UI reference.",
      "description_zh": "Whether the floating element should be constrained to the viewport. Floating UI reference."
    },
    "sameWidth": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether the content should be the same width as the trigger. Floating UI reference.",
      "description_zh": "Whether the content should be the same width as the trigger. Floating UI reference."
    },
    "strategy": {
      "value": "",
      "default": "absolute",
      "type": "enum",
      "description": "The positioning strategy to use for the floating element. Floating UI reference.",
      "description_zh": "The positioning strategy to use for the floating element. Floating UI reference."
    },
    "overlap": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether the floating element can overlap the reference element. Floating UI reference.",
      "description_zh": "Whether the floating element can overlap the reference element. Floating UI reference."
    },
    "asChild": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether to use render delegation with this component or not.",
      "description_zh": "Whether to use render delegation with this component or not."
    },
    "el": {
      "value": "",
      "default": "_",
      "type": "HTMLDivElement",
      "description": "The underlying DOM element being rendered. You can bind to this to programatically interact with the element.",
      "description_zh": "The underlying DOM element being rendered. You can bind to this to programatically interact with the element."
    }
  },
  "description": "The content displayed when the dropdown menu is open.",
  "link": "https://www.bits-ui.com/docs/components/menubar",
  "link_zh": "https://www.bits-ui.com/docs/components/menubar",
  "typeDetail": {},
  "events": [],
  "methods": [],
  "slots": [
    {
      "name": "builder",
      "description": "The builder attributes and actions to apply to the element if using the asChild prop with delegation. ",
      "description_zh": "The builder attributes and actions to apply to the element if using the asChild prop with delegation. "
    }
  ],
  "filename": "MenubarContent"
}
