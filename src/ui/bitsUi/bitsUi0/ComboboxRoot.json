{
  "name": "Combobox.Root",
  "props": {
    "disabled": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether or not the combobox component is disabled.",
      "description_zh": "Whether or not the combobox component is disabled."
    },
    "multiple": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether or not the combobox menu allows multiple selections.",
      "description_zh": "Whether or not the combobox menu allows multiple selections."
    },
    "preventScroll": {
      "value": "",
      "default": "true",
      "type": "boolean",
      "description": "Whether or not to prevent scrolling the body when the menu is open.",
      "description_zh": "Whether or not to prevent scrolling the body when the menu is open."
    },
    "closeOnEscape": {
      "value": "",
      "default": "true",
      "type": "boolean",
      "description": "Whether to close the combobox menu when the escape key is pressed.",
      "description_zh": "Whether to close the combobox menu when the escape key is pressed."
    },
    "closeOnOutsideClick": {
      "value": "",
      "default": "true",
      "type": "boolean",
      "description": "Whether to close the combobox menu when a click occurs outside of it.",
      "description_zh": "Whether to close the combobox menu when a click occurs outside of it."
    },
    "loop": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether or not to loop through the menu items when navigating with the keyboard.",
      "description_zh": "Whether or not to loop through the menu items when navigating with the keyboard."
    },
    "open": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "The open state of the combobox menu.",
      "description_zh": "The open state of the combobox menu."
    },
    "onOpenChange": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A callback that is fired when the combobox menu's open state changes.",
      "description_zh": "A callback that is fired when the combobox menu's open state changes."
    },
    "selected": {
      "value": "",
      "default": "_",
      "type": "object",
      "description": "The value of the currently selected item.",
      "description_zh": "The value of the currently selected item."
    },
    "onSelectedChange": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A callback that is fired when the combobox menu's value changes.",
      "description_zh": "A callback that is fired when the combobox menu's value changes."
    },
    "portal": {
      "value": "",
      "default": "_",
      "type": "union",
      "description": "Where to render the combobox menu when it is open. Defaults to the body. Can be disabled by passing null",
      "description_zh": "Where to render the combobox menu when it is open. Defaults to the body. Can be disabled by passing null"
    },
    "highlightOnHover": {
      "value": "",
      "default": "true",
      "type": "boolean",
      "description": "Whether or not to highlight the currently hovered item.",
      "description_zh": "Whether or not to highlight the currently hovered item."
    },
    "name": {
      "value": "",
      "default": "_",
      "type": "string",
      "description": "The name to apply to the hidden input element for form submission.",
      "description_zh": "The name to apply to the hidden input element for form submission."
    },
    "required": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "Whether or not the combobox menu is required.",
      "description_zh": "Whether or not the combobox menu is required."
    },
    "scrollAlignment": {
      "value": "",
      "default": "'nearest'",
      "type": "enum",
      "description": "The alignment of the highlighted item when scrolling.",
      "description_zh": "The alignment of the highlighted item when scrolling."
    },
    "inputValue": {
      "value": "",
      "default": "_",
      "type": "string",
      "description": "The value of the combobox input element.",
      "description_zh": "The value of the combobox input element."
    },
    "items": {
      "value": "",
      "default": "_",
      "type": "Selected[]",
      "description": "An array of items to add type-safety to the onSelectedChange callback.",
      "description_zh": "An array of items to add type-safety to the onSelectedChange callback."
    },
    "onOutsideClick": {
      "value": "",
      "default": "_",
      "type": "function",
      "description": "A callback function called when a click occurs outside of the element. If event.preventDefault() is called, the default behavior of closing the element will be prevented.",
      "description_zh": "A callback function called when a click occurs outside of the element. If event.preventDefault() is called, the default behavior of closing the element will be prevented."
    },
    "touchedInput": {
      "value": "",
      "default": "false",
      "type": "boolean",
      "description": "The touched state of the input. When the menu closes, the state is reset to false. Whenever a key is pressed into the input, the state is set to true. You can bind to this to handle filtering the items only when the input has been touched.",
      "description_zh": "The touched state of the input. When the menu closes, the state is reset to false. Whenever a key is pressed into the input, the state is set to true. You can bind to this to handle filtering the items only when the input has been touched."
    }
  },
  "description": "The root combobox component which manages & scopes the state of the combobox.",
  "link": "https://www.bits-ui.com/docs/components/combobox",
  "link_zh": "https://www.bits-ui.com/docs/components/combobox",
  "typeDetail": {},
  "events": [],
  "methods": [],
  "slots": [
    {
      "name": "ids",
      "description": "The ids of the elements within the component, useful when you don't necessarily want to provide a custom ID, but still want access to the ID being assigned (if any). ",
      "description_zh": "The ids of the elements within the component, useful when you don't necessarily want to provide a custom ID, but still want access to the ID being assigned (if any). "
    }
  ],
  "filename": "ComboboxRoot"
}
